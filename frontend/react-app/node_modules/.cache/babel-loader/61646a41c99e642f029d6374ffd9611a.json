{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/react-app/src/components/pages/TopPage.tsx\",\n    _s = $RefreshSig$();\n\nimport { Box } from \"@chakra-ui/react\";\nimport { useCallback, useEffect } from \"react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport { Cour } from \"../../store/Cour\";\nimport { Year } from \"../../store/Year\";\nimport { ApiKeyValue } from \"../../store/ApiKeyValue\";\nimport AnimeCardList from \"../organisms/AnimeCardList\";\nimport Header from \"../organisms/Header\";\nimport Search from \"../organisms/Search\";\nimport { useCourFactory } from \"../../customHooks/useCourFactory\";\nimport { useAnimeApiSearch } from \"../../customHooks/useAnimeApiSearch\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TopPage = () => {\n  _s();\n\n  const [apiKeyValue, setApiKeyValue] = useRecoilState(ApiKeyValue);\n  const selectYear = useRecoilValue(Year);\n  const selectCour = useRecoilValue(Cour);\n  const {\n    select_season\n  } = useCourFactory();\n  const {\n    testData\n  } = useAnimeApiSearch();\n  const onClickAnimeSearch = useCallback(() => {\n    const rep = {\n      year: selectYear,\n      cour: select_season\n    };\n    setApiKeyValue(rep);\n    console.log(selectYear);\n    console.log(select_season);\n  }, [selectYear, select_season]);\n  useEffect(() => {\n    const getAnimes = async (year, cour) => {\n      try {\n        const getanime = await client.get('api/annicts/search', {\n          params: {\n            year: apiKeyValue.year,\n            cour: apiKeyValue.cour\n          }\n        });\n        console.log(getanime || 'なし');\n        console.log(apiKeyValue);\n      } catch (error) {\n        showMessage({\n          title: 'アニメ一覧の取得に失敗しました',\n          status: \"error\"\n        });\n      }\n    };\n\n    getAnimes(selectYear, current_season); // return () => {\n    // }    \n  }, [apiKeyValue]);\n  console.log(apiKeyValue);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      w: {\n        base: '80%',\n        md: '70%'\n      },\n      h: \"100%\",\n      bg: \"#ffff\",\n      m: \"100px auto 20px auto\",\n      borderRadius: \"10px\",\n      children: [/*#__PURE__*/_jsxDEV(Search, {\n        onClickAnimeSearch: onClickAnimeSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(AnimeCardList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(TopPage, \"TrCn8BXKnB2zLzXQWkdXRItSyVk=\", false, function () {\n  return [useRecoilState, useRecoilValue, useRecoilValue, useCourFactory, useAnimeApiSearch];\n});\n\n_c = TopPage;\nexport default TopPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"TopPage\");","map":{"version":3,"sources":["/usr/src/app/react-app/src/components/pages/TopPage.tsx"],"names":["Box","useCallback","useEffect","useRecoilState","useRecoilValue","Cour","Year","ApiKeyValue","AnimeCardList","Header","Search","useCourFactory","useAnimeApiSearch","TopPage","apiKeyValue","setApiKeyValue","selectYear","selectCour","select_season","testData","onClickAnimeSearch","rep","year","cour","console","log","getAnimes","getanime","client","get","params","error","showMessage","title","status","current_season","base","md"],"mappings":"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","sourcesContent":["import { Box } from \"@chakra-ui/react\";\nimport { VFC, useCallback, useEffect } from \"react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport { Cour } from \"../../store/Cour\";\nimport { Year } from \"../../store/Year\";\nimport { ApiKeyValue } from \"../../store/ApiKeyValue\";\nimport AnimeCardList from \"../organisms/AnimeCardList\";\nimport Header from \"../organisms/Header\";\nimport Search from \"../organisms/Search\";\nimport { useCourFactory } from \"../../customHooks/useCourFactory\";\nimport { useAnimeApiSearch } from \"../../customHooks/useAnimeApiSearch\";\n\nconst TopPage: VFC = () => {\n    const [ apiKeyValue, setApiKeyValue] = useRecoilState(ApiKeyValue)\n    const selectYear = useRecoilValue(Year)\n    const selectCour = useRecoilValue(Cour)\n    const { select_season } = useCourFactory()\n    const { testData } = useAnimeApiSearch()\n\n    const onClickAnimeSearch = useCallback(() => {\n        const rep = {year: selectYear, cour: select_season}\n        setApiKeyValue(rep)  \n        console.log(selectYear);          \n        console.log(select_season);          \n        \n    }, [selectYear, select_season])\n\n    useEffect(() => {\n\n        const getAnimes = async(year: string, cour: string | undefined) => {\n            try {\n                const getanime = await client.get('api/annicts/search', {\n                    params: {\n                        year: apiKeyValue.year,\n                        cour: apiKeyValue.cour\n                    }\n                })\n                console.log(getanime || 'なし');\n                console.log(apiKeyValue);\n            \n            } catch (error) {\n                showMessage({title: 'アニメ一覧の取得に失敗しました', status: \"error\"})\n            }\n         }\n         getAnimes(selectYear, current_season)\n\n        // return () => {\n        // }    \n    }, [apiKeyValue])   \n    \n    console.log(apiKeyValue);\n    return (\n        <>\n            <Header />\n            <Box w={{base: '80%', md: '70%'}} h='100%' bg='#ffff' m='100px auto 20px auto' borderRadius='10px'>\n                <Search onClickAnimeSearch={onClickAnimeSearch}/>\n                <AnimeCardList />\n            </Box>\n        </>\n    )\n}\n\nexport default TopPage"]},"metadata":{},"sourceType":"module"}