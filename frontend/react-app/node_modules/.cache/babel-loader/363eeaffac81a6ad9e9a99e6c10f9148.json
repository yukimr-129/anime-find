{"ast":null,"code":"import react from 'react';\nimport reactDom from 'react-dom';\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n// Split declaration and implementation to allow this function to pretend to\n// check for actual instance of Promise instead of something with a `then`\n// method.\n// eslint-disable-next-line no-redeclare\n\nfunction isPromise(p) {\n  return !!p && typeof p.then === 'function';\n}\n\nvar Recoil_isPromise = isPromise;\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nfunction nullthrows(x, message) {\n  if (x != null) {\n    return x;\n  }\n\n  throw new Error(message !== null && message !== void 0 ? message : 'Got unexpected null or undefined');\n}\n\nvar Recoil_nullthrows = nullthrows; // TODO Convert Loadable to a Class to allow for runtime type detection.\n// Containing static factories of withValue(), withError(), withPromise(), and all()\n\nclass Canceled {}\n\nconst CANCELED = new Canceled();\nconst loadableAccessors = {\n  valueMaybe() {\n    return undefined;\n  },\n\n  valueOrThrow() {\n    const error = new Error( // $FlowFixMe[object-this-reference]\n    `Loadable expected value, but in \"${this.state}\" state`); // V8 keeps closures alive until stack is accessed, this prevents a memory leak\n\n    throw error;\n  },\n\n  errorMaybe() {\n    return undefined;\n  },\n\n  errorOrThrow() {\n    const error = new Error( // $FlowFixMe[object-this-reference]\n    `Loadable expected error, but in \"${this.state}\" state`); // V8 keeps closures alive until stack is accessed, this prevents a memory leak\n\n    throw error;\n  },\n\n  promiseMaybe() {\n    return undefined;\n  },\n\n  promiseOrThrow() {\n    const error = new Error( // $FlowFixMe[object-this-reference]\n    `Loadable expected promise, but in \"${this.state}\" state`); // V8 keeps closures alive until stack is accessed, this prevents a memory leak\n\n    throw error;\n  },\n\n  is(other) {\n    // $FlowFixMe[object-this-reference]\n    return other.state === this.state && other.contents === this.contents;\n  },\n\n  // TODO Unit tests\n  // TODO Convert Loadable to a Class to better support chaining\n  //      by returning a Loadable from a map function\n  map(map) {\n    // $FlowFixMe[object-this-reference]\n    if (this.state === 'hasError') {\n      // $FlowFixMe[object-this-reference]\n      return this;\n    } // $FlowFixMe[object-this-reference]\n\n\n    if (this.state === 'hasValue') {\n      try {\n        // $FlowFixMe[object-this-reference]\n        const next = map(this.contents); // TODO if next instanceof Loadable, then return next\n\n        return Recoil_isPromise(next) ? loadableWithPromise(next) : loadableWithValue(next);\n      } catch (e) {\n        return Recoil_isPromise(e) ? // If we \"suspended\", then try again.\n        // errors and subsequent retries will be handled in 'loading' case\n        // $FlowFixMe[object-this-reference]\n        loadableWithPromise(e.next(() => map(this.contents))) : loadableWithError(e);\n      }\n    } // $FlowFixMe[object-this-reference]\n\n\n    if (this.state === 'loading') {\n      return loadableWithPromise( // $FlowFixMe[object-this-reference]\n      this.contents // TODO if map returns a loadable, then return the value or promise or throw the error\n      .then(map).catch(e => {\n        if (Recoil_isPromise(e)) {\n          // we were \"suspended,\" try again\n          // $FlowFixMe[object-this-reference]\n          return e.then(() => map(this.contents));\n        }\n\n        throw e;\n      }));\n    }\n\n    const error = new Error('Invalid Loadable state'); // V8 keeps closures alive until stack is accessed, this prevents a memory leak\n\n    throw error;\n  }\n\n};\n\nfunction loadableWithValue(value) {\n  // Build objects this way since Flow doesn't support disjoint unions for class properties\n  return Object.freeze({\n    state: 'hasValue',\n    contents: value,\n    ...loadableAccessors,\n\n    getValue() {\n      return this.contents;\n    },\n\n    toPromise() {\n      return Promise.resolve(this.contents);\n    },\n\n    valueMaybe() {\n      return this.contents;\n    },\n\n    valueOrThrow() {\n      return this.contents;\n    }\n\n  });\n}\n\nfunction loadableWithError(error) {\n  return Object.freeze({\n    state: 'hasError',\n    contents: error,\n    ...loadableAccessors,\n\n    getValue() {\n      throw this.contents;\n    },\n\n    toPromise() {\n      return Promise.reject(this.contents);\n    },\n\n    errorMaybe() {\n      return this.contents;\n    },\n\n    errorOrThrow() {\n      return this.contents;\n    }\n\n  });\n}\n\nfunction loadableWithPromise(promise) {\n  return Object.freeze({\n    state: 'loading',\n    contents: promise,\n    ...loadableAccessors,\n\n    getValue() {\n      throw this.contents.then(({\n        __value\n      }) => __value);\n    },\n\n    toPromise() {\n      return this.contents.then(({\n        __value\n      }) => __value);\n    },\n\n    promiseMaybe() {\n      return this.contents.then(({\n        __value\n      }) => __value);\n    },\n\n    promiseOrThrow() {\n      return this.contents.then(({\n        __value\n      }) => __value);\n    }\n\n  });\n}\n\nfunction loadableLoading() {\n  return loadableWithPromise(new Promise(() => {}));\n}\n\nfunction loadableAll(inputs) {\n  return inputs.every(i => i.state === 'hasValue') ? loadableWithValue(inputs.map(i => i.contents)) : inputs.some(i => i.state === 'hasError') ? loadableWithError(Recoil_nullthrows(inputs.find(i => i.state === 'hasError'), 'Invalid loadable passed to loadableAll').contents) : loadableWithPromise(Promise.all(inputs.map(i => i.contents)).then(value => ({\n    __value: value\n  })));\n}\n\nvar Recoil_Loadable = {\n  loadableWithValue,\n  loadableWithError,\n  loadableWithPromise,\n  loadableLoading,\n  loadableAll,\n  Canceled,\n  CANCELED\n};\n\nvar _useMutableSource; // FIXME T2710559282599660\n\n\nconst useMutableSource = // flowlint-line unclear-type:off\n(_useMutableSource = react.useMutableSource) !== null && _useMutableSource !== void 0 ? _useMutableSource : react.unstable_useMutableSource; // flowlint-line unclear-type:off\n\nfunction mutableSourceExists() {\n  return useMutableSource && !(typeof window !== 'undefined' && window.$disableRecoilValueMutableSource_TEMP_HACK_DO_NOT_USE);\n}\n\nvar Recoil_mutableSource = {\n  mutableSourceExists,\n  useMutableSource\n};\nconst {\n  mutableSourceExists: mutableSourceExists$1\n} = Recoil_mutableSource;\nconst gks = new Map().set('recoil_hamt_2020', true).set('recoil_memory_managament_2020', true);\n\nfunction Recoil_gkx(gk) {\n  var _gks$get;\n\n  if (gk === 'recoil_early_rendering_2021' && !mutableSourceExists$1()) {\n    return false;\n  }\n\n  return (_gks$get = gks.get(gk)) !== null && _gks$get !== void 0 ? _gks$get : false;\n}\n\nRecoil_gkx.setPass = gk => {\n  gks.set(gk, true);\n};\n\nRecoil_gkx.setFail = gk => {\n  gks.set(gk, false);\n};\n\nvar Recoil_gkx_1 = Recoil_gkx; // @oss-only\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nfunction recoverableViolation(message, projectName, {\n  error\n} = {}) {\n  if (process.env.NODE_ENV !== \"production\") {\n    console.error(message, error);\n  }\n\n  return null;\n}\n\nvar recoverableViolation_1 = recoverableViolation; // @oss-only\n\nvar Recoil_recoverableViolation = recoverableViolation_1;\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Utilities for working with built-in Maps and Sets without mutating them.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nfunction setByAddingToSet(set, v) {\n  const next = new Set(set);\n  next.add(v);\n  return next;\n}\n\nfunction setByDeletingFromSet(set, v) {\n  const next = new Set(set);\n  next.delete(v);\n  return next;\n}\n\nfunction mapBySettingInMap(map, k, v) {\n  const next = new Map(map);\n  next.set(k, v);\n  return next;\n}\n\nfunction mapByUpdatingInMap(map, k, updater) {\n  const next = new Map(map);\n  next.set(k, updater(next.get(k)));\n  return next;\n}\n\nfunction mapByDeletingFromMap(map, k) {\n  const next = new Map(map);\n  next.delete(k);\n  return next;\n}\n\nfunction mapByDeletingMultipleFromMap(map, ks) {\n  const next = new Map(map);\n  ks.forEach(k => next.delete(k));\n  return next;\n}\n\nvar Recoil_CopyOnWrite = {\n  setByAddingToSet,\n  setByDeletingFromSet,\n  mapBySettingInMap,\n  mapByUpdatingInMap,\n  mapByDeletingFromMap,\n  mapByDeletingMultipleFromMap\n};\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\n/**\n * Creates a new iterable whose output is generated by passing the input\n * iterable's values through the filter function.\n */\n\nfunction* filterIterable(iterable, predicate) {\n  // Use generator to create iterable/iterator\n  let index = 0;\n\n  for (const value of iterable) {\n    if (predicate(value, index++)) {\n      yield value;\n    }\n  }\n}\n\nvar Recoil_filterIterable = filterIterable;\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\n/**\n * Creates a new iterable whose output is generated by passing the input\n * iterable's values through the mapper function.\n */\n\nfunction mapIterable(iterable, callback) {\n  // Use generator to create iterable/iterator\n  return function* () {\n    let index = 0;\n\n    for (const value of iterable) {\n      yield callback(value, index++);\n    }\n  }();\n}\n\nvar Recoil_mapIterable = mapIterable;\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nfunction sprintf(format, ...args) {\n  let index = 0;\n  return format.replace(/%s/g, () => String(args[index++]));\n}\n\nvar sprintf_1 = sprintf;\n\nfunction expectationViolation(format, ...args) {\n  if (process.env.NODE_ENV !== \"production\") {\n    const message = sprintf_1.call(null, format, ...args);\n    const error = new Error(message);\n    error.name = 'Expectation Violation';\n    console.error(error);\n  }\n}\n\nvar expectationViolation_1 = expectationViolation; // @oss-only\n\nvar Recoil_expectationViolation = expectationViolation_1;\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n// eslint-disable-next-line no-unused-vars\n\n\nclass AbstractRecoilValue {\n  constructor(newKey) {\n    _defineProperty(this, \"key\", void 0);\n\n    this.key = newKey;\n  }\n\n}\n\nclass RecoilState extends AbstractRecoilValue {}\n\nclass RecoilValueReadOnly extends AbstractRecoilValue {}\n\nfunction isRecoilValue(x) {\n  return x instanceof RecoilState || x instanceof RecoilValueReadOnly;\n}\n\nvar Recoil_RecoilValue = {\n  AbstractRecoilValue,\n  RecoilState,\n  RecoilValueReadOnly,\n  isRecoilValue\n};\nvar Recoil_RecoilValue_1 = Recoil_RecoilValue.AbstractRecoilValue;\nvar Recoil_RecoilValue_2 = Recoil_RecoilValue.RecoilState;\nvar Recoil_RecoilValue_3 = Recoil_RecoilValue.RecoilValueReadOnly;\nvar Recoil_RecoilValue_4 = Recoil_RecoilValue.isRecoilValue;\nvar Recoil_RecoilValue$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  AbstractRecoilValue: Recoil_RecoilValue_1,\n  RecoilState: Recoil_RecoilValue_2,\n  RecoilValueReadOnly: Recoil_RecoilValue_3,\n  isRecoilValue: Recoil_RecoilValue_4\n});\n\nclass DefaultValue {}\n\nconst DEFAULT_VALUE = new DefaultValue();\n\nclass RecoilValueNotReady extends Error {\n  constructor(key) {\n    super(`Tried to set the value of Recoil selector ${key} using an updater function, but it is an async selector in a pending or error state; this is not supported.`);\n  }\n\n} // flowlint-next-line unclear-type:off\n\n\nconst nodes = new Map(); // flowlint-next-line unclear-type:off\n\nconst recoilValues = new Map();\n/* eslint-disable no-redeclare */\n\nfunction recoilValuesForKeys(keys) {\n  return Recoil_mapIterable(keys, key => Recoil_nullthrows(recoilValues.get(key)));\n}\n\nfunction registerNode(node) {\n  if (nodes.has(node.key)) {\n    const message = `Duplicate atom key \"${node.key}\". This is a FATAL ERROR in\n      production. But it is safe to ignore this warning if it occurred because of\n      hot module replacement.`; // TODO Need to figure out if there is a standard/open-source equivalent to see if hot module replacement is happening:\n    // prettier-ignore\n    // @fb-only: if (__DEV__) {\n    // @fb-only: const isAcceptingUpdate = require('__debug').isAcceptingUpdate;\n    // prettier-ignore\n    // @fb-only: if (typeof isAcceptingUpdate !== 'function' || !isAcceptingUpdate()) {\n    // @fb-only: expectationViolation(message, 'recoil');\n    // @fb-only: }\n    // prettier-ignore\n    // @fb-only: } else {\n    // @fb-only: recoverableViolation(message, 'recoil');\n    // @fb-only: }\n\n    console.warn(message); // @oss-only\n  }\n\n  nodes.set(node.key, node);\n  const recoilValue = node.set == null ? new Recoil_RecoilValue$1.RecoilValueReadOnly(node.key) : new Recoil_RecoilValue$1.RecoilState(node.key);\n  recoilValues.set(node.key, recoilValue);\n  return recoilValue;\n}\n/* eslint-enable no-redeclare */\n\n\nclass NodeMissingError extends Error {} // flowlint-next-line unclear-type:off\n\n\nfunction getNode(key) {\n  const node = nodes.get(key);\n\n  if (node == null) {\n    throw new NodeMissingError(`Missing definition for RecoilValue: \"${key}\"\"`);\n  }\n\n  return node;\n} // flowlint-next-line unclear-type:off\n\n\nfunction getNodeMaybe(key) {\n  return nodes.get(key);\n}\n\nconst configDeletionHandlers = new Map();\n\nfunction deleteNodeConfigIfPossible(key) {\n  var _node$shouldDeleteCon;\n\n  if (!Recoil_gkx_1('recoil_memory_managament_2020')) {\n    return;\n  }\n\n  const node = nodes.get(key);\n\n  if (node === null || node === void 0 ? void 0 : (_node$shouldDeleteCon = node.shouldDeleteConfigOnRelease) === null || _node$shouldDeleteCon === void 0 ? void 0 : _node$shouldDeleteCon.call(node)) {\n    var _getConfigDeletionHan;\n\n    nodes.delete(key);\n    (_getConfigDeletionHan = getConfigDeletionHandler(key)) === null || _getConfigDeletionHan === void 0 ? void 0 : _getConfigDeletionHan();\n    configDeletionHandlers.delete(key);\n  }\n}\n\nfunction setConfigDeletionHandler(key, fn) {\n  if (!Recoil_gkx_1('recoil_memory_managament_2020')) {\n    return;\n  }\n\n  if (fn === undefined) {\n    configDeletionHandlers.delete(key);\n  } else {\n    configDeletionHandlers.set(key, fn);\n  }\n}\n\nfunction getConfigDeletionHandler(key) {\n  return configDeletionHandlers.get(key);\n}\n\nvar Recoil_Node = {\n  nodes,\n  recoilValues,\n  registerNode,\n  getNode,\n  getNodeMaybe,\n  deleteNodeConfigIfPossible,\n  setConfigDeletionHandler,\n  getConfigDeletionHandler,\n  recoilValuesForKeys,\n  NodeMissingError,\n  DefaultValue,\n  DEFAULT_VALUE,\n  RecoilValueNotReady\n};\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nclass RetentionZone {}\n\nfunction retentionZone() {\n  return new RetentionZone();\n}\n\nvar Recoil_RetentionZone = {\n  RetentionZone,\n  retentionZone\n};\nconst {\n  setByAddingToSet: setByAddingToSet$1\n} = Recoil_CopyOnWrite;\nconst {\n  getNode: getNode$1,\n  getNodeMaybe: getNodeMaybe$1,\n  recoilValuesForKeys: recoilValuesForKeys$1\n} = Recoil_Node;\nconst {\n  RetentionZone: RetentionZone$1\n} = Recoil_RetentionZone; // flowlint-next-line unclear-type:off\n\nconst emptySet = Object.freeze(new Set());\n\nclass ReadOnlyRecoilValueError extends Error {}\n\nfunction initializeRetentionForNode(store, nodeKey, retainedBy) {\n  if (!Recoil_gkx_1('recoil_memory_managament_2020')) {\n    return () => undefined;\n  }\n\n  const {\n    nodesRetainedByZone\n  } = store.getState().retention;\n\n  function addToZone(zone) {\n    let set = nodesRetainedByZone.get(zone);\n\n    if (!set) {\n      nodesRetainedByZone.set(zone, set = new Set());\n    }\n\n    set.add(nodeKey);\n  }\n\n  if (retainedBy instanceof RetentionZone$1) {\n    addToZone(retainedBy);\n  } else if (Array.isArray(retainedBy)) {\n    for (const zone of retainedBy) {\n      addToZone(zone);\n    }\n  }\n\n  return () => {\n    if (!Recoil_gkx_1('recoil_memory_managament_2020')) {\n      return;\n    }\n\n    const nodesRetainedByZone = store.getState().retention.nodesRetainedByZone;\n\n    function deleteFromZone(zone) {\n      const set = nodesRetainedByZone.get(zone);\n\n      if (set) {\n        set.delete(nodeKey);\n      }\n\n      if (set && set.size === 0) {\n        nodesRetainedByZone.delete(zone);\n      }\n    }\n\n    if (retainedBy instanceof RetentionZone$1) {\n      deleteFromZone(retainedBy);\n    } else if (Array.isArray(retainedBy)) {\n      for (const zone of retainedBy) {\n        deleteFromZone(zone);\n      }\n    }\n  };\n}\n\nfunction initializeNodeIfNewToStore(store, treeState, key, trigger) {\n  const storeState = store.getState();\n\n  if (storeState.nodeCleanupFunctions.has(key)) {\n    return;\n  }\n\n  const config = getNode$1(key);\n  const retentionCleanup = initializeRetentionForNode(store, key, config.retainedBy);\n  const nodeCleanup = config.init(store, treeState, trigger);\n  storeState.nodeCleanupFunctions.set(key, () => {\n    nodeCleanup();\n    retentionCleanup();\n  });\n}\n\nfunction cleanUpNode(store, key) {\n  var _state$nodeCleanupFun;\n\n  const state = store.getState();\n  (_state$nodeCleanupFun = state.nodeCleanupFunctions.get(key)) === null || _state$nodeCleanupFun === void 0 ? void 0 : _state$nodeCleanupFun();\n  state.nodeCleanupFunctions.delete(key);\n} // Get the current value loadable of a node and update the state.\n// Update dependencies and subscriptions for selectors.\n// Update saved value validation for atoms.\n\n\nfunction getNodeLoadable(store, state, key) {\n  initializeNodeIfNewToStore(store, state, key, 'get');\n  return getNode$1(key).get(store, state);\n} // Peek at the current value loadable for a node without any evaluation or state change\n\n\nfunction peekNodeLoadable(store, state, key) {\n  return getNode$1(key).peek(store, state);\n} // Write value directly to state bypassing the Node interface as the node\n// definitions may not have been loaded yet when processing the initial snapshot.\n\n\nfunction setUnvalidatedAtomValue_DEPRECATED(state, key, newValue) {\n  var _node$invalidate;\n\n  const node = getNodeMaybe$1(key);\n  node === null || node === void 0 ? void 0 : (_node$invalidate = node.invalidate) === null || _node$invalidate === void 0 ? void 0 : _node$invalidate.call(node, state);\n  return { ...state,\n    atomValues: state.atomValues.clone().delete(key),\n    nonvalidatedAtoms: state.nonvalidatedAtoms.clone().set(key, newValue),\n    dirtyAtoms: setByAddingToSet$1(state.dirtyAtoms, key)\n  };\n} // Return the discovered dependencies and values to be written by setting\n// a node value. (Multiple values may be written due to selectors getting to\n// set upstreams; deps may be discovered because of reads in updater functions.)\n\n\nfunction setNodeValue(store, state, key, newValue) {\n  const node = getNode$1(key);\n\n  if (node.set == null) {\n    throw new ReadOnlyRecoilValueError(`Attempt to set read-only RecoilValue: ${key}`);\n  }\n\n  const set = node.set; // so flow doesn't lose the above refinement.\n\n  initializeNodeIfNewToStore(store, state, key, 'set');\n  return set(store, state, newValue);\n}\n\nfunction peekNodeInfo(store, state, key) {\n  var _graph$nodeDeps$get, _storeState$nodeToCom, _storeState$nodeToCom2;\n\n  const storeState = store.getState();\n  const graph = store.getGraph(state.version);\n  const type = storeState.knownAtoms.has(key) ? 'atom' : storeState.knownSelectors.has(key) ? 'selector' : undefined;\n  const downstreamNodes = Recoil_filterIterable(getDownstreamNodes(store, state, new Set([key])), nodeKey => nodeKey !== key);\n  return {\n    loadable: peekNodeLoadable(store, state, key),\n    isActive: storeState.knownAtoms.has(key) || storeState.knownSelectors.has(key),\n    isSet: type === 'selector' ? false : state.atomValues.has(key),\n    isModified: state.dirtyAtoms.has(key),\n    type,\n    // Report current dependencies.  If the node hasn't been evaluated, then\n    // dependencies may be missing based on the current state.\n    deps: recoilValuesForKeys$1((_graph$nodeDeps$get = graph.nodeDeps.get(key)) !== null && _graph$nodeDeps$get !== void 0 ? _graph$nodeDeps$get : []),\n    // Reportsall \"current\" subscribers.  Evaluating other nodes or\n    // previous in-progress async evaluations may introduce new subscribers.\n    subscribers: {\n      nodes: recoilValuesForKeys$1(downstreamNodes),\n      components: Recoil_mapIterable((_storeState$nodeToCom = (_storeState$nodeToCom2 = storeState.nodeToComponentSubscriptions.get(key)) === null || _storeState$nodeToCom2 === void 0 ? void 0 : _storeState$nodeToCom2.values()) !== null && _storeState$nodeToCom !== void 0 ? _storeState$nodeToCom : [], ([name]) => ({\n        name\n      }))\n    }\n  };\n} // Find all of the recursively dependent nodes\n\n\nfunction getDownstreamNodes(store, state, keys) {\n  const visitedNodes = new Set();\n  const visitingNodes = Array.from(keys);\n  const graph = store.getGraph(state.version);\n\n  for (let key = visitingNodes.pop(); key; key = visitingNodes.pop()) {\n    var _graph$nodeToNodeSubs;\n\n    visitedNodes.add(key);\n    const subscribedNodes = (_graph$nodeToNodeSubs = graph.nodeToNodeSubscriptions.get(key)) !== null && _graph$nodeToNodeSubs !== void 0 ? _graph$nodeToNodeSubs : emptySet;\n\n    for (const downstreamNode of subscribedNodes) {\n      if (!visitedNodes.has(downstreamNode)) {\n        visitingNodes.push(downstreamNode);\n      }\n    }\n  }\n\n  return visitedNodes;\n}\n\nvar Recoil_FunctionalCore = {\n  getNodeLoadable,\n  peekNodeLoadable,\n  setNodeValue,\n  cleanUpNode,\n  setUnvalidatedAtomValue_DEPRECATED,\n  peekNodeInfo,\n  getDownstreamNodes,\n  initializeNodeIfNewToStore\n};\nconst {\n  CANCELED: CANCELED$1\n} = Recoil_Loadable;\nconst {\n  getDownstreamNodes: getDownstreamNodes$1,\n  getNodeLoadable: getNodeLoadable$1,\n  setNodeValue: setNodeValue$1\n} = Recoil_FunctionalCore;\nconst {\n  getNodeMaybe: getNodeMaybe$2\n} = Recoil_Node;\nconst {\n  DefaultValue: DefaultValue$1,\n  RecoilValueNotReady: RecoilValueNotReady$1\n} = Recoil_Node;\nconst {\n  AbstractRecoilValue: AbstractRecoilValue$1,\n  RecoilState: RecoilState$1,\n  RecoilValueReadOnly: RecoilValueReadOnly$1,\n  isRecoilValue: isRecoilValue$1\n} = Recoil_RecoilValue$1;\n\nfunction getRecoilValueAsLoadable(store, {\n  key\n}, treeState = store.getState().currentTree) {\n  var _storeState$nextTree, _storeState$previousT; // Reading from an older tree can cause bugs because the dependencies that we\n  // discover during the read are lost.\n\n\n  const storeState = store.getState();\n\n  if (!(treeState.version === storeState.currentTree.version || treeState.version === ((_storeState$nextTree = storeState.nextTree) === null || _storeState$nextTree === void 0 ? void 0 : _storeState$nextTree.version) || treeState.version === ((_storeState$previousT = storeState.previousTree) === null || _storeState$previousT === void 0 ? void 0 : _storeState$previousT.version))) {\n    Recoil_recoverableViolation('Tried to read from a discarded tree');\n  }\n\n  const loadable = getNodeLoadable$1(store, treeState, key);\n\n  if (loadable.state === 'loading') {\n    loadable.contents.catch(() => {\n      /**\n       * HACK: intercept thrown error here to prevent an uncaught promise exception. Ideally this would happen closer to selector\n       * execution (perhaps introducing a new ERROR class to be resolved by async selectors that are in an error state)\n       */\n      return CANCELED$1;\n    });\n  }\n\n  return loadable;\n}\n\nfunction applyAtomValueWrites(atomValues, writes) {\n  const result = atomValues.clone();\n  writes.forEach((v, k) => {\n    if (v.state === 'hasValue' && v.contents instanceof DefaultValue$1) {\n      result.delete(k);\n    } else {\n      result.set(k, v);\n    }\n  });\n  return result;\n}\n\nfunction valueFromValueOrUpdater(store, state, {\n  key\n}, valueOrUpdater) {\n  if (typeof valueOrUpdater === 'function') {\n    // Updater form: pass in the current value. Throw if the current value\n    // is unavailable (namely when updating an async selector that's\n    // pending or errored):\n    const current = getNodeLoadable$1(store, state, key);\n\n    if (current.state === 'loading') {\n      throw new RecoilValueNotReady$1(key);\n    } else if (current.state === 'hasError') {\n      throw current.contents;\n    } // T itself may be a function, so our refinement is not sufficient:\n\n\n    return valueOrUpdater(current.contents); // flowlint-line unclear-type:off\n  } else {\n    return valueOrUpdater;\n  }\n}\n\nfunction applyAction(store, state, action) {\n  if (action.type === 'set') {\n    const {\n      recoilValue,\n      valueOrUpdater\n    } = action;\n    const newValue = valueFromValueOrUpdater(store, state, recoilValue, valueOrUpdater);\n    const writes = setNodeValue$1(store, state, recoilValue.key, newValue);\n\n    for (const [key, loadable] of writes.entries()) {\n      writeLoadableToTreeState(state, key, loadable);\n    }\n  } else if (action.type === 'setLoadable') {\n    const {\n      recoilValue: {\n        key\n      },\n      loadable\n    } = action;\n    writeLoadableToTreeState(state, key, loadable);\n  } else if (action.type === 'markModified') {\n    const {\n      recoilValue: {\n        key\n      }\n    } = action;\n    state.dirtyAtoms.add(key);\n  } else if (action.type === 'setUnvalidated') {\n    var _node$invalidate; // Write value directly to state bypassing the Node interface as the node\n    // definitions may not have been loaded yet when processing the initial snapshot.\n\n\n    const {\n      recoilValue: {\n        key\n      },\n      unvalidatedValue\n    } = action;\n    const node = getNodeMaybe$2(key);\n    node === null || node === void 0 ? void 0 : (_node$invalidate = node.invalidate) === null || _node$invalidate === void 0 ? void 0 : _node$invalidate.call(node, state);\n    state.atomValues.delete(key);\n    state.nonvalidatedAtoms.set(key, unvalidatedValue);\n    state.dirtyAtoms.add(key);\n  } else {\n    Recoil_recoverableViolation(`Unknown action ${action.type}`);\n  }\n}\n\nfunction writeLoadableToTreeState(state, key, loadable) {\n  if (loadable.state === 'hasValue' && loadable.contents instanceof DefaultValue$1) {\n    state.atomValues.delete(key);\n  } else {\n    state.atomValues.set(key, loadable);\n  }\n\n  state.dirtyAtoms.add(key);\n  state.nonvalidatedAtoms.delete(key);\n}\n\nfunction applyActionsToStore(store, actions) {\n  store.replaceState(state => {\n    const newState = copyTreeState(state);\n\n    for (const action of actions) {\n      applyAction(store, newState, action);\n    }\n\n    invalidateDownstreams(store, newState);\n    return newState;\n  });\n}\n\nfunction queueOrPerformStateUpdate(store, action) {\n  if (batchStack.length) {\n    const actionsByStore = batchStack[batchStack.length - 1];\n    let actions = actionsByStore.get(store);\n\n    if (!actions) {\n      actionsByStore.set(store, actions = []);\n    }\n\n    actions.push(action);\n  } else {\n    applyActionsToStore(store, [action]);\n  }\n}\n\nconst batchStack = [];\n\nfunction batchStart() {\n  const actionsByStore = new Map();\n  batchStack.push(actionsByStore);\n  return () => {\n    for (const [store, actions] of actionsByStore) {\n      applyActionsToStore(store, actions);\n    }\n\n    const popped = batchStack.pop();\n\n    if (popped !== actionsByStore) {\n      Recoil_recoverableViolation('Incorrect order of batch popping');\n    }\n  };\n}\n\nfunction copyTreeState(state) {\n  return { ...state,\n    atomValues: state.atomValues.clone(),\n    nonvalidatedAtoms: state.nonvalidatedAtoms.clone(),\n    dirtyAtoms: new Set(state.dirtyAtoms)\n  };\n}\n\nfunction invalidateDownstreams(store, state) {\n  // Inform any nodes that were changed or downstream of changes so that they\n  // can clear out any caches as needed due to the update:\n  const downstreams = getDownstreamNodes$1(store, state, state.dirtyAtoms);\n\n  for (const key of downstreams) {\n    var _getNodeMaybe, _getNodeMaybe$invalid;\n\n    (_getNodeMaybe = getNodeMaybe$2(key)) === null || _getNodeMaybe === void 0 ? void 0 : (_getNodeMaybe$invalid = _getNodeMaybe.invalidate) === null || _getNodeMaybe$invalid === void 0 ? void 0 : _getNodeMaybe$invalid.call(_getNodeMaybe, state);\n  }\n}\n\nfunction setRecoilValue(store, recoilValue, valueOrUpdater) {\n  queueOrPerformStateUpdate(store, {\n    type: 'set',\n    recoilValue,\n    valueOrUpdater\n  });\n}\n\nfunction setRecoilValueLoadable(store, recoilValue, loadable) {\n  if (loadable instanceof DefaultValue$1) {\n    return setRecoilValue(store, recoilValue, loadable);\n  }\n\n  queueOrPerformStateUpdate(store, {\n    type: 'setLoadable',\n    recoilValue,\n    loadable\n  });\n}\n\nfunction markRecoilValueModified(store, recoilValue) {\n  queueOrPerformStateUpdate(store, {\n    type: 'markModified',\n    recoilValue\n  });\n}\n\nfunction setUnvalidatedRecoilValue(store, recoilValue, unvalidatedValue) {\n  queueOrPerformStateUpdate(store, {\n    type: 'setUnvalidated',\n    recoilValue,\n    unvalidatedValue\n  });\n}\n\nlet subscriptionID = 0;\n\nfunction subscribeToRecoilValue(store, {\n  key\n}, callback, componentDebugName = null) {\n  const subID = subscriptionID++;\n  const storeState = store.getState();\n\n  if (!storeState.nodeToComponentSubscriptions.has(key)) {\n    storeState.nodeToComponentSubscriptions.set(key, new Map());\n  }\n\n  Recoil_nullthrows(storeState.nodeToComponentSubscriptions.get(key)).set(subID, [componentDebugName !== null && componentDebugName !== void 0 ? componentDebugName : '<not captured>', callback]); // Handle the case that, during the same tick that we are subscribing, an atom\n  // has been updated by some effect handler. Otherwise we will miss the update.\n\n  if (Recoil_gkx_1('recoil_early_rendering_2021')) {\n    const nextTree = store.getState().nextTree;\n\n    if (nextTree && nextTree.dirtyAtoms.has(key)) {\n      callback(nextTree);\n    }\n  }\n\n  return {\n    release: () => {\n      const storeState = store.getState();\n      const subs = storeState.nodeToComponentSubscriptions.get(key);\n\n      if (subs === undefined || !subs.has(subID)) {\n        Recoil_recoverableViolation(`Subscription missing at release time for atom ${key}. This is a bug in Recoil.`);\n        return;\n      }\n\n      subs.delete(subID);\n\n      if (subs.size === 0) {\n        storeState.nodeToComponentSubscriptions.delete(key);\n      }\n    }\n  };\n}\n\nvar Recoil_RecoilValueInterface = {\n  RecoilValueReadOnly: RecoilValueReadOnly$1,\n  AbstractRecoilValue: AbstractRecoilValue$1,\n  RecoilState: RecoilState$1,\n  getRecoilValueAsLoadable,\n  setRecoilValue,\n  setRecoilValueLoadable,\n  markRecoilValueModified,\n  setUnvalidatedRecoilValue,\n  subscribeToRecoilValue,\n  isRecoilValue: isRecoilValue$1,\n  applyAtomValueWrites,\n  // TODO Remove export when deprecating initialStoreState_DEPRECATED in RecoilRoot\n  batchStart,\n  writeLoadableToTreeState,\n  invalidateDownstreams,\n  copyTreeState,\n  invalidateDownstreams_FOR_TESTING: invalidateDownstreams\n};\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n *\n * This is to export esstiential functions from react-dom\n * for our web build\n */\n\nconst {\n  unstable_batchedUpdates\n} = reactDom;\nvar ReactBatchedUpdates = {\n  unstable_batchedUpdates\n};\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n *\n * This is to export esstiential functions from react-dom\n * for our web build\n */\n// @fb-only: const {unstable_batchedUpdates} = require('ReactDOMComet');\n\nconst {\n  unstable_batchedUpdates: unstable_batchedUpdates$1\n} = ReactBatchedUpdates; // @oss-only\n\nvar Recoil_ReactBatchedUpdates = {\n  unstable_batchedUpdates: unstable_batchedUpdates$1\n};\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nconst {\n  batchStart: batchStart$1\n} = Recoil_RecoilValueInterface;\nconst {\n  unstable_batchedUpdates: unstable_batchedUpdates$2\n} = Recoil_ReactBatchedUpdates;\nlet batcher = unstable_batchedUpdates$2; // flowlint-next-line unclear-type:off\n\n/**\n * Sets the provided batcher function as the batcher function used by Recoil.\n *\n * Set the batcher to a custom batcher for your renderer,\n * if you use a renderer other than React DOM or React Native.\n */\n\nconst setBatcher = newBatcher => {\n  batcher = newBatcher;\n};\n/**\n * Returns the current batcher function.\n */\n\n\nconst getBatcher = () => batcher;\n/**\n * Calls the current batcher function and passes the\n * provided callback function.\n */\n\n\nconst batchUpdates = callback => {\n  batcher(() => {\n    let batchEnd = () => undefined;\n\n    try {\n      batchEnd = batchStart$1();\n      callback();\n    } finally {\n      batchEnd();\n    }\n  });\n};\n\nvar Recoil_Batching = {\n  getBatcher,\n  setBatcher,\n  batchUpdates\n};\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nfunction enqueueExecution(s, f) {\n  f();\n}\n\nvar Recoil_Queue = {\n  enqueueExecution\n};\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\n/**\n * Returns a set containing all of the values from the first set that are not\n * present in any of the subsequent sets.\n *\n * Note: this is written procedurally (i.e., without filterSet) for performant\n * use in tight loops.\n */\n\nfunction differenceSets(set, ...setsWithValuesToRemove) {\n  const ret = new Set();\n\n  FIRST: for (const value of set) {\n    for (const otherSet of setsWithValuesToRemove) {\n      if (otherSet.has(value)) {\n        continue FIRST;\n      }\n    }\n\n    ret.add(value);\n  }\n\n  return ret;\n}\n\nvar Recoil_differenceSets = differenceSets;\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\n/**\n * Returns a new Map object with the same keys as the original, but with the\n * values replaced with the output of the given callback function.\n */\n\nfunction mapMap(map, callback) {\n  const result = new Map();\n  map.forEach((value, key) => {\n    result.set(key, callback(value, key));\n  });\n  return result;\n}\n\nvar Recoil_mapMap = mapMap;\n\nfunction graph() {\n  return {\n    nodeDeps: new Map(),\n    nodeToNodeSubscriptions: new Map()\n  };\n}\n\nfunction cloneGraph(graph) {\n  return {\n    nodeDeps: Recoil_mapMap(graph.nodeDeps, s => new Set(s)),\n    nodeToNodeSubscriptions: Recoil_mapMap(graph.nodeToNodeSubscriptions, s => new Set(s))\n  };\n} // Note that this overwrites the deps of existing nodes, rather than unioning\n// the new deps with the old deps.\n\n\nfunction mergeDependencyMapIntoGraph(deps, graph, // If olderGraph is given then we will not overwrite changes made to the given\n// graph compared with olderGraph:\nolderGraph) {\n  const {\n    nodeDeps,\n    nodeToNodeSubscriptions\n  } = graph;\n  deps.forEach((upstreams, downstream) => {\n    const existingUpstreams = nodeDeps.get(downstream);\n\n    if (existingUpstreams && olderGraph && existingUpstreams !== olderGraph.nodeDeps.get(downstream)) {\n      return;\n    } // Update nodeDeps:\n\n\n    nodeDeps.set(downstream, new Set(upstreams)); // Add new deps to nodeToNodeSubscriptions:\n\n    const addedUpstreams = existingUpstreams == null ? upstreams : Recoil_differenceSets(upstreams, existingUpstreams);\n    addedUpstreams.forEach(upstream => {\n      if (!nodeToNodeSubscriptions.has(upstream)) {\n        nodeToNodeSubscriptions.set(upstream, new Set());\n      }\n\n      const existing = Recoil_nullthrows(nodeToNodeSubscriptions.get(upstream));\n      existing.add(downstream);\n    }); // Remove removed deps from nodeToNodeSubscriptions:\n\n    if (existingUpstreams) {\n      const removedUpstreams = Recoil_differenceSets(existingUpstreams, upstreams);\n      removedUpstreams.forEach(upstream => {\n        if (!nodeToNodeSubscriptions.has(upstream)) {\n          return;\n        }\n\n        const existing = Recoil_nullthrows(nodeToNodeSubscriptions.get(upstream));\n        existing.delete(downstream);\n\n        if (existing.size === 0) {\n          nodeToNodeSubscriptions.delete(upstream);\n        }\n      });\n    }\n  });\n}\n\nfunction saveDependencyMapToStore(dependencyMap, store, version) {\n  var _storeState$nextTree, _storeState$previousT, _storeState$previousT2, _storeState$previousT3;\n\n  const storeState = store.getState();\n\n  if (!(version === storeState.currentTree.version || version === ((_storeState$nextTree = storeState.nextTree) === null || _storeState$nextTree === void 0 ? void 0 : _storeState$nextTree.version) || version === ((_storeState$previousT = storeState.previousTree) === null || _storeState$previousT === void 0 ? void 0 : _storeState$previousT.version))) {\n    Recoil_recoverableViolation('Tried to save dependencies to a discarded tree');\n  } // Merge the dependencies discovered into the store's dependency map\n  // for the version that was read:\n\n\n  const graph = store.getGraph(version);\n  mergeDependencyMapIntoGraph(dependencyMap, graph); // If this version is not the latest version, also write these dependencies\n  // into later versions if they don't already have their own:\n\n  if (version === ((_storeState$previousT2 = storeState.previousTree) === null || _storeState$previousT2 === void 0 ? void 0 : _storeState$previousT2.version)) {\n    const currentGraph = store.getGraph(storeState.currentTree.version);\n    mergeDependencyMapIntoGraph(dependencyMap, currentGraph, graph);\n  }\n\n  if (version === ((_storeState$previousT3 = storeState.previousTree) === null || _storeState$previousT3 === void 0 ? void 0 : _storeState$previousT3.version) || version === storeState.currentTree.version) {\n    var _storeState$nextTree2;\n\n    const nextVersion = (_storeState$nextTree2 = storeState.nextTree) === null || _storeState$nextTree2 === void 0 ? void 0 : _storeState$nextTree2.version;\n\n    if (nextVersion !== undefined) {\n      const nextGraph = store.getGraph(nextVersion);\n      mergeDependencyMapIntoGraph(dependencyMap, nextGraph, graph);\n    }\n  }\n}\n\nfunction mergeDepsIntoDependencyMap(from, into) {\n  from.forEach((upstreamDeps, downstreamNode) => {\n    if (!into.has(downstreamNode)) {\n      into.set(downstreamNode, new Set());\n    }\n\n    const deps = Recoil_nullthrows(into.get(downstreamNode));\n    upstreamDeps.forEach(dep => deps.add(dep));\n  });\n}\n\nfunction addToDependencyMap(downstream, upstream, dependencyMap) {\n  if (!dependencyMap.has(downstream)) {\n    dependencyMap.set(downstream, new Set());\n  }\n\n  Recoil_nullthrows(dependencyMap.get(downstream)).add(upstream);\n}\n\nvar Recoil_Graph = {\n  addToDependencyMap,\n  cloneGraph,\n  graph,\n  mergeDepsIntoDependencyMap,\n  saveDependencyMapToStore\n};\n\nfunction createCommonjsModule(fn, module) {\n  return module = {\n    exports: {}\n  }, fn(module, module.exports), module.exports;\n}\n\nvar hamt_1 = createCommonjsModule(function (module) {\n  var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  };\n  /**\n      @fileOverview Hash Array Mapped Trie.\n  \n      Code based on: https://github.com/exclipy/pdata\n  */\n\n\n  var hamt = {}; // export\n\n  /* Configuration\n   ******************************************************************************/\n\n  var SIZE = 5;\n  var BUCKET_SIZE = Math.pow(2, SIZE);\n  var MASK = BUCKET_SIZE - 1;\n  var MAX_INDEX_NODE = BUCKET_SIZE / 2;\n  var MIN_ARRAY_NODE = BUCKET_SIZE / 4;\n  /*\n   ******************************************************************************/\n\n  var nothing = {};\n\n  var constant = function constant(x) {\n    return function () {\n      return x;\n    };\n  };\n  /**\n      Get 32 bit hash of string.\n  \n      Based on:\n      http://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript-jquery\n  */\n\n\n  var hash = hamt.hash = function (str) {\n    var type = typeof str === 'undefined' ? 'undefined' : _typeof(str);\n    if (type === 'number') return str;\n    if (type !== 'string') str += '';\n    var hash = 0;\n\n    for (var i = 0, len = str.length; i < len; ++i) {\n      var c = str.charCodeAt(i);\n      hash = (hash << 5) - hash + c | 0;\n    }\n\n    return hash;\n  };\n  /* Bit Ops\n   ******************************************************************************/\n\n  /**\n      Hamming weight.\n  \n      Taken from: http://jsperf.com/hamming-weight\n  */\n\n\n  var popcount = function popcount(x) {\n    x -= x >> 1 & 0x55555555;\n    x = (x & 0x33333333) + (x >> 2 & 0x33333333);\n    x = x + (x >> 4) & 0x0f0f0f0f;\n    x += x >> 8;\n    x += x >> 16;\n    return x & 0x7f;\n  };\n\n  var hashFragment = function hashFragment(shift, h) {\n    return h >>> shift & MASK;\n  };\n\n  var toBitmap = function toBitmap(x) {\n    return 1 << x;\n  };\n\n  var fromBitmap = function fromBitmap(bitmap, bit) {\n    return popcount(bitmap & bit - 1);\n  };\n  /* Array Ops\n   ******************************************************************************/\n\n  /**\n      Set a value in an array.\n  \n      @param mutate Should the input array be mutated?\n      @param at Index to change.\n      @param v New value\n      @param arr Array.\n  */\n\n\n  var arrayUpdate = function arrayUpdate(mutate, at, v, arr) {\n    var out = arr;\n\n    if (!mutate) {\n      var len = arr.length;\n      out = new Array(len);\n\n      for (var i = 0; i < len; ++i) {\n        out[i] = arr[i];\n      }\n    }\n\n    out[at] = v;\n    return out;\n  };\n  /**\n      Remove a value from an array.\n  \n      @param mutate Should the input array be mutated?\n      @param at Index to remove.\n      @param arr Array.\n  */\n\n\n  var arraySpliceOut = function arraySpliceOut(mutate, at, arr) {\n    var newLen = arr.length - 1;\n    var i = 0;\n    var g = 0;\n    var out = arr;\n\n    if (mutate) {\n      i = g = at;\n    } else {\n      out = new Array(newLen);\n\n      while (i < at) {\n        out[g++] = arr[i++];\n      }\n    }\n\n    ++i;\n\n    while (i <= newLen) {\n      out[g++] = arr[i++];\n    }\n\n    if (mutate) {\n      out.length = newLen;\n    }\n\n    return out;\n  };\n  /**\n      Insert a value into an array.\n  \n      @param mutate Should the input array be mutated?\n      @param at Index to insert at.\n      @param v Value to insert,\n      @param arr Array.\n  */\n\n\n  var arraySpliceIn = function arraySpliceIn(mutate, at, v, arr) {\n    var len = arr.length;\n\n    if (mutate) {\n      var _i = len;\n\n      while (_i >= at) {\n        arr[_i--] = arr[_i];\n      }\n\n      arr[at] = v;\n      return arr;\n    }\n\n    var i = 0,\n        g = 0;\n    var out = new Array(len + 1);\n\n    while (i < at) {\n      out[g++] = arr[i++];\n    }\n\n    out[at] = v;\n\n    while (i < len) {\n      out[++g] = arr[i++];\n    }\n\n    return out;\n  };\n  /* Node Structures\n   ******************************************************************************/\n\n\n  var LEAF = 1;\n  var COLLISION = 2;\n  var INDEX = 3;\n  var ARRAY = 4;\n  /**\n      Empty node.\n  */\n\n  var empty = {\n    __hamt_isEmpty: true\n  };\n\n  var isEmptyNode = function isEmptyNode(x) {\n    return x === empty || x && x.__hamt_isEmpty;\n  };\n  /**\n      Leaf holding a value.\n  \n      @member edit Edit of the node.\n      @member hash Hash of key.\n      @member key Key.\n      @member value Value stored.\n  */\n\n\n  var Leaf = function Leaf(edit, hash, key, value) {\n    return {\n      type: LEAF,\n      edit: edit,\n      hash: hash,\n      key: key,\n      value: value,\n      _modify: Leaf__modify\n    };\n  };\n  /**\n      Leaf holding multiple values with the same hash but different keys.\n  \n      @member edit Edit of the node.\n      @member hash Hash of key.\n      @member children Array of collision children node.\n  */\n\n\n  var Collision = function Collision(edit, hash, children) {\n    return {\n      type: COLLISION,\n      edit: edit,\n      hash: hash,\n      children: children,\n      _modify: Collision__modify\n    };\n  };\n  /**\n      Internal node with a sparse set of children.\n  \n      Uses a bitmap and array to pack children.\n  \n    @member edit Edit of the node.\n      @member mask Bitmap that encode the positions of children in the array.\n      @member children Array of child nodes.\n  */\n\n\n  var IndexedNode = function IndexedNode(edit, mask, children) {\n    return {\n      type: INDEX,\n      edit: edit,\n      mask: mask,\n      children: children,\n      _modify: IndexedNode__modify\n    };\n  };\n  /**\n      Internal node with many children.\n  \n      @member edit Edit of the node.\n      @member size Number of children.\n      @member children Array of child nodes.\n  */\n\n\n  var ArrayNode = function ArrayNode(edit, size, children) {\n    return {\n      type: ARRAY,\n      edit: edit,\n      size: size,\n      children: children,\n      _modify: ArrayNode__modify\n    };\n  };\n  /**\n      Is `node` a leaf node?\n  */\n\n\n  var isLeaf = function isLeaf(node) {\n    return node === empty || node.type === LEAF || node.type === COLLISION;\n  };\n  /* Internal node operations.\n   ******************************************************************************/\n\n  /**\n      Expand an indexed node into an array node.\n  \n    @param edit Current edit.\n      @param frag Index of added child.\n      @param child Added child.\n      @param mask Index node mask before child added.\n      @param subNodes Index node children before child added.\n  */\n\n\n  var expand = function expand(edit, frag, child, bitmap, subNodes) {\n    var arr = [];\n    var bit = bitmap;\n    var count = 0;\n\n    for (var i = 0; bit; ++i) {\n      if (bit & 1) arr[i] = subNodes[count++];\n      bit >>>= 1;\n    }\n\n    arr[frag] = child;\n    return ArrayNode(edit, count + 1, arr);\n  };\n  /**\n      Collapse an array node into a indexed node.\n  \n    @param edit Current edit.\n      @param count Number of elements in new array.\n      @param removed Index of removed element.\n      @param elements Array node children before remove.\n  */\n\n\n  var pack = function pack(edit, count, removed, elements) {\n    var children = new Array(count - 1);\n    var g = 0;\n    var bitmap = 0;\n\n    for (var i = 0, len = elements.length; i < len; ++i) {\n      if (i !== removed) {\n        var elem = elements[i];\n\n        if (elem && !isEmptyNode(elem)) {\n          children[g++] = elem;\n          bitmap |= 1 << i;\n        }\n      }\n    }\n\n    return IndexedNode(edit, bitmap, children);\n  };\n  /**\n      Merge two leaf nodes.\n  \n      @param shift Current shift.\n      @param h1 Node 1 hash.\n      @param n1 Node 1.\n      @param h2 Node 2 hash.\n      @param n2 Node 2.\n  */\n\n\n  var mergeLeaves = function mergeLeaves(edit, shift, h1, n1, h2, n2) {\n    if (h1 === h2) return Collision(edit, h1, [n2, n1]);\n    var subH1 = hashFragment(shift, h1);\n    var subH2 = hashFragment(shift, h2);\n    return IndexedNode(edit, toBitmap(subH1) | toBitmap(subH2), subH1 === subH2 ? [mergeLeaves(edit, shift + SIZE, h1, n1, h2, n2)] : subH1 < subH2 ? [n1, n2] : [n2, n1]);\n  };\n  /**\n      Update an entry in a collision list.\n  \n      @param mutate Should mutation be used?\n      @param edit Current edit.\n      @param keyEq Key compare function.\n      @param hash Hash of collision.\n      @param list Collision list.\n      @param f Update function.\n      @param k Key to update.\n      @param size Size ref.\n  */\n\n\n  var updateCollisionList = function updateCollisionList(mutate, edit, keyEq, h, list, f, k, size) {\n    var len = list.length;\n\n    for (var i = 0; i < len; ++i) {\n      var child = list[i];\n\n      if (keyEq(k, child.key)) {\n        var value = child.value;\n\n        var _newValue = f(value);\n\n        if (_newValue === value) return list;\n\n        if (_newValue === nothing) {\n          --size.value;\n          return arraySpliceOut(mutate, i, list);\n        }\n\n        return arrayUpdate(mutate, i, Leaf(edit, h, k, _newValue), list);\n      }\n    }\n\n    var newValue = f();\n    if (newValue === nothing) return list;\n    ++size.value;\n    return arrayUpdate(mutate, len, Leaf(edit, h, k, newValue), list);\n  };\n\n  var canEditNode = function canEditNode(edit, node) {\n    return edit === node.edit;\n  };\n  /* Editing\n   ******************************************************************************/\n\n\n  var Leaf__modify = function Leaf__modify(edit, keyEq, shift, f, h, k, size) {\n    if (keyEq(k, this.key)) {\n      var _v = f(this.value);\n\n      if (_v === this.value) return this;else if (_v === nothing) {\n        --size.value;\n        return empty;\n      }\n\n      if (canEditNode(edit, this)) {\n        this.value = _v;\n        return this;\n      }\n\n      return Leaf(edit, h, k, _v);\n    }\n\n    var v = f();\n    if (v === nothing) return this;\n    ++size.value;\n    return mergeLeaves(edit, shift, this.hash, this, h, Leaf(edit, h, k, v));\n  };\n\n  var Collision__modify = function Collision__modify(edit, keyEq, shift, f, h, k, size) {\n    if (h === this.hash) {\n      var canEdit = canEditNode(edit, this);\n      var list = updateCollisionList(canEdit, edit, keyEq, this.hash, this.children, f, k, size);\n      if (list === this.children) return this;\n      return list.length > 1 ? Collision(edit, this.hash, list) : list[0]; // collapse single element collision list\n    }\n\n    var v = f();\n    if (v === nothing) return this;\n    ++size.value;\n    return mergeLeaves(edit, shift, this.hash, this, h, Leaf(edit, h, k, v));\n  };\n\n  var IndexedNode__modify = function IndexedNode__modify(edit, keyEq, shift, f, h, k, size) {\n    var mask = this.mask;\n    var children = this.children;\n    var frag = hashFragment(shift, h);\n    var bit = toBitmap(frag);\n    var indx = fromBitmap(mask, bit);\n    var exists = mask & bit;\n    var current = exists ? children[indx] : empty;\n\n    var child = current._modify(edit, keyEq, shift + SIZE, f, h, k, size);\n\n    if (current === child) return this;\n    var canEdit = canEditNode(edit, this);\n    var bitmap = mask;\n    var newChildren = void 0;\n\n    if (exists && isEmptyNode(child)) {\n      // remove\n      bitmap &= ~bit;\n      if (!bitmap) return empty;\n      if (children.length <= 2 && isLeaf(children[indx ^ 1])) return children[indx ^ 1]; // collapse\n\n      newChildren = arraySpliceOut(canEdit, indx, children);\n    } else if (!exists && !isEmptyNode(child)) {\n      // add\n      if (children.length >= MAX_INDEX_NODE) return expand(edit, frag, child, mask, children);\n      bitmap |= bit;\n      newChildren = arraySpliceIn(canEdit, indx, child, children);\n    } else {\n      // modify\n      newChildren = arrayUpdate(canEdit, indx, child, children);\n    }\n\n    if (canEdit) {\n      this.mask = bitmap;\n      this.children = newChildren;\n      return this;\n    }\n\n    return IndexedNode(edit, bitmap, newChildren);\n  };\n\n  var ArrayNode__modify = function ArrayNode__modify(edit, keyEq, shift, f, h, k, size) {\n    var count = this.size;\n    var children = this.children;\n    var frag = hashFragment(shift, h);\n    var child = children[frag];\n\n    var newChild = (child || empty)._modify(edit, keyEq, shift + SIZE, f, h, k, size);\n\n    if (child === newChild) return this;\n    var canEdit = canEditNode(edit, this);\n    var newChildren = void 0;\n\n    if (isEmptyNode(child) && !isEmptyNode(newChild)) {\n      // add\n      ++count;\n      newChildren = arrayUpdate(canEdit, frag, newChild, children);\n    } else if (!isEmptyNode(child) && isEmptyNode(newChild)) {\n      // remove\n      --count;\n      if (count <= MIN_ARRAY_NODE) return pack(edit, count, frag, children);\n      newChildren = arrayUpdate(canEdit, frag, empty, children);\n    } else {\n      // modify\n      newChildren = arrayUpdate(canEdit, frag, newChild, children);\n    }\n\n    if (canEdit) {\n      this.size = count;\n      this.children = newChildren;\n      return this;\n    }\n\n    return ArrayNode(edit, count, newChildren);\n  };\n\n  empty._modify = function (edit, keyEq, shift, f, h, k, size) {\n    var v = f();\n    if (v === nothing) return empty;\n    ++size.value;\n    return Leaf(edit, h, k, v);\n  };\n  /*\n   ******************************************************************************/\n\n\n  function Map(editable, edit, config, root, size) {\n    this._editable = editable;\n    this._edit = edit;\n    this._config = config;\n    this._root = root;\n    this._size = size;\n  }\n\n  Map.prototype.setTree = function (newRoot, newSize) {\n    if (this._editable) {\n      this._root = newRoot;\n      this._size = newSize;\n      return this;\n    }\n\n    return newRoot === this._root ? this : new Map(this._editable, this._edit, this._config, newRoot, newSize);\n  };\n  /* Queries\n   ******************************************************************************/\n\n  /**\n      Lookup the value for `key` in `map` using a custom `hash`.\n  \n      Returns the value or `alt` if none.\n  */\n\n\n  var tryGetHash = hamt.tryGetHash = function (alt, hash, key, map) {\n    var node = map._root;\n    var shift = 0;\n    var keyEq = map._config.keyEq;\n\n    while (true) {\n      switch (node.type) {\n        case LEAF:\n          {\n            return keyEq(key, node.key) ? node.value : alt;\n          }\n\n        case COLLISION:\n          {\n            if (hash === node.hash) {\n              var children = node.children;\n\n              for (var i = 0, len = children.length; i < len; ++i) {\n                var child = children[i];\n                if (keyEq(key, child.key)) return child.value;\n              }\n            }\n\n            return alt;\n          }\n\n        case INDEX:\n          {\n            var frag = hashFragment(shift, hash);\n            var bit = toBitmap(frag);\n\n            if (node.mask & bit) {\n              node = node.children[fromBitmap(node.mask, bit)];\n              shift += SIZE;\n              break;\n            }\n\n            return alt;\n          }\n\n        case ARRAY:\n          {\n            node = node.children[hashFragment(shift, hash)];\n\n            if (node) {\n              shift += SIZE;\n              break;\n            }\n\n            return alt;\n          }\n\n        default:\n          return alt;\n      }\n    }\n  };\n\n  Map.prototype.tryGetHash = function (alt, hash, key) {\n    return tryGetHash(alt, hash, key, this);\n  };\n  /**\n      Lookup the value for `key` in `map` using internal hash function.\n  \n      @see `tryGetHash`\n  */\n\n\n  var tryGet = hamt.tryGet = function (alt, key, map) {\n    return tryGetHash(alt, map._config.hash(key), key, map);\n  };\n\n  Map.prototype.tryGet = function (alt, key) {\n    return tryGet(alt, key, this);\n  };\n  /**\n      Lookup the value for `key` in `map` using a custom `hash`.\n  \n      Returns the value or `undefined` if none.\n  */\n\n\n  var getHash = hamt.getHash = function (hash, key, map) {\n    return tryGetHash(undefined, hash, key, map);\n  };\n\n  Map.prototype.getHash = function (hash, key) {\n    return getHash(hash, key, this);\n  };\n  /**\n      Lookup the value for `key` in `map` using internal hash function.\n  \n      @see `get`\n  */\n\n\n  var get = hamt.get = function (key, map) {\n    return tryGetHash(undefined, map._config.hash(key), key, map);\n  };\n\n  Map.prototype.get = function (key, alt) {\n    return tryGet(alt, key, this);\n  };\n  /**\n      Does an entry exist for `key` in `map`? Uses custom `hash`.\n  */\n\n\n  var hasHash = hamt.has = function (hash, key, map) {\n    return tryGetHash(nothing, hash, key, map) !== nothing;\n  };\n\n  Map.prototype.hasHash = function (hash, key) {\n    return hasHash(hash, key, this);\n  };\n  /**\n      Does an entry exist for `key` in `map`? Uses internal hash function.\n  */\n\n\n  var has = hamt.has = function (key, map) {\n    return hasHash(map._config.hash(key), key, map);\n  };\n\n  Map.prototype.has = function (key) {\n    return has(key, this);\n  };\n\n  var defKeyCompare = function defKeyCompare(x, y) {\n    return x === y;\n  };\n  /**\n      Create an empty map.\n  \n      @param config Configuration.\n  */\n\n\n  hamt.make = function (config) {\n    return new Map(0, 0, {\n      keyEq: config && config.keyEq || defKeyCompare,\n      hash: config && config.hash || hash\n    }, empty, 0);\n  };\n  /**\n      Empty map.\n  */\n\n\n  hamt.empty = hamt.make();\n  /**\n      Does `map` contain any elements?\n  */\n\n  var isEmpty = hamt.isEmpty = function (map) {\n    return map && !!isEmptyNode(map._root);\n  };\n\n  Map.prototype.isEmpty = function () {\n    return isEmpty(this);\n  };\n  /* Updates\n   ******************************************************************************/\n\n  /**\n      Alter the value stored for `key` in `map` using function `f` using\n      custom hash.\n  \n      `f` is invoked with the current value for `k` if it exists,\n      or no arguments if no such value exists. `modify` will always either\n      update or insert a value into the map.\n  \n      Returns a map with the modified value. Does not alter `map`.\n  */\n\n\n  var modifyHash = hamt.modifyHash = function (f, hash, key, map) {\n    var size = {\n      value: map._size\n    };\n\n    var newRoot = map._root._modify(map._editable ? map._edit : NaN, map._config.keyEq, 0, f, hash, key, size);\n\n    return map.setTree(newRoot, size.value);\n  };\n\n  Map.prototype.modifyHash = function (hash, key, f) {\n    return modifyHash(f, hash, key, this);\n  };\n  /**\n      Alter the value stored for `key` in `map` using function `f` using\n      internal hash function.\n  \n      @see `modifyHash`\n  */\n\n\n  var modify = hamt.modify = function (f, key, map) {\n    return modifyHash(f, map._config.hash(key), key, map);\n  };\n\n  Map.prototype.modify = function (key, f) {\n    return modify(f, key, this);\n  };\n  /**\n      Store `value` for `key` in `map` using custom `hash`.\n  \n      Returns a map with the modified value. Does not alter `map`.\n  */\n\n\n  var setHash = hamt.setHash = function (hash, key, value, map) {\n    return modifyHash(constant(value), hash, key, map);\n  };\n\n  Map.prototype.setHash = function (hash, key, value) {\n    return setHash(hash, key, value, this);\n  };\n  /**\n      Store `value` for `key` in `map` using internal hash function.\n  \n      @see `setHash`\n  */\n\n\n  var set = hamt.set = function (key, value, map) {\n    return setHash(map._config.hash(key), key, value, map);\n  };\n\n  Map.prototype.set = function (key, value) {\n    return set(key, value, this);\n  };\n  /**\n      Remove the entry for `key` in `map`.\n  \n      Returns a map with the value removed. Does not alter `map`.\n  */\n\n\n  var del = constant(nothing);\n\n  var removeHash = hamt.removeHash = function (hash, key, map) {\n    return modifyHash(del, hash, key, map);\n  };\n\n  Map.prototype.removeHash = Map.prototype.deleteHash = function (hash, key) {\n    return removeHash(hash, key, this);\n  };\n  /**\n      Remove the entry for `key` in `map` using internal hash function.\n  \n      @see `removeHash`\n  */\n\n\n  var remove = hamt.remove = function (key, map) {\n    return removeHash(map._config.hash(key), key, map);\n  };\n\n  Map.prototype.remove = Map.prototype.delete = function (key) {\n    return remove(key, this);\n  };\n  /* Mutation\n   ******************************************************************************/\n\n  /**\n      Mark `map` as mutable.\n   */\n\n\n  var beginMutation = hamt.beginMutation = function (map) {\n    return new Map(map._editable + 1, map._edit + 1, map._config, map._root, map._size);\n  };\n\n  Map.prototype.beginMutation = function () {\n    return beginMutation(this);\n  };\n  /**\n      Mark `map` as immutable.\n   */\n\n\n  var endMutation = hamt.endMutation = function (map) {\n    map._editable = map._editable && map._editable - 1;\n    return map;\n  };\n\n  Map.prototype.endMutation = function () {\n    return endMutation(this);\n  };\n  /**\n      Mutate `map` within the context of `f`.\n      @param f\n      @param map HAMT\n  */\n\n\n  var mutate = hamt.mutate = function (f, map) {\n    var transient = beginMutation(map);\n    f(transient);\n    return endMutation(transient);\n  };\n\n  Map.prototype.mutate = function (f) {\n    return mutate(f, this);\n  };\n  /* Traversal\n   ******************************************************************************/\n\n  /**\n      Apply a continuation.\n  */\n\n\n  var appk = function appk(k) {\n    return k && lazyVisitChildren(k[0], k[1], k[2], k[3], k[4]);\n  };\n  /**\n      Recursively visit all values stored in an array of nodes lazily.\n  */\n\n\n  var lazyVisitChildren = function lazyVisitChildren(len, children, i, f, k) {\n    while (i < len) {\n      var child = children[i++];\n      if (child && !isEmptyNode(child)) return lazyVisit(child, f, [len, children, i, f, k]);\n    }\n\n    return appk(k);\n  };\n  /**\n      Recursively visit all values stored in `node` lazily.\n  */\n\n\n  var lazyVisit = function lazyVisit(node, f, k) {\n    switch (node.type) {\n      case LEAF:\n        return {\n          value: f(node),\n          rest: k\n        };\n\n      case COLLISION:\n      case ARRAY:\n      case INDEX:\n        var children = node.children;\n        return lazyVisitChildren(children.length, children, 0, f, k);\n\n      default:\n        return appk(k);\n    }\n  };\n\n  var DONE = {\n    done: true\n  };\n  /**\n      Javascript iterator over a map.\n  */\n\n  function MapIterator(v) {\n    this.v = v;\n  }\n\n  MapIterator.prototype.next = function () {\n    if (!this.v) return DONE;\n    var v0 = this.v;\n    this.v = appk(v0.rest);\n    return v0;\n  };\n\n  MapIterator.prototype[Symbol.iterator] = function () {\n    return this;\n  };\n  /**\n      Lazily visit each value in map with function `f`.\n  */\n\n\n  var visit = function visit(map, f) {\n    return new MapIterator(lazyVisit(map._root, f));\n  };\n  /**\n      Get a Javascsript iterator of `map`.\n  \n      Iterates over `[key, value]` arrays.\n  */\n\n\n  var buildPairs = function buildPairs(x) {\n    return [x.key, x.value];\n  };\n\n  var entries = hamt.entries = function (map) {\n    return visit(map, buildPairs);\n  };\n\n  Map.prototype.entries = Map.prototype[Symbol.iterator] = function () {\n    return entries(this);\n  };\n  /**\n      Get array of all keys in `map`.\n  \n      Order is not guaranteed.\n  */\n\n\n  var buildKeys = function buildKeys(x) {\n    return x.key;\n  };\n\n  var keys = hamt.keys = function (map) {\n    return visit(map, buildKeys);\n  };\n\n  Map.prototype.keys = function () {\n    return keys(this);\n  };\n  /**\n      Get array of all values in `map`.\n  \n      Order is not guaranteed, duplicates are preserved.\n  */\n\n\n  var buildValues = function buildValues(x) {\n    return x.value;\n  };\n\n  var values = hamt.values = Map.prototype.values = function (map) {\n    return visit(map, buildValues);\n  };\n\n  Map.prototype.values = function () {\n    return values(this);\n  };\n  /* Fold\n   ******************************************************************************/\n\n  /**\n      Visit every entry in the map, aggregating data.\n  \n      Order of nodes is not guaranteed.\n  \n      @param f Function mapping accumulated value, value, and key to new value.\n      @param z Starting value.\n      @param m HAMT\n  */\n\n\n  var fold = hamt.fold = function (f, z, m) {\n    var root = m._root;\n    if (root.type === LEAF) return f(z, root.value, root.key);\n    var toVisit = [root.children];\n    var children = void 0;\n\n    while (children = toVisit.pop()) {\n      for (var i = 0, len = children.length; i < len;) {\n        var child = children[i++];\n\n        if (child && child.type) {\n          if (child.type === LEAF) z = f(z, child.value, child.key);else toVisit.push(child.children);\n        }\n      }\n    }\n\n    return z;\n  };\n\n  Map.prototype.fold = function (f, z) {\n    return fold(f, z, this);\n  };\n  /**\n      Visit every entry in the map, aggregating data.\n  \n      Order of nodes is not guaranteed.\n  \n      @param f Function invoked with value and key\n      @param map HAMT\n  */\n\n\n  var forEach = hamt.forEach = function (f, map) {\n    return fold(function (_, value, key) {\n      return f(value, key, map);\n    }, null, map);\n  };\n\n  Map.prototype.forEach = function (f) {\n    return forEach(f, this);\n  };\n  /* Aggregate\n   ******************************************************************************/\n\n  /**\n      Get the number of entries in `map`.\n  */\n\n\n  var count = hamt.count = function (map) {\n    return map._size;\n  };\n\n  Map.prototype.count = function () {\n    return count(this);\n  };\n\n  Object.defineProperty(Map.prototype, 'size', {\n    get: Map.prototype.count\n  });\n  /* Export\n   ******************************************************************************/\n\n  if (module.exports) {\n    module.exports = hamt;\n  } else {\n    undefined.hamt = hamt;\n  }\n});\n\nclass BuiltInMap {\n  constructor(existing) {\n    _defineProperty(this, \"_map\", void 0);\n\n    this._map = new Map(existing === null || existing === void 0 ? void 0 : existing.entries());\n  }\n\n  keys() {\n    return this._map.keys();\n  }\n\n  entries() {\n    return this._map.entries();\n  }\n\n  get(k) {\n    return this._map.get(k);\n  }\n\n  has(k) {\n    return this._map.has(k);\n  }\n\n  set(k, v) {\n    this._map.set(k, v);\n\n    return this;\n  }\n\n  delete(k) {\n    this._map.delete(k);\n\n    return this;\n  }\n\n  clone() {\n    return persistentMap(this);\n  }\n\n  toMap() {\n    return new Map(this._map);\n  }\n\n}\n\nclass HashArrayMappedTrieMap {\n  // Because hamt.empty is not a function there is no way to introduce type\n  // parameters on it, so empty is typed as HAMTPlusMap<string, mixed>.\n  // flowlint-next-line unclear-type:off\n  constructor(existing) {\n    _defineProperty(this, \"_hamt\", hamt_1.empty.beginMutation());\n\n    if (existing instanceof HashArrayMappedTrieMap) {\n      const h = existing._hamt.endMutation();\n\n      existing._hamt = h.beginMutation();\n      this._hamt = h.beginMutation();\n    } else if (existing) {\n      for (const [k, v] of existing.entries()) {\n        this._hamt.set(k, v);\n      }\n    }\n  }\n\n  keys() {\n    return this._hamt.keys();\n  }\n\n  entries() {\n    return this._hamt.entries();\n  }\n\n  get(k) {\n    return this._hamt.get(k);\n  }\n\n  has(k) {\n    return this._hamt.has(k);\n  }\n\n  set(k, v) {\n    this._hamt.set(k, v);\n\n    return this;\n  }\n\n  delete(k) {\n    this._hamt.delete(k);\n\n    return this;\n  }\n\n  clone() {\n    return persistentMap(this);\n  }\n\n  toMap() {\n    return new Map(this._hamt);\n  }\n\n}\n\nfunction persistentMap(existing) {\n  if (Recoil_gkx_1('recoil_hamt_2020')) {\n    return new HashArrayMappedTrieMap(existing);\n  } else {\n    return new BuiltInMap(existing);\n  }\n}\n\nvar Recoil_PersistentMap = {\n  persistentMap\n};\nvar Recoil_PersistentMap_1 = Recoil_PersistentMap.persistentMap;\nvar Recoil_PersistentMap$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  persistentMap: Recoil_PersistentMap_1\n});\nconst {\n  graph: graph$1\n} = Recoil_Graph;\nconst {\n  persistentMap: persistentMap$1\n} = Recoil_PersistentMap$1; // flowlint-next-line unclear-type:off\n\nlet nextTreeStateVersion = 0;\n\nconst getNextTreeStateVersion = () => nextTreeStateVersion++;\n\nfunction makeEmptyTreeState() {\n  const version = getNextTreeStateVersion();\n  return {\n    version,\n    stateID: version,\n    transactionMetadata: {},\n    dirtyAtoms: new Set(),\n    atomValues: persistentMap$1(),\n    nonvalidatedAtoms: persistentMap$1()\n  };\n}\n\nfunction makeEmptyStoreState() {\n  const currentTree = makeEmptyTreeState();\n  return {\n    currentTree,\n    nextTree: null,\n    previousTree: null,\n    commitDepth: 0,\n    knownAtoms: new Set(),\n    knownSelectors: new Set(),\n    transactionSubscriptions: new Map(),\n    nodeTransactionSubscriptions: new Map(),\n    nodeToComponentSubscriptions: new Map(),\n    queuedComponentCallbacks_DEPRECATED: [],\n    suspendedComponentResolvers: new Set(),\n    graphsByVersion: new Map().set(currentTree.version, graph$1()),\n    versionsUsedByComponent: new Map(),\n    retention: {\n      referenceCounts: new Map(),\n      nodesRetainedByZone: new Map(),\n      retainablesToCheckForRelease: new Set()\n    },\n    nodeCleanupFunctions: new Map()\n  };\n}\n\nvar Recoil_State = {\n  makeEmptyTreeState,\n  makeEmptyStoreState,\n  getNextTreeStateVersion\n};\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nfunction unionSets(...sets) {\n  const result = new Set();\n\n  for (const set of sets) {\n    for (const value of set) {\n      result.add(value);\n    }\n  }\n\n  return result;\n}\n\nvar Recoil_unionSets = unionSets;\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\n/**\n * The someSet() method tests whether some elements in the given Set pass the\n * test implemented by the provided function.\n */\n\nfunction someSet(set, callback, context) {\n  const iterator = set.entries();\n  let current = iterator.next();\n\n  while (!current.done) {\n    const entry = current.value;\n\n    if (callback.call(context, entry[1], entry[0], set)) {\n      return true;\n    }\n\n    current = iterator.next();\n  }\n\n  return false;\n}\n\nvar Recoil_someSet = someSet;\nconst {\n  cleanUpNode: cleanUpNode$1\n} = Recoil_FunctionalCore;\nconst {\n  deleteNodeConfigIfPossible: deleteNodeConfigIfPossible$1,\n  getNode: getNode$2\n} = Recoil_Node;\nconst {\n  RetentionZone: RetentionZone$2\n} = Recoil_RetentionZone;\nconst emptySet$1 = new Set();\n\nfunction releaseRetainablesNowOnCurrentTree(store, retainables) {\n  const storeState = store.getState();\n  const treeState = storeState.currentTree;\n\n  if (storeState.nextTree) {\n    Recoil_recoverableViolation('releaseNodesNowOnCurrentTree should only be called at the end of a batch');\n    return; // leak memory rather than erase something that's about to be used.\n  }\n\n  const nodes = new Set();\n\n  for (const r of retainables) {\n    if (r instanceof RetentionZone$2) {\n      for (const n of nodesRetainedByZone(storeState, r)) {\n        nodes.add(n);\n      }\n    } else {\n      nodes.add(r);\n    }\n  }\n\n  const releasableNodes = findReleasableNodes(store, nodes);\n\n  for (const node of releasableNodes) {\n    releaseNode(store, treeState, node);\n  }\n}\n\nfunction findReleasableNodes(store, searchFromNodes) {\n  const storeState = store.getState();\n  const treeState = storeState.currentTree;\n  const graph = store.getGraph(treeState.version);\n  const releasableNodes = new Set(); // mutated to collect answer\n\n  const nonReleasableNodes = new Set();\n  findReleasableNodesInner(searchFromNodes);\n  return releasableNodes;\n\n  function findReleasableNodesInner(searchFromNodes) {\n    const releasableNodesFoundThisIteration = new Set();\n    const downstreams = getDownstreamNodesInTopologicalOrder(store, treeState, searchFromNodes, releasableNodes, // don't descend into these\n    nonReleasableNodes // don't descend into these\n    ); // Find which of the downstream nodes are releasable and which are not:\n\n    for (const node of downstreams) {\n      var _storeState$retention; // Not releasable if configured to be retained forever:\n\n\n      if (getNode$2(node).retainedBy === 'recoilRoot') {\n        nonReleasableNodes.add(node);\n        continue;\n      } // Not releasable if retained directly by a component:\n\n\n      if (((_storeState$retention = storeState.retention.referenceCounts.get(node)) !== null && _storeState$retention !== void 0 ? _storeState$retention : 0) > 0) {\n        nonReleasableNodes.add(node);\n        continue;\n      } // Not releasable if retained by a zone:\n\n\n      if (zonesThatCouldRetainNode(node).some(z => storeState.retention.referenceCounts.get(z))) {\n        nonReleasableNodes.add(node);\n        continue;\n      } // Not releasable if it has a non-releasable child (which will already be in\n      // nonReleasableNodes because we are going in topological order):\n\n\n      const nodeChildren = graph.nodeToNodeSubscriptions.get(node);\n\n      if (nodeChildren && Recoil_someSet(nodeChildren, child => nonReleasableNodes.has(child))) {\n        nonReleasableNodes.add(node);\n        continue;\n      }\n\n      releasableNodes.add(node);\n      releasableNodesFoundThisIteration.add(node);\n    } // If we found any releasable nodes, we need to walk UP from those nodes to\n    // find whether their parents can now be released as well:\n\n\n    const parents = new Set();\n\n    for (const node of releasableNodesFoundThisIteration) {\n      for (const parent of (_graph$nodeDeps$get = graph.nodeDeps.get(node)) !== null && _graph$nodeDeps$get !== void 0 ? _graph$nodeDeps$get : emptySet$1) {\n        var _graph$nodeDeps$get;\n\n        if (!releasableNodes.has(parent)) {\n          parents.add(parent);\n        }\n      }\n    }\n\n    if (parents.size) {\n      findReleasableNodesInner(parents);\n    }\n  }\n} // Children before parents\n\n\nfunction getDownstreamNodesInTopologicalOrder(store, treeState, nodes, // Mutable set is destroyed in place\ndoNotDescendInto1, doNotDescendInto2) {\n  const graph = store.getGraph(treeState.version);\n  const answer = [];\n  const visited = new Set();\n\n  while (nodes.size > 0) {\n    visit(Recoil_nullthrows(nodes.values().next().value));\n  }\n\n  return answer;\n\n  function visit(node) {\n    if (doNotDescendInto1.has(node) || doNotDescendInto2.has(node)) {\n      nodes.delete(node);\n      return;\n    }\n\n    if (visited.has(node)) {\n      return;\n    }\n\n    const children = graph.nodeToNodeSubscriptions.get(node);\n\n    if (children) {\n      for (const child of children) {\n        visit(child);\n      }\n    }\n\n    visited.add(node);\n    nodes.delete(node);\n    answer.push(node);\n  }\n}\n\nfunction releaseNode(store, treeState, node) {\n  if (!Recoil_gkx_1('recoil_memory_managament_2020')) {\n    return;\n  } // Atom effects, in-closure caches, etc.:\n\n\n  cleanUpNode$1(store, node); // Delete from store state:\n\n  const storeState = store.getState();\n  storeState.knownAtoms.delete(node);\n  storeState.knownSelectors.delete(node);\n  storeState.nodeTransactionSubscriptions.delete(node);\n  storeState.retention.referenceCounts.delete(node);\n  const zones = zonesThatCouldRetainNode(node);\n\n  for (const zone of zones) {\n    var _storeState$retention2;\n\n    (_storeState$retention2 = storeState.retention.nodesRetainedByZone.get(zone)) === null || _storeState$retention2 === void 0 ? void 0 : _storeState$retention2.delete(node);\n  } // Note that we DO NOT delete from nodeToComponentSubscriptions because this\n  // already happens when the last component that was retaining the node unmounts,\n  // and this could happen either before or after that.\n  // Delete from TreeState and dep graph:\n\n\n  treeState.atomValues.delete(node);\n  treeState.dirtyAtoms.delete(node);\n  treeState.nonvalidatedAtoms.delete(node);\n  const graph = storeState.graphsByVersion.get(treeState.version);\n\n  if (graph) {\n    const deps = graph.nodeDeps.get(node);\n\n    if (deps !== undefined) {\n      graph.nodeDeps.delete(node);\n\n      for (const dep of deps) {\n        var _graph$nodeToNodeSubs;\n\n        (_graph$nodeToNodeSubs = graph.nodeToNodeSubscriptions.get(dep)) === null || _graph$nodeToNodeSubs === void 0 ? void 0 : _graph$nodeToNodeSubs.delete(node);\n      }\n    } // No need to delete sub's deps as there should be no subs at this point.\n    // But an invariant would require deleting nodes in topological order.\n\n\n    graph.nodeToNodeSubscriptions.delete(node);\n  } // Node config (for family members only as their configs can be recreated, and\n  // only if they are not retained within any other Stores):\n\n\n  deleteNodeConfigIfPossible$1(node);\n}\n\nfunction nodesRetainedByZone(storeState, zone) {\n  var _storeState$retention3;\n\n  return (_storeState$retention3 = storeState.retention.nodesRetainedByZone.get(zone)) !== null && _storeState$retention3 !== void 0 ? _storeState$retention3 : emptySet$1;\n}\n\nfunction zonesThatCouldRetainNode(node) {\n  const retainedBy = getNode$2(node).retainedBy;\n\n  if (retainedBy === undefined || retainedBy === 'components' || retainedBy === 'recoilRoot') {\n    return [];\n  } else if (retainedBy instanceof RetentionZone$2) {\n    return [retainedBy];\n  } else {\n    return retainedBy; // it's an array of zones\n  }\n}\n\nfunction scheduleOrPerformPossibleReleaseOfRetainable(store, retainable) {\n  const state = store.getState();\n\n  if (state.nextTree) {\n    state.retention.retainablesToCheckForRelease.add(retainable);\n  } else {\n    releaseRetainablesNowOnCurrentTree(store, new Set([retainable]));\n  }\n}\n\nfunction updateRetainCount(store, retainable, delta) {\n  var _map$get;\n\n  if (!Recoil_gkx_1('recoil_memory_managament_2020')) {\n    return;\n  }\n\n  const map = store.getState().retention.referenceCounts;\n  const newCount = ((_map$get = map.get(retainable)) !== null && _map$get !== void 0 ? _map$get : 0) + delta;\n\n  if (newCount === 0) {\n    updateRetainCountToZero(store, retainable);\n  } else {\n    map.set(retainable, newCount);\n  }\n}\n\nfunction updateRetainCountToZero(store, retainable) {\n  if (!Recoil_gkx_1('recoil_memory_managament_2020')) {\n    return;\n  }\n\n  const map = store.getState().retention.referenceCounts;\n  map.delete(retainable);\n  scheduleOrPerformPossibleReleaseOfRetainable(store, retainable);\n}\n\nfunction releaseScheduledRetainablesNow(store) {\n  if (!Recoil_gkx_1('recoil_memory_managament_2020')) {\n    return;\n  }\n\n  const state = store.getState();\n  releaseRetainablesNowOnCurrentTree(store, state.retention.retainablesToCheckForRelease);\n  state.retention.retainablesToCheckForRelease.clear();\n}\n\nfunction retainedByOptionWithDefault(r) {\n  // The default will change from 'recoilRoot' to 'components' in the future.\n  return r === undefined ? 'recoilRoot' : r;\n}\n\nvar Recoil_Retention = {\n  updateRetainCount,\n  updateRetainCountToZero,\n  releaseScheduledRetainablesNow,\n  retainedByOptionWithDefault\n};\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\n/**\n * Combines multiple Iterables into a single Iterable.\n * Traverses the input Iterables in the order provided and maintains the order\n * of their elements.\n *\n * Example:\n * ```\n * const r = Array.from(concatIterables(['a', 'b'], ['c'], ['d', 'e', 'f']));\n * r == ['a', 'b', 'c', 'd', 'e', 'f'];\n * ```\n */\n\nfunction* concatIterables(iters) {\n  for (const iter of iters) {\n    for (const val of iter) {\n      yield val;\n    }\n  }\n}\n\nvar Recoil_concatIterables = concatIterables;\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nconst isSSR = typeof window === 'undefined';\nconst isReactNative = typeof navigator !== 'undefined' && navigator.product === 'ReactNative'; // eslint-disable-line fb-www/typeof-undefined\n\nvar Recoil_Environment = {\n  isSSR,\n  isReactNative\n};\nconst {\n  isSSR: isSSR$1\n} = Recoil_Environment;\nconst {\n  batchUpdates: batchUpdates$1\n} = Recoil_Batching;\nconst {\n  initializeNodeIfNewToStore: initializeNodeIfNewToStore$1,\n  peekNodeInfo: peekNodeInfo$1\n} = Recoil_FunctionalCore;\nconst {\n  graph: graph$2\n} = Recoil_Graph;\nconst {\n  DEFAULT_VALUE: DEFAULT_VALUE$1,\n  recoilValues: recoilValues$1,\n  recoilValuesForKeys: recoilValuesForKeys$2\n} = Recoil_Node;\nconst {\n  AbstractRecoilValue: AbstractRecoilValue$2,\n  getRecoilValueAsLoadable: getRecoilValueAsLoadable$1,\n  setRecoilValue: setRecoilValue$1,\n  setUnvalidatedRecoilValue: setUnvalidatedRecoilValue$1\n} = Recoil_RecoilValueInterface;\nconst {\n  updateRetainCount: updateRetainCount$1\n} = Recoil_Retention;\nconst {\n  getNextTreeStateVersion: getNextTreeStateVersion$1,\n  makeEmptyStoreState: makeEmptyStoreState$1\n} = Recoil_State; // Opaque at this surface because it's part of the public API from here.\n\nconst retainWarning = `\nRecoil Snapshots only last for the duration of the callback they are provided to. To keep a Snapshot longer, do this:\n\n  const release = snapshot.retain();\n  try {\n    await useTheSnapshotAsynchronously(snapshot);\n  } finally {\n    release();\n  }\n\nThis is currently a DEV-only warning but will become a thrown exception in the next release of Recoil.\n`; // A \"Snapshot\" is \"read-only\" and captures a specific set of values of atoms.\n// However, the data-flow-graph and selector values may evolve as selector\n// evaluation functions are executed and async selectors resolve.\n\nclass Snapshot {\n  constructor(storeState) {\n    _defineProperty(this, \"_store\", void 0);\n\n    _defineProperty(this, \"_refCount\", 0);\n\n    _defineProperty(this, \"getLoadable\", recoilValue => {\n      this.checkRefCount_INTERNAL();\n      return getRecoilValueAsLoadable$1(this._store, recoilValue);\n    });\n\n    _defineProperty(this, \"getPromise\", recoilValue => {\n      this.checkRefCount_INTERNAL();\n      return this.getLoadable(recoilValue).toPromise();\n    });\n\n    _defineProperty(this, \"getNodes_UNSTABLE\", opt => {\n      this.checkRefCount_INTERNAL(); // TODO Deal with modified selectors\n\n      if ((opt === null || opt === void 0 ? void 0 : opt.isModified) === true) {\n        if ((opt === null || opt === void 0 ? void 0 : opt.isInitialized) === false) {\n          return [];\n        }\n\n        const state = this._store.getState().currentTree;\n\n        return recoilValuesForKeys$2(state.dirtyAtoms);\n      }\n\n      const knownAtoms = this._store.getState().knownAtoms;\n\n      const knownSelectors = this._store.getState().knownSelectors;\n\n      return (opt === null || opt === void 0 ? void 0 : opt.isInitialized) == null ? recoilValues$1.values() : opt.isInitialized === true ? recoilValuesForKeys$2(Recoil_concatIterables([this._store.getState().knownAtoms, this._store.getState().knownSelectors])) : Recoil_filterIterable(recoilValues$1.values(), ({\n        key\n      }) => !knownAtoms.has(key) && !knownSelectors.has(key));\n    });\n\n    _defineProperty(this, \"getInfo_UNSTABLE\", ({\n      key\n    }) => {\n      this.checkRefCount_INTERNAL();\n      return peekNodeInfo$1(this._store, this._store.getState().currentTree, key);\n    });\n\n    _defineProperty(this, \"map\", mapper => {\n      this.checkRefCount_INTERNAL();\n      const mutableSnapshot = new MutableSnapshot(this, batchUpdates$1);\n      mapper(mutableSnapshot); // if removing batchUpdates from `set` add it here\n\n      return cloneSnapshot(mutableSnapshot.getStore_INTERNAL());\n    });\n\n    _defineProperty(this, \"mapBatched_UNSTABLE\", mapper => {\n      this.checkRefCount_INTERNAL();\n      const mutableSnapshot = new MutableSnapshot(this, cb => cb());\n      batchUpdates$1(() => {\n        mapper(mutableSnapshot);\n      });\n      return cloneSnapshot(mutableSnapshot.getStore_INTERNAL());\n    });\n\n    _defineProperty(this, \"asyncMap\", async mapper => {\n      this.checkRefCount_INTERNAL();\n      const mutableSnapshot = new MutableSnapshot(this, batchUpdates$1);\n      await mapper(mutableSnapshot);\n      return cloneSnapshot(mutableSnapshot.getStore_INTERNAL());\n    });\n\n    this._store = {\n      getState: () => storeState,\n      replaceState: replacer => {\n        storeState.currentTree = replacer(storeState.currentTree); // no batching so nextTree is never active\n      },\n      getGraph: version => {\n        const graphs = storeState.graphsByVersion;\n\n        if (graphs.has(version)) {\n          return Recoil_nullthrows(graphs.get(version));\n        }\n\n        const newGraph = graph$2();\n        graphs.set(version, newGraph);\n        return newGraph;\n      },\n      subscribeToTransactions: () => ({\n        release: () => {}\n      }),\n      addTransactionMetadata: () => {\n        throw new Error('Cannot subscribe to Snapshots');\n      }\n    }; // Initialize any nodes that are live in the parent store (primarily so that this\n    // snapshot gets counted towards the node's live stores count).\n\n    for (const nodeKey of this._store.getState().nodeCleanupFunctions.keys()) {\n      initializeNodeIfNewToStore$1(this._store, storeState.currentTree, nodeKey, 'get');\n      updateRetainCount$1(this._store, nodeKey, 1);\n    }\n\n    this.retain();\n    this.autorelease_INTERNAL();\n  }\n\n  retain() {\n    if (!Recoil_gkx_1('recoil_memory_managament_2020')) {\n      return () => undefined;\n    }\n\n    this._refCount++;\n    let released = false;\n    return () => {\n      if (!released) {\n        released = true;\n        this.release_INTERNAL();\n      }\n    };\n  }\n\n  autorelease_INTERNAL() {\n    if (!Recoil_gkx_1('recoil_memory_managament_2020')) {\n      return;\n    }\n\n    if (!isSSR$1) {\n      window.setTimeout(() => this.release_INTERNAL(), 0);\n    }\n  }\n\n  release_INTERNAL() {\n    if (!Recoil_gkx_1('recoil_memory_managament_2020')) {\n      return;\n    }\n\n    this._refCount--;\n    if (this._refCount === 0) ;\n  }\n\n  checkRefCount_INTERNAL() {\n    if (Recoil_gkx_1('recoil_memory_managament_2020') && this._refCount <= 0) {\n      if (process.env.NODE_ENV !== \"production\") {\n        Recoil_recoverableViolation(retainWarning);\n      } // What we will ship later:\n      // throw new Error(retainWarning);\n\n    }\n  }\n\n  getStore_INTERNAL() {\n    this.checkRefCount_INTERNAL();\n    return this._store;\n  }\n\n  getID() {\n    this.checkRefCount_INTERNAL();\n    return this.getID_INTERNAL();\n  }\n\n  getID_INTERNAL() {\n    this.checkRefCount_INTERNAL();\n    return this._store.getState().currentTree.stateID;\n  } // We want to allow the methods to be destructured and used as accessors\n  // eslint-disable-next-line fb-www/extra-arrow-initializer\n\n\n}\n\nfunction cloneStoreState(store, treeState, bumpVersion = false) {\n  const storeState = store.getState();\n  const version = bumpVersion ? getNextTreeStateVersion$1() : treeState.version;\n  return {\n    currentTree: bumpVersion ? {\n      // TODO snapshots shouldn't really have versions because a new version number\n      // is always assigned when the snapshot is gone to.\n      version,\n      stateID: version,\n      transactionMetadata: { ...treeState.transactionMetadata\n      },\n      dirtyAtoms: new Set(treeState.dirtyAtoms),\n      atomValues: treeState.atomValues.clone(),\n      nonvalidatedAtoms: treeState.nonvalidatedAtoms.clone()\n    } : treeState,\n    commitDepth: 0,\n    nextTree: null,\n    previousTree: null,\n    knownAtoms: new Set(storeState.knownAtoms),\n    // FIXME here's a copy\n    knownSelectors: new Set(storeState.knownSelectors),\n    // FIXME here's a copy\n    transactionSubscriptions: new Map(),\n    nodeTransactionSubscriptions: new Map(),\n    nodeToComponentSubscriptions: new Map(),\n    queuedComponentCallbacks_DEPRECATED: [],\n    suspendedComponentResolvers: new Set(),\n    graphsByVersion: new Map().set(version, store.getGraph(treeState.version)),\n    versionsUsedByComponent: new Map(),\n    retention: {\n      referenceCounts: new Map(),\n      nodesRetainedByZone: new Map(),\n      retainablesToCheckForRelease: new Set()\n    },\n    nodeCleanupFunctions: new Map()\n  };\n} // Factory to build a fresh snapshot\n\n\nfunction freshSnapshot(initializeState) {\n  const snapshot = new Snapshot(makeEmptyStoreState$1());\n  return initializeState != null ? snapshot.map(initializeState) : snapshot;\n} // Factory to clone a snapahot state\n\n\nfunction cloneSnapshot(store, version = 'current') {\n  const storeState = store.getState();\n  const treeState = version === 'current' ? storeState.currentTree : Recoil_nullthrows(storeState.previousTree);\n  return new Snapshot(cloneStoreState(store, treeState));\n}\n\nclass MutableSnapshot extends Snapshot {\n  constructor(snapshot, batch) {\n    super(cloneStoreState(snapshot.getStore_INTERNAL(), snapshot.getStore_INTERNAL().getState().currentTree, true));\n\n    _defineProperty(this, \"_batch\", void 0);\n\n    _defineProperty(this, \"set\", (recoilState, newValueOrUpdater) => {\n      this.checkRefCount_INTERNAL();\n      const store = this.getStore_INTERNAL(); // This batchUpdates ensures this `set` is applied immediately and you can\n      // read the written value after calling `set`. I would like to remove this\n      // behavior and only batch in `Snapshot.map`, but this would be a breaking\n      // change potentially.\n\n      this._batch(() => {\n        updateRetainCount$1(store, recoilState.key, 1);\n        setRecoilValue$1(this.getStore_INTERNAL(), recoilState, newValueOrUpdater);\n      });\n    });\n\n    _defineProperty(this, \"reset\", recoilState => {\n      this.checkRefCount_INTERNAL();\n      const store = this.getStore_INTERNAL(); // See note at `set` about batched updates.\n\n      this._batch(() => {\n        updateRetainCount$1(store, recoilState.key, 1);\n        setRecoilValue$1(this.getStore_INTERNAL(), recoilState, DEFAULT_VALUE$1);\n      });\n    });\n\n    _defineProperty(this, \"setUnvalidatedAtomValues_DEPRECATED\", values => {\n      this.checkRefCount_INTERNAL();\n      const store = this.getStore_INTERNAL(); // See note at `set` about batched updates.\n\n      batchUpdates$1(() => {\n        for (const [k, v] of values.entries()) {\n          updateRetainCount$1(store, k, 1);\n          setUnvalidatedRecoilValue$1(store, new AbstractRecoilValue$2(k), v);\n        }\n      });\n    });\n\n    this._batch = batch;\n  } // We want to allow the methods to be destructured and used as accessors\n  // eslint-disable-next-line fb-www/extra-arrow-initializer\n\n\n}\n\nvar Recoil_Snapshot = {\n  Snapshot,\n  MutableSnapshot,\n  freshSnapshot,\n  cloneSnapshot\n};\nvar Recoil_Snapshot_1 = Recoil_Snapshot.Snapshot;\nvar Recoil_Snapshot_2 = Recoil_Snapshot.MutableSnapshot;\nvar Recoil_Snapshot_3 = Recoil_Snapshot.freshSnapshot;\nvar Recoil_Snapshot_4 = Recoil_Snapshot.cloneSnapshot;\nvar Recoil_Snapshot$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  Snapshot: Recoil_Snapshot_1,\n  MutableSnapshot: Recoil_Snapshot_2,\n  freshSnapshot: Recoil_Snapshot_3,\n  cloneSnapshot: Recoil_Snapshot_4\n}); // @fb-only: const RecoilusagelogEvent = require('RecoilusagelogEvent');\n// @fb-only: const RecoilUsageLogFalcoEvent = require('RecoilUsageLogFalcoEvent');\n// @fb-only: const URI = require('URI');\n\nconst {\n  getNextTreeStateVersion: getNextTreeStateVersion$2,\n  makeEmptyStoreState: makeEmptyStoreState$2\n} = Recoil_State;\nconst {\n  cleanUpNode: cleanUpNode$2,\n  getDownstreamNodes: getDownstreamNodes$2,\n  setNodeValue: setNodeValue$2,\n  setUnvalidatedAtomValue_DEPRECATED: setUnvalidatedAtomValue_DEPRECATED$1\n} = Recoil_FunctionalCore;\nconst {\n  graph: graph$3\n} = Recoil_Graph;\nconst {\n  cloneGraph: cloneGraph$1\n} = Recoil_Graph;\nconst {\n  applyAtomValueWrites: applyAtomValueWrites$1\n} = Recoil_RecoilValueInterface;\nconst {\n  releaseScheduledRetainablesNow: releaseScheduledRetainablesNow$1\n} = Recoil_Retention;\nconst {\n  freshSnapshot: freshSnapshot$1\n} = Recoil_Snapshot$1;\nconst {\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState\n} = react;\n\nfunction notInAContext() {\n  throw new Error('This component must be used inside a <RecoilRoot> component.');\n}\n\nconst defaultStore = Object.freeze({\n  getState: notInAContext,\n  replaceState: notInAContext,\n  getGraph: notInAContext,\n  subscribeToTransactions: notInAContext,\n  addTransactionMetadata: notInAContext\n});\nlet stateReplacerIsBeingExecuted = false;\n\nfunction startNextTreeIfNeeded(store) {\n  if (stateReplacerIsBeingExecuted) {\n    throw new Error('An atom update was triggered within the execution of a state updater function. State updater functions provided to Recoil must be pure functions.');\n  }\n\n  const storeState = store.getState();\n\n  if (storeState.nextTree === null) {\n    if (Recoil_gkx_1('recoil_memory_managament_2020') && Recoil_gkx_1('recoil_release_on_cascading_update_killswitch_2021')) {\n      // If this is a cascading update (that is, rendering due to one state change\n      // invokes a second state change), we won't have cleaned up retainables yet\n      // because this normally happens after notifying components. Do it before\n      // proceeding with the cascading update so that it remains predictable:\n      if (storeState.commitDepth > 0) {\n        releaseScheduledRetainablesNow$1(store);\n      }\n    }\n\n    const version = storeState.currentTree.version;\n    const nextVersion = getNextTreeStateVersion$2();\n    storeState.nextTree = { ...storeState.currentTree,\n      version: nextVersion,\n      stateID: nextVersion,\n      dirtyAtoms: new Set(),\n      transactionMetadata: {}\n    };\n    storeState.graphsByVersion.set(nextVersion, cloneGraph$1(Recoil_nullthrows(storeState.graphsByVersion.get(version))));\n  }\n}\n\nconst AppContext = react.createContext({\n  current: defaultStore\n});\n\nconst useStoreRef = () => useContext(AppContext);\n\nconst MutableSourceContext = react.createContext(null); // TODO T2710559282599660\n\nfunction useRecoilMutableSource() {\n  const mutableSource = useContext(MutableSourceContext);\n\n  if (mutableSource == null) {\n    Recoil_expectationViolation('Attempted to use a Recoil hook outside of a <RecoilRoot>. ' + '<RecoilRoot> must be an ancestor of any component that uses ' + 'Recoil hooks.');\n  }\n\n  return mutableSource;\n}\n\nfunction notifyComponents(store, storeState, treeState) {\n  const dependentNodes = getDownstreamNodes$2(store, treeState, treeState.dirtyAtoms);\n\n  for (const key of dependentNodes) {\n    const comps = storeState.nodeToComponentSubscriptions.get(key);\n\n    if (comps) {\n      for (const [_subID, [_debugName, callback]] of comps) {\n        callback(treeState);\n      }\n    }\n  }\n}\n\nfunction sendEndOfBatchNotifications(store) {\n  const storeState = store.getState();\n  const treeState = storeState.currentTree; // Inform transaction subscribers of the transaction:\n\n  const dirtyAtoms = treeState.dirtyAtoms;\n\n  if (dirtyAtoms.size) {\n    // Execute Node-specific subscribers before global subscribers\n    for (const [key, subscriptions] of storeState.nodeTransactionSubscriptions) {\n      if (dirtyAtoms.has(key)) {\n        for (const [_, subscription] of subscriptions) {\n          subscription(store);\n        }\n      }\n    }\n\n    for (const [_, subscription] of storeState.transactionSubscriptions) {\n      subscription(store);\n    }\n\n    if (!Recoil_gkx_1('recoil_early_rendering_2021') || storeState.suspendedComponentResolvers.size) {\n      // Notifying components is needed to wake from suspense, even when using\n      // early rendering.\n      notifyComponents(store, storeState, treeState); // Wake all suspended components so the right one(s) can try to re-render.\n      // We need to wake up components not just when some asynchronous selector\n      // resolved, but also when changing synchronous values because this may cause\n      // a selector to change from asynchronous to synchronous, in which case there\n      // would be no follow-up asynchronous resolution to wake us up.\n      // TODO OPTIMIZATION Only wake up related downstream components\n\n      storeState.suspendedComponentResolvers.forEach(cb => cb());\n      storeState.suspendedComponentResolvers.clear();\n    }\n  } // Special behavior ONLY invoked by useInterface.\n  // FIXME delete queuedComponentCallbacks_DEPRECATED when deleting useInterface.\n\n\n  storeState.queuedComponentCallbacks_DEPRECATED.forEach(cb => cb(treeState));\n  storeState.queuedComponentCallbacks_DEPRECATED.splice(0, storeState.queuedComponentCallbacks_DEPRECATED.length);\n}\n\nfunction endBatch(storeRef) {\n  const storeState = storeRef.current.getState();\n  storeState.commitDepth++;\n\n  try {\n    const {\n      nextTree\n    } = storeState; // Ignore commits that are not because of Recoil transactions -- namely,\n    // because something above RecoilRoot re-rendered:\n\n    if (nextTree === null) {\n      return;\n    } // nextTree is now committed -- note that copying and reset occurs when\n    // a transaction begins, in startNextTreeIfNeeded:\n\n\n    storeState.previousTree = storeState.currentTree;\n    storeState.currentTree = nextTree;\n    storeState.nextTree = null;\n    sendEndOfBatchNotifications(storeRef.current);\n\n    if (storeState.previousTree != null) {\n      storeState.graphsByVersion.delete(storeState.previousTree.version);\n    } else {\n      Recoil_recoverableViolation('Ended batch with no previous state, which is unexpected', 'recoil');\n    }\n\n    storeState.previousTree = null;\n\n    if (Recoil_gkx_1('recoil_memory_managament_2020')) {\n      releaseScheduledRetainablesNow$1(storeRef.current);\n    }\n  } finally {\n    storeState.commitDepth--;\n  }\n}\n/*\n * The purpose of the Batcher is to observe when React batches end so that\n * Recoil state changes can be batched. Whenever Recoil state changes, we call\n * setState on the batcher. Then we wait for that change to be committed, which\n * signifies the end of the batch. That's when we respond to the Recoil change.\n */\n\n\nfunction Batcher({\n  setNotifyBatcherOfChange\n}) {\n  const storeRef = useStoreRef();\n  const [_, setState] = useState([]);\n  setNotifyBatcherOfChange(() => setState({}));\n  useEffect(() => {\n    // enqueueExecution runs this function immediately; it is only used to\n    // manipulate the order of useEffects during tests, since React seems to\n    // call useEffect in an unpredictable order sometimes.\n    Recoil_Queue.enqueueExecution('Batcher', () => {\n      endBatch(storeRef);\n    });\n  }); // If an asynchronous selector resolves after the Batcher is unmounted,\n  // notifyBatcherOfChange will still be called. An error gets thrown whenever\n  // setState is called after a component is already unmounted, so this sets\n  // notifyBatcherOfChange to be a no-op.\n\n  useEffect(() => {\n    return () => {\n      setNotifyBatcherOfChange(() => {});\n    };\n  }, [setNotifyBatcherOfChange]);\n  return null;\n}\n\nif (process.env.NODE_ENV !== \"production\") {\n  if (typeof window !== 'undefined' && !window.$recoilDebugStates) {\n    window.$recoilDebugStates = [];\n  }\n} // When removing this deprecated function, remove stateBySettingRecoilValue\n// which will no longer be needed.\n\n\nfunction initialStoreState_DEPRECATED(store, initializeState) {\n  const initial = makeEmptyStoreState$2();\n  initializeState({\n    // $FlowFixMe[escaped-generic]\n    set: (atom, value) => {\n      const state = initial.currentTree;\n      const writes = setNodeValue$2(store, state, atom.key, value);\n      const writtenNodes = new Set(writes.keys());\n      const nonvalidatedAtoms = state.nonvalidatedAtoms.clone();\n\n      for (const n of writtenNodes) {\n        nonvalidatedAtoms.delete(n);\n      }\n\n      initial.currentTree = { ...state,\n        dirtyAtoms: Recoil_unionSets(state.dirtyAtoms, writtenNodes),\n        atomValues: applyAtomValueWrites$1(state.atomValues, writes),\n        // NB: PLEASE un-export applyAtomValueWrites when deleting this code\n        nonvalidatedAtoms\n      };\n    },\n    setUnvalidatedAtomValues: atomValues => {\n      // FIXME replace this with a mutative loop\n      atomValues.forEach((v, k) => {\n        initial.currentTree = setUnvalidatedAtomValue_DEPRECATED$1(initial.currentTree, k, v);\n      });\n    }\n  });\n  return initial;\n}\n\nfunction initialStoreState(initializeState) {\n  const snapshot = freshSnapshot$1().map(initializeState);\n  return snapshot.getStore_INTERNAL().getState();\n}\n\nlet nextID = 0;\n\nfunction RecoilRoot_INTERNAL({\n  initializeState_DEPRECATED,\n  initializeState,\n  store_INTERNAL: storeProp,\n  // For use with React \"context bridging\"\n  children\n}) {\n  var _createMutableSource; // prettier-ignore\n  // @fb-only: useEffect(() => {\n  // @fb-only: if (gkx('recoil_usage_logging')) {\n  // @fb-only: try {\n  // @fb-only: RecoilUsageLogFalcoEvent.log(() => ({\n  // @fb-only: type: RecoilusagelogEvent.RECOIL_ROOT_MOUNTED,\n  // @fb-only: path: URI.getRequestURI().getPath(),\n  // @fb-only: }));\n  // @fb-only: } catch {\n  // @fb-only: recoverableViolation(\n  // @fb-only: 'Error when logging Recoil Usage event',\n  // @fb-only: 'recoil',\n  // @fb-only: );\n  // @fb-only: }\n  // @fb-only: }\n  // @fb-only: }, []);\n\n\n  let storeState; // eslint-disable-line prefer-const\n\n  const getGraph = version => {\n    const graphs = storeState.current.graphsByVersion;\n\n    if (graphs.has(version)) {\n      return Recoil_nullthrows(graphs.get(version));\n    }\n\n    const newGraph = graph$3();\n    graphs.set(version, newGraph);\n    return newGraph;\n  };\n\n  const subscribeToTransactions = (callback, key) => {\n    if (key == null) {\n      // Global transaction subscriptions\n      const {\n        transactionSubscriptions\n      } = storeRef.current.getState();\n      const id = nextID++;\n      transactionSubscriptions.set(id, callback);\n      return {\n        release: () => {\n          transactionSubscriptions.delete(id);\n        }\n      };\n    } else {\n      // Node-specific transaction subscriptions:\n      const {\n        nodeTransactionSubscriptions\n      } = storeRef.current.getState();\n\n      if (!nodeTransactionSubscriptions.has(key)) {\n        nodeTransactionSubscriptions.set(key, new Map());\n      }\n\n      const id = nextID++;\n      Recoil_nullthrows(nodeTransactionSubscriptions.get(key)).set(id, callback);\n      return {\n        release: () => {\n          const subs = nodeTransactionSubscriptions.get(key);\n\n          if (subs) {\n            subs.delete(id);\n\n            if (subs.size === 0) {\n              nodeTransactionSubscriptions.delete(key);\n            }\n          }\n        }\n      };\n    }\n  };\n\n  const addTransactionMetadata = metadata => {\n    startNextTreeIfNeeded(storeRef.current);\n\n    for (const k of Object.keys(metadata)) {\n      Recoil_nullthrows(storeRef.current.getState().nextTree).transactionMetadata[k] = metadata[k];\n    }\n  };\n\n  const replaceState = replacer => {\n    const storeState = storeRef.current.getState();\n    startNextTreeIfNeeded(storeRef.current); // Use replacer to get the next state:\n\n    const nextTree = Recoil_nullthrows(storeState.nextTree);\n    let replaced;\n\n    try {\n      stateReplacerIsBeingExecuted = true;\n      replaced = replacer(nextTree);\n    } finally {\n      stateReplacerIsBeingExecuted = false;\n    }\n\n    if (replaced === nextTree) {\n      return;\n    }\n\n    if (process.env.NODE_ENV !== \"production\") {\n      if (typeof window !== 'undefined') {\n        window.$recoilDebugStates.push(replaced); // TODO this shouldn't happen here because it's not batched\n      }\n    } // Save changes to nextTree and schedule a React update:\n\n\n    storeState.nextTree = replaced;\n\n    if (Recoil_gkx_1('recoil_early_rendering_2021')) {\n      notifyComponents(store, storeState, replaced);\n    }\n\n    Recoil_nullthrows(notifyBatcherOfChange.current)();\n  };\n\n  const notifyBatcherOfChange = useRef(null);\n  const setNotifyBatcherOfChange = useCallback(x => {\n    notifyBatcherOfChange.current = x;\n  }, [notifyBatcherOfChange]); // FIXME T2710559282599660\n\n  const createMutableSource = (_createMutableSource = react.createMutableSource) !== null && _createMutableSource !== void 0 ? _createMutableSource : // flowlint-line unclear-type:off\n  react.unstable_createMutableSource; // flowlint-line unclear-type:off\n\n  const store = storeProp !== null && storeProp !== void 0 ? storeProp : {\n    getState: () => storeState.current,\n    replaceState,\n    getGraph,\n    subscribeToTransactions,\n    addTransactionMetadata\n  };\n  const storeRef = useRef(store);\n  storeState = useRef(initializeState_DEPRECATED != null ? initialStoreState_DEPRECATED(store, initializeState_DEPRECATED) : initializeState != null ? initialStoreState(initializeState) : makeEmptyStoreState$2());\n  const mutableSource = useMemo(() => createMutableSource ? createMutableSource(storeState, () => storeState.current.currentTree.version) : null, [createMutableSource, storeState]); // Cleanup when the <RecoilRoot> is unmounted\n\n  useEffect(() => () => {\n    for (const atomKey of storeRef.current.getState().knownAtoms) {\n      cleanUpNode$2(storeRef.current, atomKey);\n    }\n  }, []);\n  return /*#__PURE__*/react.createElement(AppContext.Provider, {\n    value: storeRef\n  }, /*#__PURE__*/react.createElement(MutableSourceContext.Provider, {\n    value: mutableSource\n  }, /*#__PURE__*/react.createElement(Batcher, {\n    setNotifyBatcherOfChange: setNotifyBatcherOfChange\n  }), children));\n}\n\nfunction RecoilRoot(props) {\n  const {\n    override,\n    ...propsExceptOverride\n  } = props;\n  const ancestorStoreRef = useStoreRef();\n\n  if (override === false && ancestorStoreRef.current !== defaultStore) {\n    // If ancestorStoreRef.current !== defaultStore, it means that this\n    // RecoilRoot is not nested within another.\n    return props.children;\n  }\n\n  return /*#__PURE__*/react.createElement(RecoilRoot_INTERNAL, propsExceptOverride);\n}\n\nvar Recoil_RecoilRoot_react = {\n  useStoreRef,\n  useRecoilMutableSource,\n  RecoilRoot,\n  notifyComponents_FOR_TESTING: notifyComponents,\n  sendEndOfBatchNotifications_FOR_TESTING: sendEndOfBatchNotifications\n};\nconst {\n  loadableWithValue: loadableWithValue$1\n} = Recoil_Loadable;\nconst {\n  DEFAULT_VALUE: DEFAULT_VALUE$2,\n  getNode: getNode$3\n} = Recoil_Node;\nconst {\n  copyTreeState: copyTreeState$1,\n  getRecoilValueAsLoadable: getRecoilValueAsLoadable$2,\n  invalidateDownstreams: invalidateDownstreams$1,\n  writeLoadableToTreeState: writeLoadableToTreeState$1\n} = Recoil_RecoilValueInterface;\n\nfunction isAtom(recoilValue) {\n  return getNode$3(recoilValue.key).nodeType === 'atom';\n}\n\nclass TransactionInterfaceImpl {\n  constructor(store, treeState) {\n    _defineProperty(this, \"_store\", void 0);\n\n    _defineProperty(this, \"_treeState\", void 0);\n\n    _defineProperty(this, \"_changes\", void 0);\n\n    _defineProperty(this, \"get\", recoilValue => {\n      if (this._changes.has(recoilValue.key)) {\n        // $FlowFixMe[incompatible-return]\n        return this._changes.get(recoilValue.key);\n      }\n\n      if (!isAtom(recoilValue)) {\n        throw new Error('Reading selectors within atomicUpdate is not supported');\n      }\n\n      const loadable = getRecoilValueAsLoadable$2(this._store, recoilValue, this._treeState);\n\n      if (loadable.state === 'hasValue') {\n        return loadable.contents;\n      } else if (loadable.state === 'hasError') {\n        throw loadable.contents;\n      } else {\n        throw new Error(`Expected Recoil atom ${recoilValue.key} to have a value, but it is in a loading state.`);\n      }\n    });\n\n    _defineProperty(this, \"set\", (recoilState, valueOrUpdater) => {\n      if (!isAtom(recoilState)) {\n        throw new Error('Setting selectors within atomicUpdate is not supported');\n      }\n\n      if (typeof valueOrUpdater === 'function') {\n        const current = this.get(recoilState);\n\n        this._changes.set(recoilState.key, valueOrUpdater(current)); // flowlint-line unclear-type:off\n\n      } else {\n        this._changes.set(recoilState.key, valueOrUpdater);\n      }\n    });\n\n    _defineProperty(this, \"reset\", recoilState => {\n      this.set(recoilState, DEFAULT_VALUE$2);\n    });\n\n    this._store = store;\n    this._treeState = treeState;\n    this._changes = new Map();\n  } // Allow destructing\n  // eslint-disable-next-line fb-www/extra-arrow-initializer\n\n\n  newTreeState_INTERNAL() {\n    if (this._changes.size === 0) {\n      return this._treeState;\n    }\n\n    const newState = copyTreeState$1(this._treeState);\n\n    for (const [k, v] of this._changes) {\n      writeLoadableToTreeState$1(newState, k, loadableWithValue$1(v));\n    }\n\n    invalidateDownstreams$1(this._store, newState);\n    return newState;\n  }\n\n}\n\nfunction atomicUpdater(store) {\n  return fn => {\n    store.replaceState(treeState => {\n      const changeset = new TransactionInterfaceImpl(store, treeState);\n      fn(changeset);\n      return changeset.newTreeState_INTERNAL();\n    });\n  };\n}\n\nvar Recoil_AtomicUpdates = {\n  atomicUpdater\n};\nvar Recoil_AtomicUpdates_1 = Recoil_AtomicUpdates.atomicUpdater;\nvar Recoil_AtomicUpdates$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  atomicUpdater: Recoil_AtomicUpdates_1\n});\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\n/**\n * Returns a map containing all of the keys + values from the original map where\n * the given callback returned true.\n */\n\nfunction filterMap(map, callback) {\n  const result = new Map();\n\n  for (const [key, value] of map) {\n    if (callback(value, key)) {\n      result.set(key, value);\n    }\n  }\n\n  return result;\n}\n\nvar Recoil_filterMap = filterMap;\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\n/**\n * Returns a set containing all of the values from the original set where\n * the given callback returned true.\n */\n\nfunction filterSet(set, callback) {\n  const result = new Set();\n\n  for (const value of set) {\n    if (callback(value)) {\n      result.add(value);\n    }\n  }\n\n  return result;\n}\n\nvar Recoil_filterSet = filterSet;\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nfunction invariant(condition, message) {\n  if (!condition) {\n    throw new Error(message);\n  }\n}\n\nvar invariant_1 = invariant; // @oss-only\n\nvar Recoil_invariant = invariant_1;\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nfunction mergeMaps(...maps) {\n  const result = new Map();\n\n  for (let i = 0; i < maps.length; i++) {\n    const iterator = maps[i].keys();\n    let nextKey;\n\n    while (!(nextKey = iterator.next()).done) {\n      // $FlowFixMe[incompatible-call] - map/iterator knows nothing about flow types\n      result.set(nextKey.value, maps[i].get(nextKey.value));\n    }\n  }\n  /* $FlowFixMe[incompatible-return] (>=0.66.0 site=www,mobile) This comment\n   * suppresses an error found when Flow v0.66 was deployed. To see the error\n   * delete this comment and run Flow. */\n\n\n  return result;\n}\n\nvar Recoil_mergeMaps = mergeMaps;\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nfunction shallowArrayEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  for (let i = 0, l = a.length; i < l; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nvar Recoil_shallowArrayEqual = shallowArrayEqual;\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * MIT License\n *\n * Copyright (c) 2014-2019 Georg Tavonius\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nconst UNKNOWN_FUNCTION = '<unknown>';\n/**\n * This parses the different stack traces and puts them into one format\n * This borrows heavily from TraceKit (https://github.com/csnover/TraceKit)\n */\n\nfunction stackTraceParser(stackString) {\n  const lines = stackString.split('\\n');\n  return lines.reduce((stack, line) => {\n    const parseResult = parseChrome(line) || parseWinjs(line) || parseGecko(line) || parseNode(line) || parseJSC(line);\n\n    if (parseResult) {\n      stack.push(parseResult);\n    }\n\n    return stack;\n  }, []);\n}\n\nconst chromeRe = /^\\s*at (.*?) ?\\(((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|\\/|[a-z]:\\\\|\\\\\\\\).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i;\nconst chromeEvalRe = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/;\n\nfunction parseChrome(line) {\n  const parts = chromeRe.exec(line);\n\n  if (!parts) {\n    return null;\n  }\n\n  const isNative = parts[2] && parts[2].indexOf('native') === 0; // start of line\n\n  const isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line\n\n  const submatch = chromeEvalRe.exec(parts[2]);\n\n  if (isEval && submatch != null) {\n    // throw out eval line/column and use top-most line/column number\n    parts[2] = submatch[1]; // url\n\n    parts[3] = submatch[2]; // line\n\n    parts[4] = submatch[3]; // column\n  }\n\n  return {\n    file: !isNative ? parts[2] : null,\n    methodName: parts[1] || UNKNOWN_FUNCTION,\n    arguments: isNative ? [parts[2]] : [],\n    lineNumber: parts[3] ? +parts[3] : null,\n    column: parts[4] ? +parts[4] : null\n  };\n}\n\nconst winjsRe = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\n\nfunction parseWinjs(line) {\n  const parts = winjsRe.exec(line);\n\n  if (!parts) {\n    return null;\n  }\n\n  return {\n    file: parts[2],\n    methodName: parts[1] || UNKNOWN_FUNCTION,\n    arguments: [],\n    lineNumber: +parts[3],\n    column: parts[4] ? +parts[4] : null\n  };\n}\n\nconst geckoRe = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)((?:file|https?|blob|chrome|webpack|resource|\\[native).*?|[^@]*bundle)(?::(\\d+))?(?::(\\d+))?\\s*$/i;\nconst geckoEvalRe = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i;\n\nfunction parseGecko(line) {\n  const parts = geckoRe.exec(line);\n\n  if (!parts) {\n    return null;\n  }\n\n  const isEval = parts[3] && parts[3].indexOf(' > eval') > -1;\n  const submatch = geckoEvalRe.exec(parts[3]);\n\n  if (isEval && submatch != null) {\n    // throw out eval line/column and use top-most line number\n    parts[3] = submatch[1];\n    parts[4] = submatch[2];\n    parts[5] = null; // no column when eval\n  }\n\n  return {\n    file: parts[3],\n    methodName: parts[1] || UNKNOWN_FUNCTION,\n    arguments: parts[2] ? parts[2].split(',') : [],\n    lineNumber: parts[4] ? +parts[4] : null,\n    column: parts[5] ? +parts[5] : null\n  };\n}\n\nconst javaScriptCoreRe = /^\\s*(?:([^@]*)(?:\\((.*?)\\))?@)?(\\S.*?):(\\d+)(?::(\\d+))?\\s*$/i;\n\nfunction parseJSC(line) {\n  const parts = javaScriptCoreRe.exec(line);\n\n  if (!parts) {\n    return null;\n  }\n\n  return {\n    file: parts[3],\n    methodName: parts[1] || UNKNOWN_FUNCTION,\n    arguments: [],\n    lineNumber: +parts[4],\n    column: parts[5] ? +parts[5] : null\n  };\n}\n\nconst nodeRe = /^\\s*at (?:((?:\\[object object\\])?[^\\\\/]+(?: \\[as \\S+\\])?) )?\\(?(.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\n\nfunction parseNode(line) {\n  const parts = nodeRe.exec(line);\n\n  if (!parts) {\n    return null;\n  }\n\n  return {\n    file: parts[2],\n    methodName: parts[1] || UNKNOWN_FUNCTION,\n    arguments: [],\n    lineNumber: +parts[3],\n    column: parts[4] ? +parts[4] : null\n  };\n}\n\nvar Recoil_stackTraceParser = stackTraceParser;\nconst {\n  useRef: useRef$1\n} = react;\n\nfunction useComponentName() {\n  const nameRef = useRef$1();\n\n  if (process.env.NODE_ENV !== \"production\") {\n    if (Recoil_gkx_1('recoil_infer_component_names')) {\n      var _nameRef$current;\n\n      if (nameRef.current === undefined) {\n        // There is no blessed way to determine the calling React component from\n        // within a hook. This hack uses the fact that hooks must start with 'use'\n        // and that hooks are either called by React Components or other hooks. It\n        // follows therefore, that to find the calling component, you simply need\n        // to look down the stack and find the first function which doesn't start\n        // with 'use'. We are only enabling this in dev for now, since once the\n        // codebase is minified, the naming assumptions no longer hold true.\n        const frames = Recoil_stackTraceParser(new Error().stack);\n\n        for (const {\n          methodName\n        } of frames) {\n          // I observed cases where the frame was of the form 'Object.useXXX'\n          // hence why I'm searching for hooks following a word boundary\n          if (!methodName.match(/\\buse[^\\b]+$/)) {\n            return nameRef.current = methodName;\n          }\n        }\n\n        nameRef.current = null;\n      }\n\n      return (_nameRef$current = nameRef.current) !== null && _nameRef$current !== void 0 ? _nameRef$current : '<unable to determine component name>';\n    }\n  } // @fb-only: return \"<component name only available when both in dev mode and when passing GK 'recoil_infer_component_names'>\";\n\n\n  return '<component name not available>'; // @oss-only\n}\n\nvar Recoil_useComponentName = useComponentName;\nconst {\n  atomicUpdater: atomicUpdater$1\n} = Recoil_AtomicUpdates$1;\nconst {\n  batchUpdates: batchUpdates$2\n} = Recoil_Batching;\nconst {\n  DEFAULT_VALUE: DEFAULT_VALUE$3,\n  getNode: getNode$4,\n  nodes: nodes$1\n} = Recoil_Node;\nconst {\n  useRecoilMutableSource: useRecoilMutableSource$1,\n  useStoreRef: useStoreRef$1\n} = Recoil_RecoilRoot_react;\nconst {\n  isRecoilValue: isRecoilValue$2\n} = Recoil_RecoilValue$1;\nconst {\n  AbstractRecoilValue: AbstractRecoilValue$3,\n  getRecoilValueAsLoadable: getRecoilValueAsLoadable$3,\n  setRecoilValue: setRecoilValue$2,\n  setRecoilValueLoadable: setRecoilValueLoadable$1,\n  setUnvalidatedRecoilValue: setUnvalidatedRecoilValue$2,\n  subscribeToRecoilValue: subscribeToRecoilValue$1\n} = Recoil_RecoilValueInterface;\nconst {\n  updateRetainCount: updateRetainCount$2\n} = Recoil_Retention;\nconst {\n  RetentionZone: RetentionZone$3\n} = Recoil_RetentionZone;\nconst {\n  Snapshot: Snapshot$1,\n  cloneSnapshot: cloneSnapshot$1\n} = Recoil_Snapshot$1;\nconst {\n  setByAddingToSet: setByAddingToSet$2\n} = Recoil_CopyOnWrite;\nconst {\n  isSSR: isSSR$2\n} = Recoil_Environment;\nconst {\n  mutableSourceExists: mutableSourceExists$2,\n  useMutableSource: useMutableSource$1\n} = Recoil_mutableSource;\nconst {\n  useCallback: useCallback$1,\n  useEffect: useEffect$1,\n  useMemo: useMemo$1,\n  useRef: useRef$2,\n  useState: useState$1\n} = react; // Components that aren't mounted after suspending for this long will be assumed\n// to be discarded and their resources released.\n\nconst SUSPENSE_TIMEOUT_MS = 120000;\n\nfunction handleLoadable(loadable, recoilValue, storeRef) {\n  // We can't just throw the promise we are waiting on to Suspense.  If the\n  // upstream dependencies change it may produce a state in which the component\n  // can render, but it would still be suspended on a Promise that may never resolve.\n  if (loadable.state === 'hasValue') {\n    return loadable.contents;\n  } else if (loadable.state === 'loading') {\n    const promise = new Promise(resolve => {\n      storeRef.current.getState().suspendedComponentResolvers.add(resolve);\n    }); // $FlowFixMe Flow(prop-missing) for integrating with tools that inspect thrown promises @fb-only\n    // @fb-only: promise.displayName = `Recoil State: ${recoilValue.key}`;\n\n    throw promise;\n  } else if (loadable.state === 'hasError') {\n    throw loadable.contents;\n  } else {\n    const err = new Error(`Invalid value of loadable atom \"${recoilValue.key}\"`);\n    throw err;\n  }\n}\n\nfunction validateRecoilValue(recoilValue, hookName) {\n  if (!isRecoilValue$2(recoilValue)) {\n    throw new Error(`Invalid argument to ${hookName}: expected an atom or selector but got ${String(recoilValue)}`);\n  }\n}\n/**\n * Various things are broken with useRecoilInterface, particularly concurrent mode\n * and memory management. They will not be fixed.\n * */\n\n\nfunction useRecoilInterface_DEPRECATED() {\n  const storeRef = useStoreRef$1();\n  const [_, forceUpdate] = useState$1([]);\n  const recoilValuesUsed = useRef$2(new Set());\n  recoilValuesUsed.current = new Set(); // Track the RecoilValues used just during this render\n\n  const previousSubscriptions = useRef$2(new Set());\n  const subscriptions = useRef$2(new Map());\n  const unsubscribeFrom = useCallback$1(key => {\n    const sub = subscriptions.current.get(key);\n\n    if (sub) {\n      sub.release();\n      subscriptions.current.delete(key);\n    }\n  }, [subscriptions]);\n  const componentName = Recoil_useComponentName();\n  useEffect$1(() => {\n    const store = storeRef.current;\n\n    function updateState(_state, key) {\n      if (!subscriptions.current.has(key)) {\n        return;\n      }\n\n      forceUpdate([]);\n    }\n\n    Recoil_differenceSets(recoilValuesUsed.current, previousSubscriptions.current).forEach(key => {\n      if (subscriptions.current.has(key)) {\n        Recoil_expectationViolation(`Double subscription to RecoilValue \"${key}\"`);\n        return;\n      }\n\n      const sub = subscribeToRecoilValue$1(store, new AbstractRecoilValue$3(key), state => {\n        updateState(state, key);\n      }, componentName);\n      subscriptions.current.set(key, sub);\n      /**\n       * Since we're subscribing in an effect we need to update to the latest\n       * value of the atom since it may have changed since we rendered. We can\n       * go ahead and do that now, unless we're in the middle of a batch --\n       * in which case we should do it at the end of the batch, due to the\n       * following edge case: Suppose an atom is updated in another useEffect\n       * of this same component. Then the following sequence of events occur:\n       * 1. Atom is updated and subs fired (but we may not be subscribed\n       *    yet depending on order of effects, so we miss this) Updated value\n       *    is now in nextTree, but not currentTree.\n       * 2. This effect happens. We subscribe and update.\n       * 3. From the update we re-render and read currentTree, with old value.\n       * 4. Batcher's effect sets currentTree to nextTree.\n       * In this sequence we miss the update. To avoid that, add the update\n       * to queuedComponentCallback if a batch is in progress.\n       */\n      // FIXME delete queuedComponentCallbacks_DEPRECATED when deleting useInterface.\n\n      const state = store.getState();\n\n      if (state.nextTree) {\n        store.getState().queuedComponentCallbacks_DEPRECATED.push(() => {\n          updateState(store.getState(), key);\n        });\n      } else {\n        updateState(store.getState(), key);\n      }\n    });\n    Recoil_differenceSets(previousSubscriptions.current, recoilValuesUsed.current).forEach(key => {\n      unsubscribeFrom(key);\n    });\n    previousSubscriptions.current = recoilValuesUsed.current;\n  });\n  useEffect$1(() => {\n    const subs = subscriptions.current;\n    return () => subs.forEach((_, key) => unsubscribeFrom(key));\n  }, [unsubscribeFrom]);\n  return useMemo$1(() => {\n    function useSetRecoilState(recoilState) {\n      if (process.env.NODE_ENV !== \"production\") {\n        // $FlowFixMe[escaped-generic]\n        validateRecoilValue(recoilState, 'useSetRecoilState');\n      }\n\n      return newValueOrUpdater => {\n        setRecoilValue$2(storeRef.current, recoilState, newValueOrUpdater);\n      };\n    }\n\n    function useResetRecoilState(recoilState) {\n      if (process.env.NODE_ENV !== \"production\") {\n        // $FlowFixMe[escaped-generic]\n        validateRecoilValue(recoilState, 'useResetRecoilState');\n      }\n\n      return () => setRecoilValue$2(storeRef.current, recoilState, DEFAULT_VALUE$3);\n    }\n\n    function useRecoilValueLoadable(recoilValue) {\n      var _storeState$nextTree;\n\n      if (process.env.NODE_ENV !== \"production\") {\n        // $FlowFixMe[escaped-generic]\n        validateRecoilValue(recoilValue, 'useRecoilValueLoadable');\n      }\n\n      if (!recoilValuesUsed.current.has(recoilValue.key)) {\n        recoilValuesUsed.current = setByAddingToSet$2(recoilValuesUsed.current, recoilValue.key);\n      } // TODO Restore optimization to memoize lookup\n\n\n      const storeState = storeRef.current.getState();\n      return getRecoilValueAsLoadable$3(storeRef.current, recoilValue, Recoil_gkx_1('recoil_early_rendering_2021') ? (_storeState$nextTree = storeState.nextTree) !== null && _storeState$nextTree !== void 0 ? _storeState$nextTree : storeState.currentTree : storeState.currentTree);\n    }\n\n    function useRecoilValue(recoilValue) {\n      if (process.env.NODE_ENV !== \"production\") {\n        // $FlowFixMe[escaped-generic]\n        validateRecoilValue(recoilValue, 'useRecoilValue');\n      }\n\n      const loadable = useRecoilValueLoadable(recoilValue);\n      return handleLoadable(loadable, recoilValue, storeRef);\n    }\n\n    function useRecoilState(recoilState) {\n      if (process.env.NODE_ENV !== \"production\") {\n        // $FlowFixMe[escaped-generic]\n        validateRecoilValue(recoilState, 'useRecoilState');\n      }\n\n      return [useRecoilValue(recoilState), useSetRecoilState(recoilState)];\n    }\n\n    function useRecoilStateLoadable(recoilState) {\n      if (process.env.NODE_ENV !== \"production\") {\n        // $FlowFixMe[escaped-generic]\n        validateRecoilValue(recoilState, 'useRecoilStateLoadable');\n      }\n\n      return [useRecoilValueLoadable(recoilState), useSetRecoilState(recoilState)];\n    }\n\n    return {\n      getRecoilValue: useRecoilValue,\n      getRecoilValueLoadable: useRecoilValueLoadable,\n      getRecoilState: useRecoilState,\n      getRecoilStateLoadable: useRecoilStateLoadable,\n      getSetRecoilState: useSetRecoilState,\n      getResetRecoilState: useResetRecoilState\n    };\n  }, [recoilValuesUsed, storeRef]);\n}\n\nconst recoilComponentGetRecoilValueCount_FOR_TESTING = {\n  current: 0\n};\n\nfunction useRecoilValueLoadable_MUTABLESOURCE(recoilValue) {\n  if (process.env.NODE_ENV !== \"production\") {\n    // $FlowFixMe[escaped-generic]\n    validateRecoilValue(recoilValue, 'useRecoilValueLoadable');\n  }\n\n  const storeRef = useStoreRef$1();\n  const getLoadable = useCallback$1(() => {\n    var _storeState$nextTree2;\n\n    const store = storeRef.current;\n    const storeState = store.getState();\n    const treeState = Recoil_gkx_1('recoil_early_rendering_2021') ? (_storeState$nextTree2 = storeState.nextTree) !== null && _storeState$nextTree2 !== void 0 ? _storeState$nextTree2 : storeState.currentTree : storeState.currentTree;\n    return getRecoilValueAsLoadable$3(store, recoilValue, treeState);\n  }, [storeRef, recoilValue]);\n  const getLoadableWithTesting = useCallback$1(() => {\n    if (process.env.NODE_ENV !== \"production\") {\n      recoilComponentGetRecoilValueCount_FOR_TESTING.current++;\n    }\n\n    return getLoadable();\n  }, [getLoadable]);\n  const componentName = Recoil_useComponentName();\n  const subscribe = useCallback$1((_storeState, callback) => {\n    const store = storeRef.current;\n    const subscription = subscribeToRecoilValue$1(store, recoilValue, () => {\n      if (!Recoil_gkx_1('recoil_suppress_rerender_in_callback')) {\n        return callback();\n      } // Only re-render if the value has changed.\n      // This will evaluate the atom/selector now as well as when the\n      // component renders, but that may help with prefetching.\n\n\n      const newLoadable = getLoadable();\n\n      if (!prevLoadableRef.current.is(newLoadable)) {\n        callback();\n      } // If the component is suspended then the effect setting prevLoadableRef\n      // will not run.  So, set the previous value here when its subscription\n      // is fired to wake it up.  We can't just rely on this, though, because\n      // this only executes when an atom/selector is dirty and the atom/selector\n      // passed to the hook can dynamically change.\n\n\n      prevLoadableRef.current = newLoadable;\n    }, componentName);\n    return subscription.release;\n  }, [storeRef, recoilValue, componentName, getLoadable]);\n  const source = useRecoilMutableSource$1();\n  const loadable = useMutableSource$1(source, getLoadableWithTesting, subscribe);\n  const prevLoadableRef = useRef$2(loadable);\n  useEffect$1(() => {\n    prevLoadableRef.current = loadable;\n  });\n  return loadable;\n}\n\nfunction useRecoilValueLoadable_LEGACY(recoilValue) {\n  if (process.env.NODE_ENV !== \"production\") {\n    // $FlowFixMe[escaped-generic]\n    validateRecoilValue(recoilValue, 'useRecoilValueLoadable');\n  }\n\n  const storeRef = useStoreRef$1();\n  const [_, forceUpdate] = useState$1([]);\n  const componentName = Recoil_useComponentName();\n  useEffect$1(() => {\n    const store = storeRef.current;\n    const storeState = store.getState();\n    const subscription = subscribeToRecoilValue$1(store, recoilValue, _state => {\n      var _prevLoadableRef$curr;\n\n      if (!Recoil_gkx_1('recoil_suppress_rerender_in_callback')) {\n        return forceUpdate([]);\n      }\n\n      const newLoadable = getRecoilValueAsLoadable$3(store, recoilValue, store.getState().currentTree);\n\n      if (!((_prevLoadableRef$curr = prevLoadableRef.current) === null || _prevLoadableRef$curr === void 0 ? void 0 : _prevLoadableRef$curr.is(newLoadable))) {\n        forceUpdate(newLoadable);\n      }\n\n      prevLoadableRef.current = newLoadable;\n    }, componentName);\n    /**\n     * Since we're subscribing in an effect we need to update to the latest\n     * value of the atom since it may have changed since we rendered. We can\n     * go ahead and do that now, unless we're in the middle of a batch --\n     * in which case we should do it at the end of the batch, due to the\n     * following edge case: Suppose an atom is updated in another useEffect\n     * of this same component. Then the following sequence of events occur:\n     * 1. Atom is updated and subs fired (but we may not be subscribed\n     *    yet depending on order of effects, so we miss this) Updated value\n     *    is now in nextTree, but not currentTree.\n     * 2. This effect happens. We subscribe and update.\n     * 3. From the update we re-render and read currentTree, with old value.\n     * 4. Batcher's effect sets currentTree to nextTree.\n     * In this sequence we miss the update. To avoid that, add the update\n     * to queuedComponentCallback if a batch is in progress.\n     */\n\n    if (storeState.nextTree) {\n      store.getState().queuedComponentCallbacks_DEPRECATED.push(() => {\n        prevLoadableRef.current = null;\n        forceUpdate([]);\n      });\n    } else {\n      var _prevLoadableRef$curr2;\n\n      if (!Recoil_gkx_1('recoil_suppress_rerender_in_callback')) {\n        return forceUpdate([]);\n      }\n\n      const newLoadable = getRecoilValueAsLoadable$3(store, recoilValue, store.getState().currentTree);\n\n      if (!((_prevLoadableRef$curr2 = prevLoadableRef.current) === null || _prevLoadableRef$curr2 === void 0 ? void 0 : _prevLoadableRef$curr2.is(newLoadable))) {\n        forceUpdate(newLoadable);\n      }\n\n      prevLoadableRef.current = newLoadable;\n    }\n\n    return subscription.release;\n  }, [componentName, recoilValue, storeRef]);\n  const loadable = getRecoilValueAsLoadable$3(storeRef.current, recoilValue);\n  const prevLoadableRef = useRef$2(loadable);\n  useEffect$1(() => {\n    prevLoadableRef.current = loadable;\n  });\n  return loadable;\n}\n/**\n  Like useRecoilValue(), but either returns the value if available or\n  just undefined if not available for any reason, such as pending or error.\n*/\n\n\nfunction useRecoilValueLoadable(recoilValue) {\n  if (Recoil_gkx_1('recoil_memory_managament_2020')) {\n    // eslint-disable-next-line fb-www/react-hooks\n    useRetain(recoilValue);\n  }\n\n  if (mutableSourceExists$2()) {\n    // eslint-disable-next-line fb-www/react-hooks\n    return useRecoilValueLoadable_MUTABLESOURCE(recoilValue);\n  } else {\n    // eslint-disable-next-line fb-www/react-hooks\n    return useRecoilValueLoadable_LEGACY(recoilValue);\n  }\n}\n/**\n  Returns the value represented by the RecoilValue.\n  If the value is pending, it will throw a Promise to suspend the component,\n  if the value is an error it will throw it for the nearest React error boundary.\n  This will also subscribe the component for any updates in the value.\n  */\n\n\nfunction useRecoilValue(recoilValue) {\n  if (process.env.NODE_ENV !== \"production\") {\n    // $FlowFixMe[escaped-generic]\n    validateRecoilValue(recoilValue, 'useRecoilValue');\n  }\n\n  const storeRef = useStoreRef$1();\n  const loadable = useRecoilValueLoadable(recoilValue);\n  return handleLoadable(loadable, recoilValue, storeRef);\n}\n/**\n  Returns a function that allows the value of a RecoilState to be updated, but does\n  not subscribe the component to changes to that RecoilState.\n*/\n\n\nfunction useSetRecoilState(recoilState) {\n  if (process.env.NODE_ENV !== \"production\") {\n    // $FlowFixMe[escaped-generic]\n    validateRecoilValue(recoilState, 'useSetRecoilState');\n  }\n\n  const storeRef = useStoreRef$1();\n  return useCallback$1(newValueOrUpdater => {\n    setRecoilValue$2(storeRef.current, recoilState, newValueOrUpdater);\n  }, [storeRef, recoilState]);\n}\n/**\n  Returns a function that will reset the value of a RecoilState to its default\n*/\n\n\nfunction useResetRecoilState(recoilState) {\n  if (process.env.NODE_ENV !== \"production\") {\n    // $FlowFixMe[escaped-generic]\n    validateRecoilValue(recoilState, 'useResetRecoilState');\n  }\n\n  const storeRef = useStoreRef$1();\n  return useCallback$1(() => {\n    setRecoilValue$2(storeRef.current, recoilState, DEFAULT_VALUE$3);\n  }, [storeRef, recoilState]);\n}\n/**\n  Equivalent to useState(). Allows the value of the RecoilState to be read and written.\n  Subsequent updates to the RecoilState will cause the component to re-render. If the\n  RecoilState is pending, this will suspend the component and initiate the\n  retrieval of the value. If evaluating the RecoilState resulted in an error, this will\n  throw the error so that the nearest React error boundary can catch it.\n*/\n\n\nfunction useRecoilState(recoilState) {\n  if (process.env.NODE_ENV !== \"production\") {\n    // $FlowFixMe[escaped-generic]\n    validateRecoilValue(recoilState, 'useRecoilState');\n  }\n\n  return [useRecoilValue(recoilState), useSetRecoilState(recoilState)];\n}\n/**\n  Like useRecoilState(), but does not cause Suspense or React error handling. Returns\n  an object that indicates whether the RecoilState is available, pending, or\n  unavailable due to an error.\n*/\n\n\nfunction useRecoilStateLoadable(recoilState) {\n  if (process.env.NODE_ENV !== \"production\") {\n    // $FlowFixMe[escaped-generic]\n    validateRecoilValue(recoilState, 'useRecoilStateLoadable');\n  }\n\n  return [useRecoilValueLoadable(recoilState), useSetRecoilState(recoilState)];\n}\n\nfunction useTransactionSubscription(callback) {\n  const storeRef = useStoreRef$1();\n  useEffect$1(() => {\n    const sub = storeRef.current.subscribeToTransactions(callback);\n    return sub.release;\n  }, [callback, storeRef]);\n}\n\nfunction externallyVisibleAtomValuesInState(state) {\n  const atomValues = state.atomValues.toMap();\n  const persistedAtomContentsValues = Recoil_mapMap(Recoil_filterMap(atomValues, (v, k) => {\n    const node = getNode$4(k);\n    const persistence = node.persistence_UNSTABLE;\n    return persistence != null && persistence.type !== 'none' && v.state === 'hasValue';\n  }), v => v.contents); // Merge in nonvalidated atoms; we may not have defs for them but they will\n  // all have persistence on or they wouldn't be there in the first place.\n\n  return Recoil_mergeMaps(state.nonvalidatedAtoms.toMap(), persistedAtomContentsValues);\n}\n/**\n  Calls the given callback after any atoms have been modified and the consequent\n  component re-renders have been committed. This is intended for persisting\n  the values of the atoms to storage. The stored values can then be restored\n  using the useSetUnvalidatedAtomValues hook.\n\n  The callback receives the following info:\n\n  atomValues: The current value of every atom that is both persistable (persistence\n              type not set to 'none') and whose value is available (not in an\n              error or loading state).\n\n  previousAtomValues: The value of every persistable and available atom before\n               the transaction began.\n\n  atomInfo: A map containing the persistence settings for each atom. Every key\n            that exists in atomValues will also exist in atomInfo.\n\n  modifiedAtoms: The set of atoms that were written to during the transaction.\n\n  transactionMetadata: Arbitrary information that was added via the\n          useSetUnvalidatedAtomValues hook. Useful for ignoring the useSetUnvalidatedAtomValues\n          transaction, to avoid loops.\n*/\n\n\nfunction useTransactionObservation_DEPRECATED(callback) {\n  useTransactionSubscription(useCallback$1(store => {\n    let previousTree = store.getState().previousTree;\n    const currentTree = store.getState().currentTree;\n\n    if (!previousTree) {\n      Recoil_recoverableViolation('Transaction subscribers notified without a previous tree being present -- this is a bug in Recoil');\n      previousTree = store.getState().currentTree; // attempt to trundle on\n    }\n\n    const atomValues = externallyVisibleAtomValuesInState(currentTree);\n    const previousAtomValues = externallyVisibleAtomValuesInState(previousTree);\n    const atomInfo = Recoil_mapMap(nodes$1, node => {\n      var _node$persistence_UNS, _node$persistence_UNS2, _node$persistence_UNS3, _node$persistence_UNS4;\n\n      return {\n        persistence_UNSTABLE: {\n          type: (_node$persistence_UNS = (_node$persistence_UNS2 = node.persistence_UNSTABLE) === null || _node$persistence_UNS2 === void 0 ? void 0 : _node$persistence_UNS2.type) !== null && _node$persistence_UNS !== void 0 ? _node$persistence_UNS : 'none',\n          backButton: (_node$persistence_UNS3 = (_node$persistence_UNS4 = node.persistence_UNSTABLE) === null || _node$persistence_UNS4 === void 0 ? void 0 : _node$persistence_UNS4.backButton) !== null && _node$persistence_UNS3 !== void 0 ? _node$persistence_UNS3 : false\n        }\n      };\n    }); // Filter on existance in atomValues so that externally-visible rules\n    // are also applied to modified atoms (specifically exclude selectors):\n\n    const modifiedAtoms = Recoil_filterSet(currentTree.dirtyAtoms, k => atomValues.has(k) || previousAtomValues.has(k));\n    callback({\n      atomValues,\n      previousAtomValues,\n      atomInfo,\n      modifiedAtoms,\n      transactionMetadata: { ...currentTree.transactionMetadata\n      }\n    });\n  }, [callback]));\n}\n\nfunction useRecoilTransactionObserver(callback) {\n  useTransactionSubscription(useCallback$1(store => {\n    const snapshot = cloneSnapshot$1(store, 'current');\n    const previousSnapshot = cloneSnapshot$1(store, 'previous');\n    callback({\n      snapshot,\n      previousSnapshot\n    });\n  }, [callback]));\n}\n\nfunction usePrevious(value) {\n  const ref = useRef$2();\n  useEffect$1(() => {\n    ref.current = value;\n  });\n  return ref.current;\n} // Return a snapshot of the current state and subscribe to all state changes\n\n\nfunction useRecoilSnapshot() {\n  const storeRef = useStoreRef$1();\n  const [snapshot, setSnapshot] = useState$1(() => cloneSnapshot$1(storeRef.current));\n  const previousSnapshot = usePrevious(snapshot);\n  const timeoutID = useRef$2();\n  useEffect$1(() => {\n    if (timeoutID.current && !isSSR$2) {\n      window.clearTimeout(timeoutID.current);\n    }\n\n    return snapshot.retain();\n  }, [snapshot]);\n  useTransactionSubscription(useCallback$1(store => setSnapshot(cloneSnapshot$1(store)), []));\n\n  if (previousSnapshot !== snapshot && !isSSR$2) {\n    if (timeoutID.current) {\n      previousSnapshot === null || previousSnapshot === void 0 ? void 0 : previousSnapshot.release_INTERNAL();\n      window.clearTimeout(timeoutID.current);\n    }\n\n    snapshot.retain();\n    timeoutID.current = window.setTimeout(() => {\n      snapshot.release_INTERNAL();\n      timeoutID.current = null;\n    }, SUSPENSE_TIMEOUT_MS);\n  }\n\n  return snapshot;\n}\n\nfunction useGotoRecoilSnapshot() {\n  const storeRef = useStoreRef$1();\n  return useCallback$1(snapshot => {\n    var _storeState$nextTree3;\n\n    const storeState = storeRef.current.getState();\n    const prev = (_storeState$nextTree3 = storeState.nextTree) !== null && _storeState$nextTree3 !== void 0 ? _storeState$nextTree3 : storeState.currentTree;\n    const next = snapshot.getStore_INTERNAL().getState().currentTree;\n    batchUpdates$2(() => {\n      const keysToUpdate = new Set();\n\n      for (const keys of [prev.atomValues.keys(), next.atomValues.keys()]) {\n        for (const key of keys) {\n          var _prev$atomValues$get, _next$atomValues$get;\n\n          if (((_prev$atomValues$get = prev.atomValues.get(key)) === null || _prev$atomValues$get === void 0 ? void 0 : _prev$atomValues$get.contents) !== ((_next$atomValues$get = next.atomValues.get(key)) === null || _next$atomValues$get === void 0 ? void 0 : _next$atomValues$get.contents) && getNode$4(key).shouldRestoreFromSnapshots) {\n            keysToUpdate.add(key);\n          }\n        }\n      }\n\n      keysToUpdate.forEach(key => {\n        setRecoilValueLoadable$1(storeRef.current, new AbstractRecoilValue$3(key), next.atomValues.has(key) ? Recoil_nullthrows(next.atomValues.get(key)) : DEFAULT_VALUE$3);\n      });\n      storeRef.current.replaceState(state => {\n        return { ...state,\n          stateID: snapshot.getID_INTERNAL()\n        };\n      });\n    });\n  }, [storeRef]);\n}\n\nfunction useSetUnvalidatedAtomValues() {\n  const storeRef = useStoreRef$1();\n  return (values, transactionMetadata = {}) => {\n    batchUpdates$2(() => {\n      storeRef.current.addTransactionMetadata(transactionMetadata);\n      values.forEach((value, key) => setUnvalidatedRecoilValue$2(storeRef.current, new AbstractRecoilValue$3(key), value));\n    });\n  };\n}\n\nclass Sentinel {}\n\nconst SENTINEL = new Sentinel();\n\nfunction useRecoilCallback(fn, deps) {\n  const storeRef = useStoreRef$1();\n  const gotoSnapshot = useGotoRecoilSnapshot();\n  return useCallback$1((...args) => {\n    function set(recoilState, newValueOrUpdater) {\n      setRecoilValue$2(storeRef.current, recoilState, newValueOrUpdater);\n    }\n\n    function reset(recoilState) {\n      setRecoilValue$2(storeRef.current, recoilState, DEFAULT_VALUE$3);\n    } // Use currentTree for the snapshot to show the currently committed state\n\n\n    const snapshot = cloneSnapshot$1(storeRef.current); // FIXME massive gains from doing this lazily\n\n    const atomicUpdate = atomicUpdater$1(storeRef.current);\n    let ret = SENTINEL;\n    batchUpdates$2(() => {\n      const errMsg = 'useRecoilCallback expects a function that returns a function: ' + 'it accepts a function of the type (RecoilInterface) => T = R ' + 'and returns a callback function T => R, where RecoilInterface is an ' + 'object {snapshot, set, ...} and T and R are the argument and return ' + 'types of the callback you want to create.  Please see the docs ' + 'at recoiljs.org for details.';\n\n      if (typeof fn !== 'function') {\n        throw new Error(errMsg);\n      } // flowlint-next-line unclear-type:off\n\n\n      const cb = fn({\n        set,\n        reset,\n        snapshot,\n        gotoSnapshot,\n        transact_UNSTABLE: atomicUpdate\n      });\n\n      if (typeof cb !== 'function') {\n        throw new Error(errMsg);\n      }\n\n      ret = cb(...args);\n    });\n    !!(ret instanceof Sentinel) ? process.env.NODE_ENV !== \"production\" ? Recoil_invariant(false, 'batchUpdates should return immediately') : Recoil_invariant(false) : void 0;\n    return ret;\n  }, deps != null ? [...deps, storeRef] : undefined // eslint-disable-line fb-www/react-hooks-deps\n  );\n} // I don't see a way to avoid the any type here because we want to accept readable\n// and writable values with any type parameter, but normally with writable ones\n// RecoilState<SomeT> is not a subtype of RecoilState<mixed>.\n// flowlint-line unclear-type:off\n\n\nfunction useRetain(toRetain) {\n  if (!Recoil_gkx_1('recoil_memory_managament_2020')) {\n    return;\n  } // eslint-disable-next-line fb-www/react-hooks\n\n\n  return useRetain_ACTUAL(toRetain);\n}\n\nfunction useRetain_ACTUAL(toRetain) {\n  const array = Array.isArray(toRetain) ? toRetain : [toRetain];\n  const retainables = array.map(a => a instanceof RetentionZone$3 ? a : a.key);\n  const storeRef = useStoreRef$1();\n  useEffect$1(() => {\n    if (!Recoil_gkx_1('recoil_memory_managament_2020')) {\n      return;\n    }\n\n    const store = storeRef.current;\n\n    if (timeoutID.current && !isSSR$2) {\n      // Already performed a temporary retain on render, simply cancel the release\n      // of that temporary retain.\n      window.clearTimeout(timeoutID.current);\n      timeoutID.current = null;\n    } else {\n      for (const r of retainables) {\n        updateRetainCount$2(store, r, 1);\n      }\n    }\n\n    return () => {\n      for (const r of retainables) {\n        updateRetainCount$2(store, r, -1);\n      }\n    }; // eslint-disable-next-line fb-www/react-hooks-deps\n  }, [storeRef, ...retainables]); // We want to retain if the component suspends. This is terrible but the Suspense\n  // API affords us no better option. If we suspend and never commit after some\n  // seconds, then release. The 'actual' retain/release in the effect above\n  // cancels this.\n\n  const timeoutID = useRef$2();\n  const previousRetainables = usePrevious(retainables);\n\n  if (!isSSR$2 && (previousRetainables === undefined || !Recoil_shallowArrayEqual(previousRetainables, retainables))) {\n    const store = storeRef.current;\n\n    for (const r of retainables) {\n      updateRetainCount$2(store, r, 1);\n    }\n\n    if (previousRetainables) {\n      for (const r of previousRetainables) {\n        updateRetainCount$2(store, r, -1);\n      }\n    }\n\n    if (timeoutID.current) {\n      window.clearTimeout(timeoutID.current);\n    }\n\n    timeoutID.current = window.setTimeout(() => {\n      timeoutID.current = null;\n\n      for (const r of retainables) {\n        updateRetainCount$2(store, r, -1);\n      }\n    }, SUSPENSE_TIMEOUT_MS);\n  }\n}\n\nfunction useRecoilTransaction(fn, deps) {\n  const storeRef = useStoreRef$1();\n  return useMemo$1(() => (...args) => {\n    const atomicUpdate = atomicUpdater$1(storeRef.current);\n    atomicUpdate(transactionInterface => {\n      fn(transactionInterface)(...args);\n    });\n  }, deps != null ? [...deps, storeRef] : undefined // eslint-disable-line fb-www/react-hooks-deps\n  );\n}\n\nvar Recoil_Hooks = {\n  recoilComponentGetRecoilValueCount_FOR_TESTING,\n  useGotoRecoilSnapshot,\n  useRecoilCallback,\n  useRecoilInterface: useRecoilInterface_DEPRECATED,\n  useRecoilSnapshot,\n  useRecoilState,\n  useRecoilStateLoadable,\n  useRecoilTransaction,\n  useRecoilTransactionObserver,\n  useRecoilValue,\n  useRecoilValueLoadable,\n  useRetain,\n  useResetRecoilState,\n  useSetRecoilState,\n  useSetUnvalidatedAtomValues,\n  useTransactionObservation_DEPRECATED,\n  useTransactionSubscription_DEPRECATED: useTransactionSubscription\n};\nconst {\n  peekNodeInfo: peekNodeInfo$2\n} = Recoil_FunctionalCore;\nconst {\n  useStoreRef: useStoreRef$2\n} = Recoil_RecoilRoot_react;\n\nfunction useGetRecoilValueInfo() {\n  const storeRef = useStoreRef$2();\n  return ({\n    key\n  }) => peekNodeInfo$2(storeRef.current, storeRef.current.getState().currentTree, key);\n}\n\nvar Recoil_useGetRecoilValueInfo = useGetRecoilValueInfo;\nconst {\n  RecoilRoot: RecoilRoot$1,\n  useStoreRef: useStoreRef$3\n} = Recoil_RecoilRoot_react;\nconst {\n  useMemo: useMemo$2\n} = react;\n\nfunction useRecoilBridgeAcrossReactRoots() {\n  const store = useStoreRef$3().current;\n  return useMemo$2(() => {\n    function RecoilBridge({\n      children\n    }) {\n      return /*#__PURE__*/react.createElement(RecoilRoot$1, {\n        store_INTERNAL: store\n      }, children);\n    }\n\n    return RecoilBridge;\n  }, [store]);\n}\n\nvar Recoil_useRecoilBridgeAcrossReactRoots = useRecoilBridgeAcrossReactRoots;\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nfunction isNode(object) {\n  var _ownerDocument, _doc$defaultView;\n\n  if (typeof window === 'undefined') {\n    return false;\n  }\n\n  const doc = object != null ? (_ownerDocument = object.ownerDocument) !== null && _ownerDocument !== void 0 ? _ownerDocument : object : document;\n  const defaultView = (_doc$defaultView = doc.defaultView) !== null && _doc$defaultView !== void 0 ? _doc$defaultView : window;\n  return !!(object != null && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));\n}\n\nvar Recoil_isNode = isNode;\nconst {\n  isReactNative: isReactNative$1,\n  isSSR: isSSR$3\n} = Recoil_Environment;\n\nfunction shouldNotBeFrozen(value) {\n  // Primitives and functions:\n  if (value === null || typeof value !== 'object') {\n    return true;\n  } // React elements:\n\n\n  switch (typeof value.$$typeof) {\n    case 'symbol':\n      return true;\n\n    case 'number':\n      return true;\n  } // Immutable structures:\n\n\n  if (value['@@__IMMUTABLE_ITERABLE__@@'] != null || value['@@__IMMUTABLE_KEYED__@@'] != null || value['@@__IMMUTABLE_INDEXED__@@'] != null || value['@@__IMMUTABLE_ORDERED__@@'] != null || value['@@__IMMUTABLE_RECORD__@@'] != null) {\n    return true;\n  } // DOM nodes:\n\n\n  if (Recoil_isNode(value)) {\n    return true;\n  }\n\n  if (Recoil_isPromise(value)) {\n    return true;\n  }\n\n  if (value instanceof Error) {\n    return true;\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return true;\n  } // Some environments, just as Jest, don't work with the instanceof check\n\n\n  if (!isSSR$3 && !isReactNative$1 && ( // $FlowFixMe(site=recoil) Window does not have a FlowType definition https://github.com/facebook/flow/issues/6709\n  value === window || value instanceof Window)) {\n    return true;\n  }\n\n  return false;\n} // Recursively freeze a value to enforce it is read-only.\n// This may also have minimal performance improvements for enumerating\n// objects (based on browser implementations, of course)\n\n\nfunction deepFreezeValue(value) {\n  if (typeof value !== 'object' || shouldNotBeFrozen(value)) {\n    return;\n  }\n\n  Object.freeze(value); // Make all properties read-only\n\n  for (const key in value) {\n    // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n    if (Object.prototype.hasOwnProperty.call(value, key)) {\n      const prop = value[key]; // Prevent infinite recurssion for circular references.\n\n      if (typeof prop === 'object' && prop != null && !Object.isFrozen(prop)) {\n        deepFreezeValue(prop);\n      }\n    }\n  }\n\n  Object.seal(value); // This also makes existing properties non-configurable.\n}\n\nvar Recoil_deepFreezeValue = deepFreezeValue;\nconst TIME_WARNING_THRESHOLD_MS = 15;\n\nfunction stringify(x, opt, key) {\n  // A optimization to avoid the more expensive JSON.stringify() for simple strings\n  // This may lose protection for u2028 and u2029, though.\n  if (typeof x === 'string' && !x.includes('\"') && !x.includes('\\\\')) {\n    return `\"${x}\"`;\n  } // Handle primitive types\n\n\n  switch (typeof x) {\n    case 'undefined':\n      return '';\n    // JSON.stringify(undefined) returns undefined, but we always want to return a string\n\n    case 'boolean':\n      return x ? 'true' : 'false';\n\n    case 'number':\n    case 'symbol':\n      // case 'bigint': // BigInt is not supported in www\n      return String(x);\n\n    case 'string':\n      // Add surrounding quotes and escape internal quotes\n      return JSON.stringify(x);\n\n    case 'function':\n      if ((opt === null || opt === void 0 ? void 0 : opt.allowFunctions) !== true) {\n        throw new Error('Attempt to serialize function in a Recoil cache key');\n      }\n\n      return `__FUNCTION(${x.name})__`;\n  }\n\n  if (x === null) {\n    return 'null';\n  } // Fallback case for unknown types\n\n\n  if (typeof x !== 'object') {\n    var _JSON$stringify;\n\n    return (_JSON$stringify = JSON.stringify(x)) !== null && _JSON$stringify !== void 0 ? _JSON$stringify : '';\n  } // Deal with all promises as equivalent for now.\n\n\n  if (Recoil_isPromise(x)) {\n    return '__PROMISE__';\n  } // Arrays handle recursive stringification\n\n\n  if (Array.isArray(x)) {\n    return `[${x.map((v, i) => stringify(v, opt, i.toString()))}]`;\n  } // If an object defines a toJSON() method, then use that to override the\n  // serialization.  This matches the behavior of JSON.stringify().\n  // Pass the key for compatibility.\n  // Immutable.js collections define this method to allow us to serialize them.\n\n\n  if (typeof x.toJSON === 'function') {\n    // flowlint-next-line unclear-type: off\n    return stringify(x.toJSON(key), opt, key);\n  } // For built-in Maps, sort the keys in a stable order instead of the\n  // default insertion order.  Support non-string keys.\n\n\n  if (x instanceof Map) {\n    const obj = {};\n\n    for (const [k, v] of x) {\n      // Stringify will escape any nested quotes\n      obj[typeof k === 'string' ? k : stringify(k, opt)] = v;\n    }\n\n    return stringify(obj, opt, key);\n  } // For built-in Sets, sort the keys in a stable order instead of the\n  // default insertion order.\n\n\n  if (x instanceof Set) {\n    return stringify(Array.from(x).sort((a, b) => stringify(a, opt).localeCompare(stringify(b, opt))), opt, key);\n  } // Anything else that is iterable serialize as an Array.\n\n\n  if (Symbol !== undefined && x[Symbol.iterator] != null && typeof x[Symbol.iterator] === 'function') {\n    // flowlint-next-line unclear-type: off\n    return stringify(Array.from(x), opt, key);\n  } // For all other Objects, sort the keys in a stable order.\n\n\n  return `{${Object.keys(x).filter(key => x[key] !== undefined).sort() // stringify the key to add quotes and escape any nested slashes or quotes.\n  .map(key => `${stringify(key, opt)}:${stringify(x[key], opt, key)}`).join(',')}}`;\n} // Utility similar to JSON.stringify() except:\n// * Serialize built-in Sets as an Array\n// * Serialize built-in Maps as an Object.  Supports non-string keys.\n// * Serialize other iterables as arrays\n// * Sort the keys of Objects and Maps to have a stable order based on string conversion.\n//    This overrides their default insertion order.\n// * Still uses toJSON() of any object to override serialization\n// * Support Symbols (though don't guarantee uniqueness)\n// * We could support BigInt, but Flow doesn't seem to like it.\n// See Recoil_stableStringify-test.js for examples\n\n\nfunction stableStringify(x, opt = {\n  allowFunctions: false\n}) {\n  if (process.env.NODE_ENV !== \"production\") {\n    if (typeof window !== 'undefined') {\n      const startTime = window.performance ? window.performance.now() : 0;\n      const str = stringify(x, opt);\n      const endTime = window.performance ? window.performance.now() : 0;\n\n      if (endTime - startTime > TIME_WARNING_THRESHOLD_MS) {\n        /* eslint-disable fb-www/no-console */\n        console.groupCollapsed(`Recoil: Spent ${endTime - startTime}ms computing a cache key`);\n        console.warn(x, str);\n        console.groupEnd();\n        /* eslint-enable fb-www/no-console */\n      }\n\n      return str;\n    }\n  }\n\n  return stringify(x, opt);\n}\n\nvar Recoil_stableStringify = stableStringify;\n\nclass TreeCache {\n  constructor(options) {\n    var _options$onHit, _options$onSet, _options$mapNodeValue;\n\n    _defineProperty(this, \"_numLeafs\", void 0);\n\n    _defineProperty(this, \"_root\", void 0);\n\n    _defineProperty(this, \"_onHit\", void 0);\n\n    _defineProperty(this, \"_onSet\", void 0);\n\n    _defineProperty(this, \"_mapNodeValue\", void 0);\n\n    this._numLeafs = 0;\n    this._root = null;\n    this._onHit = (_options$onHit = options === null || options === void 0 ? void 0 : options.onHit) !== null && _options$onHit !== void 0 ? _options$onHit : () => {};\n    this._onSet = (_options$onSet = options === null || options === void 0 ? void 0 : options.onSet) !== null && _options$onSet !== void 0 ? _options$onSet : () => {};\n    this._mapNodeValue = (_options$mapNodeValue = options === null || options === void 0 ? void 0 : options.mapNodeValue) !== null && _options$mapNodeValue !== void 0 ? _options$mapNodeValue : val => val;\n  }\n\n  size() {\n    return this._numLeafs;\n  } // TODO: nodeCount(): number\n\n\n  root() {\n    return this._root;\n  }\n\n  get(getNodeValue, handlers) {\n    var _this$getLeafNode;\n\n    return (_this$getLeafNode = this.getLeafNode(getNodeValue, handlers)) === null || _this$getLeafNode === void 0 ? void 0 : _this$getLeafNode.value;\n  }\n\n  getLeafNode(getNodeValue, handlers) {\n    return findLeaf(this.root(), nodeKey => this._mapNodeValue(getNodeValue(nodeKey)), {\n      onNodeVisit: node => {\n        handlers === null || handlers === void 0 ? void 0 : handlers.onNodeVisit(node);\n\n        if (node.type === 'leaf') {\n          this._onHit(node);\n        }\n      }\n    });\n  }\n\n  set(route, value, handlers) {\n    let leafNode;\n    const newRoot = addLeaf(this.root(), route.map(([nodeKey, nodeValue]) => [nodeKey, this._mapNodeValue(nodeValue)]), null, value, null, {\n      onNodeVisit: node => {\n        handlers === null || handlers === void 0 ? void 0 : handlers.onNodeVisit(node);\n\n        if (node.type === 'leaf') {\n          leafNode = node;\n        }\n      }\n    });\n\n    if (!this.root()) {\n      this._root = newRoot;\n    }\n\n    this._numLeafs++;\n\n    this._onSet(Recoil_nullthrows(leafNode));\n  }\n\n  delete(node) {\n    if (!this.root()) {\n      return false;\n    }\n\n    const root = Recoil_nullthrows(this.root());\n    const existsInTree = pruneNodeFromTree(root, node, node.parent);\n\n    if (!existsInTree) {\n      return false;\n    }\n\n    if (node === root || root.type === 'branch' && !root.branches.size) {\n      this._root = null;\n      this._numLeafs = 0;\n      return true;\n    }\n\n    this._numLeafs -= countDownstreamLeaves(node);\n    return true;\n  }\n\n  clear() {\n    this._numLeafs = 0;\n    this._root = null;\n  }\n\n}\n\nconst findLeaf = (root, getNodeValue, handlers) => {\n  var _handlers$onNodeVisit;\n\n  if (root == null) {\n    return undefined;\n  }\n\n  handlers === null || handlers === void 0 ? void 0 : (_handlers$onNodeVisit = handlers.onNodeVisit) === null || _handlers$onNodeVisit === void 0 ? void 0 : _handlers$onNodeVisit.call(handlers, root);\n\n  if (root.type === 'leaf') {\n    return root;\n  }\n\n  const nodeValue = getNodeValue(root.nodeKey);\n  return findLeaf(root.branches.get(nodeValue), getNodeValue, handlers);\n};\n\nconst addLeaf = (root, route, parent, value, branchKey, handlers) => {\n  var _handlers$onNodeVisit2;\n\n  let node;\n\n  if (root == null) {\n    if (route.length === 0) {\n      node = {\n        type: 'leaf',\n        value,\n        parent,\n        branchKey\n      };\n    } else {\n      const [path, ...rest] = route;\n      const [nodeKey, nodeValue] = path;\n      node = {\n        type: 'branch',\n        nodeKey,\n        parent,\n        branches: new Map(),\n        branchKey\n      };\n      node.branches.set(nodeValue, addLeaf(null, rest, node, value, nodeValue, handlers));\n    }\n  } else {\n    node = root;\n\n    if (route.length) {\n      const [path, ...rest] = route;\n      const [nodeKey, nodeValue] = path;\n      !(root.type === 'branch' && root.nodeKey === nodeKey) ? process.env.NODE_ENV !== \"production\" ? Recoil_invariant(false, 'Existing cache must have a branch midway through the route with matching node key') : Recoil_invariant(false) : void 0;\n      root.branches.set(nodeValue, addLeaf(root.branches.get(nodeValue), rest, root, value, nodeValue, handlers));\n    }\n  }\n\n  handlers === null || handlers === void 0 ? void 0 : (_handlers$onNodeVisit2 = handlers.onNodeVisit) === null || _handlers$onNodeVisit2 === void 0 ? void 0 : _handlers$onNodeVisit2.call(handlers, node);\n  return node;\n};\n\nconst pruneNodeFromTree = (root, node, parent) => {\n  if (!parent) {\n    return root === node;\n  }\n\n  parent.branches.delete(node.branchKey);\n  return pruneUpstreamBranches(root, parent, parent.parent);\n};\n\nconst pruneUpstreamBranches = (root, branchNode, parent) => {\n  if (!parent) {\n    return root === branchNode;\n  }\n\n  if (branchNode.branches.size === 0) {\n    parent.branches.delete(branchNode.branchKey);\n  }\n\n  return pruneUpstreamBranches(root, parent, parent.parent);\n};\n\nconst countDownstreamLeaves = node => node.type === 'leaf' ? 1 : Array.from(node.branches.values()).reduce((sum, currNode) => sum + countDownstreamLeaves(currNode), 0);\n\nvar Recoil_TreeCache = {\n  TreeCache\n};\nvar Recoil_TreeCache_1 = Recoil_TreeCache.TreeCache;\nvar Recoil_TreeCache$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  TreeCache: Recoil_TreeCache_1\n});\n\nclass LRUCache {\n  constructor(options) {\n    var _options$mapKey;\n\n    _defineProperty(this, \"_maxSize\", void 0);\n\n    _defineProperty(this, \"_size\", void 0);\n\n    _defineProperty(this, \"_head\", void 0);\n\n    _defineProperty(this, \"_tail\", void 0);\n\n    _defineProperty(this, \"_map\", void 0);\n\n    _defineProperty(this, \"_keyMapper\", void 0);\n\n    this._maxSize = options.maxSize;\n    this._size = 0;\n    this._head = null;\n    this._tail = null;\n    this._map = new Map();\n    this._keyMapper = (_options$mapKey = options.mapKey) !== null && _options$mapKey !== void 0 ? _options$mapKey : v => v;\n  }\n\n  head() {\n    return this._head;\n  }\n\n  tail() {\n    return this._tail;\n  }\n\n  size() {\n    return this._size;\n  }\n\n  maxSize() {\n    return this._maxSize;\n  }\n\n  has(key) {\n    return this._map.has(this._keyMapper(key));\n  }\n\n  get(key) {\n    const mappedKey = this._keyMapper(key);\n\n    const node = this._map.get(mappedKey);\n\n    if (!node) {\n      return undefined;\n    }\n\n    this.set(key, node.value);\n    return node.value;\n  }\n\n  set(key, val) {\n    const mappedKey = this._keyMapper(key);\n\n    const existingNode = this._map.get(mappedKey);\n\n    if (existingNode) {\n      this.delete(key);\n    }\n\n    const head = this.head();\n    const node = {\n      key,\n      right: head,\n      left: null,\n      value: val\n    };\n\n    if (head) {\n      head.left = node;\n    } else {\n      this._tail = node;\n    }\n\n    this._map.set(mappedKey, node);\n\n    this._head = node;\n    this._size++;\n\n    this._maybeDeleteLRU();\n  }\n\n  _maybeDeleteLRU() {\n    if (this.size() > this.maxSize()) {\n      this.deleteLru();\n    }\n  }\n\n  deleteLru() {\n    const tail = this.tail();\n\n    if (tail) {\n      this.delete(tail.key);\n    }\n  }\n\n  delete(key) {\n    const mappedKey = this._keyMapper(key);\n\n    if (!this._size || !this._map.has(mappedKey)) {\n      return;\n    }\n\n    const node = Recoil_nullthrows(this._map.get(mappedKey));\n    const right = node.right;\n    const left = node.left;\n\n    if (right) {\n      right.left = node.left;\n    }\n\n    if (left) {\n      left.right = node.right;\n    }\n\n    if (node === this.head()) {\n      this._head = right;\n    }\n\n    if (node === this.tail()) {\n      this._tail = left;\n    }\n\n    this._map.delete(mappedKey);\n\n    this._size--;\n  }\n\n  clear() {\n    this._size = 0;\n    this._head = null;\n    this._tail = null;\n    this._map = new Map();\n  }\n\n}\n\nvar Recoil_LRUCache = {\n  LRUCache\n};\nvar Recoil_LRUCache_1 = Recoil_LRUCache.LRUCache;\nvar Recoil_LRUCache$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  LRUCache: Recoil_LRUCache_1\n});\nconst {\n  LRUCache: LRUCache$1\n} = Recoil_LRUCache$1;\nconst {\n  TreeCache: TreeCache$1\n} = Recoil_TreeCache$1;\n\nfunction treeCacheLRU(maxSize, mapNodeValue = v => v) {\n  const lruCache = new LRUCache$1({\n    maxSize\n  });\n  const cache = new TreeCache$1({\n    mapNodeValue,\n    onHit: node => {\n      lruCache.set(node, true);\n    },\n    onSet: node => {\n      const lruNode = lruCache.tail();\n      lruCache.set(node, true);\n\n      if (lruNode && cache.size() > maxSize) {\n        cache.delete(lruNode.key);\n      }\n    }\n  }); // $FlowFixMe[method-unbinding]\n\n  return cache;\n}\n\nvar Recoil_treeCacheLRU = treeCacheLRU;\nconst {\n  TreeCache: TreeCache$2\n} = Recoil_TreeCache$1;\nconst defaultPolicy = {\n  equality: 'reference',\n  eviction: 'keep-all',\n  maxSize: Infinity\n};\n\nfunction treeCacheFromPolicy({\n  equality = defaultPolicy.equality,\n  eviction = defaultPolicy.eviction,\n  maxSize = defaultPolicy.maxSize\n} = defaultPolicy) {\n  const valueMapper = getValueMapper(equality);\n  const treeCache = getTreeCache(eviction, maxSize, valueMapper);\n  return treeCache;\n}\n\nfunction getValueMapper(equality) {\n  switch (equality) {\n    case 'reference':\n      return val => val;\n\n    case 'value':\n      return val => Recoil_stableStringify(val);\n  }\n\n  throw new Error(`Unrecognized equality policy ${equality}`);\n}\n\nfunction getTreeCache(eviction, maxSize, mapNodeValue) {\n  switch (eviction) {\n    case 'keep-all':\n      // $FlowFixMe[method-unbinding]\n      return new TreeCache$2({\n        mapNodeValue\n      });\n\n    case 'lru':\n      return Recoil_treeCacheLRU(Recoil_nullthrows(maxSize), mapNodeValue);\n\n    case 'most-recent':\n      return Recoil_treeCacheLRU(1, mapNodeValue);\n  }\n\n  throw new Error(`Unrecognized eviction policy ${eviction}`);\n}\n\nvar Recoil_treeCacheFromPolicy = treeCacheFromPolicy;\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n *\n * This is a stub for some integration into FB internal stuff\n */\n\nfunction startPerfBlock(_id) {\n  return () => null;\n}\n\nvar Recoil_PerformanceTimings = {\n  startPerfBlock\n};\nconst {\n  CANCELED: CANCELED$2,\n  Canceled: Canceled$1,\n  loadableWithError: loadableWithError$1,\n  loadableWithPromise: loadableWithPromise$1,\n  loadableWithValue: loadableWithValue$2\n} = Recoil_Loadable;\nconst {\n  getNodeLoadable: getNodeLoadable$2,\n  peekNodeLoadable: peekNodeLoadable$1,\n  setNodeValue: setNodeValue$3\n} = Recoil_FunctionalCore;\nconst {\n  saveDependencyMapToStore: saveDependencyMapToStore$1\n} = Recoil_Graph;\nconst {\n  DEFAULT_VALUE: DEFAULT_VALUE$4,\n  RecoilValueNotReady: RecoilValueNotReady$2,\n  getConfigDeletionHandler: getConfigDeletionHandler$1,\n  registerNode: registerNode$1\n} = Recoil_Node;\nconst {\n  isRecoilValue: isRecoilValue$3\n} = Recoil_RecoilValue$1;\nconst {\n  AbstractRecoilValue: AbstractRecoilValue$4\n} = Recoil_RecoilValue$1;\nconst {\n  setRecoilValueLoadable: setRecoilValueLoadable$2\n} = Recoil_RecoilValueInterface;\nconst {\n  retainedByOptionWithDefault: retainedByOptionWithDefault$1\n} = Recoil_Retention;\nconst {\n  cloneSnapshot: cloneSnapshot$2\n} = Recoil_Snapshot$1;\nconst {\n  startPerfBlock: startPerfBlock$1\n} = Recoil_PerformanceTimings;\nconst dependencyStack = []; // for detecting circular dependencies.\n\nconst waitingStores = new Map();\n/* eslint-disable no-redeclare */\n\nconst getNewExecutionId = (() => {\n  let executionId = 0;\n  return () => executionId++;\n})();\n\nfunction getInitialExecutionInfo() {\n  return {\n    depValuesDiscoveredSoFarDuringAsyncWork: null,\n    latestLoadable: null,\n    latestExecutionId: null,\n    stateVersion: null\n  };\n}\n\nfunction selector(options) {\n  const {\n    key,\n    get,\n    cachePolicy_UNSTABLE: cachePolicy\n  } = options;\n  const set = options.set != null ? options.set : undefined; // flow\n\n  const cache = Recoil_treeCacheFromPolicy(cachePolicy !== null && cachePolicy !== void 0 ? cachePolicy : {\n    equality: 'reference',\n    eviction: 'keep-all'\n  });\n  const retainedBy = retainedByOptionWithDefault$1(options.retainedBy_UNSTABLE);\n  const executionInfoMap = new Map();\n  let liveStoresCount = 0;\n\n  function selectorIsLive() {\n    return !Recoil_gkx_1('recoil_memory_managament_2020') || liveStoresCount > 0;\n  }\n\n  function getExecutionInfo(store) {\n    if (!executionInfoMap.has(store)) {\n      executionInfoMap.set(store, getInitialExecutionInfo());\n    }\n\n    return Recoil_nullthrows(executionInfoMap.get(store));\n  }\n\n  function selectorInit(store) {\n    liveStoresCount++;\n    store.getState().knownSelectors.add(key); // FIXME remove knownSelectors?\n\n    return () => {\n      liveStoresCount--;\n      store.getState().knownSelectors.delete(key);\n      executionInfoMap.delete(store);\n    };\n  }\n\n  function selectorShouldDeleteConfigOnRelease() {\n    return getConfigDeletionHandler$1(key) !== undefined && !selectorIsLive();\n  }\n\n  function notifyStoreWhenAsyncSettles(store, loadable, executionId) {\n    if (loadable.state === 'loading') {\n      let stores = waitingStores.get(executionId);\n\n      if (stores == null) {\n        waitingStores.set(executionId, stores = new Set());\n      }\n\n      stores.add(store);\n    }\n  }\n\n  function notifyStoresOfSettledAsync(newLoadable, executionId) {\n    const stores = waitingStores.get(executionId);\n\n    if (stores !== undefined) {\n      for (const store of stores) {\n        setRecoilValueLoadable$2(store, new AbstractRecoilValue$4(key), newLoadable);\n      }\n\n      waitingStores.delete(executionId);\n    }\n  }\n\n  function getCachedNodeLoadable(store, state, key) {\n    const isKeyPointingToSelector = store.getState().knownSelectors.has(key);\n    /**\n     * It's important that we don't bypass calling getNodeLoadable for atoms\n     * as getNodeLoadable has side effects in state\n     */\n\n    if (isKeyPointingToSelector && state.atomValues.has(key)) {\n      return Recoil_nullthrows(state.atomValues.get(key));\n    }\n\n    const loadable = getNodeLoadable$2(store, state, key);\n\n    if (loadable.state !== 'loading' && isKeyPointingToSelector) {\n      state.atomValues.set(key, loadable);\n    }\n\n    return loadable;\n  }\n  /**\n   * This function attaches a then() and a catch() to a promise that was\n   * returned from a selector's get() (either explicitly or implicitly by\n   * running a function that uses the \"async\" keyword). If a selector's get()\n   * returns a promise, we have two possibilities:\n   *\n   * 1. The promise will resolve, in which case it will have completely finished\n   *    executing without any remaining pending dependencies. No more retries\n   *    are needed and we can proceed with updating the cache and notifying\n   *    subscribers (if it is the latest execution, otherwise only the cache\n   *    will be updated and subscriptions will not be fired). This is the case\n   *    handled by the attached then() handler.\n   *\n   * 2. The promise will throw because it either has an error or it came across\n   *    an async dependency that has not yet resolved, in which case we will\n   *    call wrapDepdencyPromise(), whose responsibility is to handle dependency\n   *    promises. This case is handled by the attached catch() handler.\n   *\n   * Both branches will eventually resolve to the final result of the selector\n   * (or an error if a real error occurred).\n   *\n   * The execution will run to completion even if it is stale, and its value\n   * will be cached. But stale executions will not update global state or update\n   * executionInfo as that is the responsibility of the 'latest' execution.\n   *\n   * Note this function should not be passed a promise that was thrown--AKA a\n   * dependency promise. Dependency promises should be passed to\n   * wrapPendingDependencyPromise()).\n   */\n\n\n  function wrapPendingPromise(store, promise, state, depValues, executionId) {\n    return promise.then(value => {\n      if (!selectorIsLive()) {\n        // The selector was released since the request began; ignore the response.\n        clearExecutionInfo(store, executionId);\n        return CANCELED$2;\n      }\n\n      const loadable = loadableWithValue$2(value);\n      maybeFreezeValue(value);\n      setCache(state, depValuesToDepRoute(depValues), loadable);\n      setDepsInStore(store, state, new Set(depValues.keys()), executionId);\n      setLoadableInStoreToNotifyDeps(store, loadable, executionId);\n      return {\n        __value: value,\n        __key: key\n      };\n    }).catch(errorOrPromise => {\n      if (!selectorIsLive()) {\n        // The selector was released since the request began; ignore the response.\n        clearExecutionInfo(store, executionId);\n        return CANCELED$2;\n      }\n\n      if (isLatestExecution(store, executionId)) {\n        updateExecutionInfoDepValues(depValues, store, executionId);\n      }\n\n      if (Recoil_isPromise(errorOrPromise)) {\n        return wrapPendingDependencyPromise(store, errorOrPromise, state, depValues, executionId);\n      }\n\n      const loadable = loadableWithError$1(errorOrPromise);\n      maybeFreezeValue(errorOrPromise);\n      setCache(state, depValuesToDepRoute(depValues), loadable);\n      setDepsInStore(store, state, new Set(depValues.keys()), executionId);\n      setLoadableInStoreToNotifyDeps(store, loadable, executionId);\n      throw errorOrPromise;\n    });\n  }\n  /**\n   * This function attaches a then() and a catch() to a promise that was\n   * thrown from a selector's get(). If a selector's get() throws a promise,\n   * we have two possibilities:\n   *\n   * 1. The promise will resolve, meaning one of our selector's dependencies is\n   *    now available and we should \"retry\" our get() by running it again. This\n   *    is the case handled by the attached then() handler.\n   *\n   * 2. The promise will throw because something went wrong with the dependency\n   *    promise (in other words a real error occurred). This case is handled by\n   *    the attached catch() handler. If the dependency promise throws, it is\n   *    _always_ a real error and not another dependency promise (any dependency\n   *    promises would have been handled upstream).\n   *\n   * The then() branch will eventually resolve to the final result of the\n   * selector (or an error if a real error occurs), and the catch() will always\n   * resolve to an error because the dependency promise is a promise that was\n   * wrapped upstream, meaning it will only resolve to its real value or to a\n   * real error.\n   *\n   * The execution will run to completion even if it is stale, and its value\n   * will be cached. But stale executions will not update global state or update\n   * executionInfo as that is the responsibility of the 'latest' execution.\n   *\n   * Note this function should not be passed a promise that was returned from\n   * get(). The intention is that this function is only passed promises that\n   * were thrown due to a pending dependency. Promises returned by get() should\n   * be passed to wrapPendingPromise() instead.\n   */\n\n\n  function wrapPendingDependencyPromise(store, promise, state, existingDeps, executionId) {\n    return promise.then(resolvedDep => {\n      if (!selectorIsLive()) {\n        // The selector was released since the request began; ignore the response.\n        clearExecutionInfo(store, executionId);\n        return CANCELED$2;\n      }\n\n      if (resolvedDep instanceof Canceled$1) {\n        Recoil_recoverableViolation('Selector was released while it had dependencies');\n        return CANCELED$2;\n      }\n\n      const {\n        __key: resolvedDepKey,\n        __value: depValue\n      } = resolvedDep !== null && resolvedDep !== void 0 ? resolvedDep : {};\n      /**\n       * We need to bypass the selector dep cache if the resolved dep was a\n       * user-thrown promise because the selector dep cache will contain the\n       * stale values of dependencies, causing an infinite evaluation loop.\n       */\n\n      let bypassSelectorDepCacheOnReevaluation = true;\n\n      if (resolvedDepKey != null) {\n        /**\n         * Note for async atoms, this means we are changing the atom's value\n         * in the store for the given version. This should be alright because\n         * the version of state is now stale and a new version will have\n         * already been triggered by the atom being resolved (see this logic\n         * in Recoil_atom.js)\n         */\n        state.atomValues.set(resolvedDepKey, loadableWithValue$2(depValue));\n        /**\n         * We've added the resolved dependency to the selector dep cache, so\n         * there's no need to bypass the cache\n         */\n\n        bypassSelectorDepCacheOnReevaluation = false;\n      }\n      /**\n       * Optimization: Now that the dependency has resolved, let's try hitting\n       * the cache in case the dep resolved to a value we have previously seen.\n       *\n       * TODO:\n       * Note this optimization is not perfect because it only prevents re-executions\n       * _after_ the point where an async dependency is found. Any code leading\n       * up to the async dependency may have run unnecessarily. The ideal case\n       * would be to wait for the async dependency to resolve first, check the\n       * cache, and prevent _any_ execution of the selector if the resulting\n       * value of the dependency leads to a path that is found in the cache.\n       * The ideal case is more difficult to implement as it would require that\n       * we capture and wait for the the async dependency right after checking\n       * the cache. The current approach takes advantage of the fact that running\n       * the selector already has a code path that lets use exit early when\n       * an async dep resolves.\n       */\n\n\n      const cachedLoadable = getValFromCacheAndUpdatedDownstreamDeps(store, state);\n\n      if (cachedLoadable && cachedLoadable.state === 'hasValue') {\n        setExecutionInfo(cachedLoadable, store);\n        return {\n          __value: cachedLoadable.contents,\n          __key: key\n        };\n      }\n\n      const [loadable, depValues] = evaluateSelectorGetter(store, state, executionId, bypassSelectorDepCacheOnReevaluation);\n\n      if (isLatestExecution(store, executionId)) {\n        updateExecutionInfoDepValues(depValues, store, executionId);\n      }\n\n      maybeFreezeLoadableContents(loadable);\n\n      if (loadable.state !== 'loading') {\n        setCache(state, depValuesToDepRoute(depValues), loadable);\n        setDepsInStore(store, state, new Set(depValues.keys()), executionId);\n        setLoadableInStoreToNotifyDeps(store, loadable, executionId);\n      }\n\n      if (loadable.state === 'hasError') {\n        throw loadable.contents;\n      }\n\n      if (loadable.state === 'hasValue') {\n        return {\n          __value: loadable.contents,\n          __key: key\n        };\n      }\n      /**\n       * Returning promise here without wrapping as the wrapepr logic was\n       * already done when we called evaluateSelectorGetter() to get this\n       * loadable\n       */\n\n\n      return loadable.contents;\n    }).catch(error => {\n      if (!selectorIsLive()) {\n        // The selector was released since the request began; ignore the response.\n        clearExecutionInfo(store, executionId);\n        return CANCELED$2;\n      }\n\n      const loadable = loadableWithError$1(error);\n      maybeFreezeValue(error);\n      setCache(state, depValuesToDepRoute(existingDeps), loadableWithError$1(error));\n      setDepsInStore(store, state, new Set(existingDeps.keys()), executionId);\n      setLoadableInStoreToNotifyDeps(store, loadable, executionId);\n      throw error;\n    });\n  }\n\n  function setLoadableInStoreToNotifyDeps(store, loadable, executionId) {\n    if (isLatestExecution(store, executionId)) {\n      setExecutionInfo(loadable, store);\n      notifyStoresOfSettledAsync(loadable, executionId);\n    }\n  }\n\n  function setDepsInStore(store, state, deps, executionId) {\n    var _store$getState, _store$getState$curre, _store$getState2, _store$getState2$next;\n\n    if (isLatestExecution(store, executionId) || state.version === ((_store$getState = store.getState()) === null || _store$getState === void 0 ? void 0 : (_store$getState$curre = _store$getState.currentTree) === null || _store$getState$curre === void 0 ? void 0 : _store$getState$curre.version) || state.version === ((_store$getState2 = store.getState()) === null || _store$getState2 === void 0 ? void 0 : (_store$getState2$next = _store$getState2.nextTree) === null || _store$getState2$next === void 0 ? void 0 : _store$getState2$next.version)) {\n      var _store$getState$nextT, _store$getState3, _store$getState3$next;\n\n      saveDependencyMapToStore$1(new Map([[key, deps]]), store, (_store$getState$nextT = (_store$getState3 = store.getState()) === null || _store$getState3 === void 0 ? void 0 : (_store$getState3$next = _store$getState3.nextTree) === null || _store$getState3$next === void 0 ? void 0 : _store$getState3$next.version) !== null && _store$getState$nextT !== void 0 ? _store$getState$nextT : store.getState().currentTree.version);\n    }\n  }\n\n  function setNewDepInStore(store, state, deps, newDepKey, executionId) {\n    deps.add(newDepKey);\n    setDepsInStore(store, state, deps, executionId);\n  }\n\n  function evaluateSelectorGetter(store, state, executionId, bypassSelectorDepCache = false) {\n    const endPerfBlock = startPerfBlock$1(key); // TODO T63965866: use execution ID here\n\n    let result;\n    let resultIsError = false;\n    let loadable;\n    const depValues = new Map();\n    /**\n     * Starting a fresh set of deps that we'll be using to update state. We're\n     * starting a new set versus adding it in existing state deps because\n     * the version of state that we update deps for may be a more recent version\n     * than the version the selector was called with. This is because the latest\n     * execution will update the deps of the current/latest version of state (\n     * this is safe to do because the fact that the selector is the latest\n     * execution means the deps we discover below are our best guess at the\n     * deps for the current/latest state in the store)\n     */\n\n    const deps = new Set();\n    setDepsInStore(store, state, deps, executionId);\n\n    function getRecoilValue(recoilValue) {\n      const {\n        key: depKey\n      } = recoilValue;\n      setNewDepInStore(store, state, deps, depKey, executionId);\n      const depLoadable = bypassSelectorDepCache ? getNodeLoadable$2(store, state, depKey) : getCachedNodeLoadable(store, state, depKey);\n      maybeFreezeLoadableContents(depLoadable);\n      depValues.set(depKey, depLoadable);\n\n      if (depLoadable.state === 'hasValue') {\n        return depLoadable.contents;\n      }\n\n      throw depLoadable.contents;\n    }\n\n    let gateCallback = false;\n\n    const getCallback = fn => {\n      return (...args) => {\n        if (!gateCallback) {\n          throw new Error('getCallback() should only be called asynchronously after the selector is evalutated.  It can be used for selectors to return objects with callbacks that can obtain the current Recoil state without a subscription.');\n        }\n\n        const snapshot = cloneSnapshot$2(store);\n        const cb = fn({\n          snapshot\n        });\n\n        if (typeof cb !== 'function') {\n          throw new Error('getCallback() expects a function that returns a function.');\n        }\n\n        return cb(...args);\n      };\n    };\n\n    try {\n      result = get({\n        get: getRecoilValue,\n        getCallback\n      });\n      result = isRecoilValue$3(result) ? getRecoilValue(result) : result;\n      gateCallback = true;\n\n      if (Recoil_isPromise(result)) {\n        result = wrapPendingPromise(store, result, state, depValues, executionId).finally(endPerfBlock);\n      } else {\n        endPerfBlock();\n      }\n    } catch (errorOrDepPromise) {\n      result = errorOrDepPromise;\n\n      if (Recoil_isPromise(result)) {\n        result = wrapPendingDependencyPromise(store, result, state, depValues, executionId).finally(endPerfBlock);\n      } else {\n        resultIsError = true;\n        endPerfBlock();\n      }\n    }\n\n    if (resultIsError) {\n      loadable = loadableWithError$1(result);\n    } else if (Recoil_isPromise(result)) {\n      loadable = loadableWithPromise$1(result);\n    } else {\n      loadable = loadableWithValue$2(result);\n    }\n\n    maybeFreezeLoadableContents(loadable);\n    return [loadable, depValues];\n  }\n\n  function getValFromCacheAndUpdatedDownstreamDeps(store, state) {\n    const depsAfterCacheDone = new Set();\n    const executionInfo = getExecutionInfo(store);\n    const cachedVal = cache.get(nodeKey => {\n      !(typeof nodeKey === 'string') ? process.env.NODE_ENV !== \"production\" ? Recoil_invariant(false, 'Cache nodeKey is type string') : Recoil_invariant(false) : void 0;\n      const loadable = getCachedNodeLoadable(store, state, nodeKey);\n      return loadable.contents;\n    }, {\n      onNodeVisit: node => {\n        if (node.type === 'branch' && node.nodeKey !== key && typeof node.nodeKey === 'string') {\n          depsAfterCacheDone.add(node.nodeKey);\n        }\n      }\n    });\n    /**\n     * Ensure store contains correct dependencies if we hit the cache so that\n     * the store deps and cache are in sync for a given state. This is important\n     * because store deps are normally updated when new executions are created,\n     * but cache hits don't trigger new executions but they still _may_ signifiy\n     * a change in deps in the store if the store deps for this state are empty\n     * or stale.\n     */\n\n    if (cachedVal) {\n      setDepsInStore(store, state, depsAfterCacheDone, executionInfo.latestExecutionId);\n    }\n\n    return cachedVal;\n  }\n  /**\n   * FIXME: dep keys should take into account the state of the loadable to\n   * prevent the edge case where a loadable with an error and a loadable with\n   * an error as a value are treated as the same thing incorrectly. For example\n   * these two should be treated differently:\n   *\n   * selector({key: '', get: () => new Error('hi')});\n   * selector({key: '', get () => {throw new Error('hi')}});\n   *\n   * With current implementation they are treated the same\n   */\n\n\n  function depValuesToDepRoute(depValues) {\n    return Array.from(depValues.entries()).map(([key, valLoadable]) => [key, valLoadable.contents]);\n  }\n\n  function getValFromRunningNewExecutionAndUpdatedDeps(store, state) {\n    const newExecutionId = getNewExecutionId();\n    const [loadable, newDepValues] = evaluateSelectorGetter(store, state, newExecutionId);\n    setExecutionInfo(loadable, store, newDepValues, newExecutionId, state);\n    maybeSetCacheWithLoadable(state, depValuesToDepRoute(newDepValues), loadable);\n    notifyStoreWhenAsyncSettles(store, loadable, newExecutionId);\n    return loadable;\n  }\n  /**\n   * Given a tree state, this function returns the \"selector result\", which is\n   * defined as a size-2 tuple of [DependencyMap, Loadable<T>].\n   *\n   * The selector's get() function will only be re-evaluated if _both_ of the\n   * following statements are true:\n   *\n   * 1. The current dep values from the given state produced a cache key that\n   *    was not found in the cache.\n   * 2. There is no currently running async execution OR there is an\n   *    async execution that is running, but after comparing the dep values in\n   *    the given state with the dep values that the execution has discovered so\n   *    far we find that at least one dep value has changed, in which case we\n   *    start a new execution (the previously running execution will continue to\n   *    run to completion, but only the new execution will be deemed the\n   *    'latest' execution, meaning it will be the only execution that will\n   *    update global state when it is finished. Any non-latest executions will\n   *    run to completion and update the selector cache but not global state).\n   */\n\n\n  function getSelectorValAndUpdatedDeps(store, state) {\n    const cachedVal = getValFromCacheAndUpdatedDownstreamDeps(store, state);\n\n    if (cachedVal != null) {\n      setExecutionInfo(cachedVal, store);\n      return cachedVal;\n    }\n\n    const inProgressExecutionInfo = getExecutionInfoOfInProgressExecution(store, state); // FIXME: this won't work with custom caching b/c it uses separate cache\n\n    if (inProgressExecutionInfo) {\n      const executionInfo = inProgressExecutionInfo;\n      notifyStoreWhenAsyncSettles(store, Recoil_nullthrows(executionInfo.latestLoadable), Recoil_nullthrows(executionInfo.latestExecutionId)); // FIXME: check after the fact to see if we made the right choice by waiting\n\n      return Recoil_nullthrows(executionInfo.latestLoadable);\n    }\n\n    return getValFromRunningNewExecutionAndUpdatedDeps(store, state);\n  }\n  /**\n   * Searches execution info across all stores to see if there is an in-progress\n   * execution whose dependency values match the values of the requesting store.\n   */\n\n\n  function getExecutionInfoOfInProgressExecution(store, state) {\n    var _Array$from$find;\n\n    const [, executionInfo] = (_Array$from$find = Array.from(executionInfoMap.entries()).find(([, executionInfo]) => {\n      return executionInfo.latestLoadable != null && executionInfo.latestExecutionId != null && !haveAsyncDepsChanged(store, state);\n    })) !== null && _Array$from$find !== void 0 ? _Array$from$find : [];\n    return executionInfo;\n  }\n\n  const mapOfCheckedVersions = new Map();\n\n  function haveAsyncDepsChanged(store, state) {\n    var _executionInfo$depVal, _mapOfCheckedVersions;\n\n    const executionInfo = getExecutionInfo(store);\n    const oldDepValues = (_executionInfo$depVal = executionInfo.depValuesDiscoveredSoFarDuringAsyncWork) !== null && _executionInfo$depVal !== void 0 ? _executionInfo$depVal : new Map();\n    const cachedDepValuesCheckedForThisVersion = Array(((_mapOfCheckedVersions = mapOfCheckedVersions.get(state.version)) !== null && _mapOfCheckedVersions !== void 0 ? _mapOfCheckedVersions : new Map()).entries());\n    const isCachedVersionSame = mapOfCheckedVersions.has(state.version) && cachedDepValuesCheckedForThisVersion.length === oldDepValues.size && cachedDepValuesCheckedForThisVersion.every(([nodeKey, nodeVal]) => {\n      return oldDepValues.get(nodeKey) === nodeVal;\n    });\n\n    if (oldDepValues == null || state.version === executionInfo.stateVersion || isCachedVersionSame) {\n      return false;\n    }\n\n    mapOfCheckedVersions.set(state.version, new Map(oldDepValues));\n    return Array.from(oldDepValues).some(([nodeKey, oldVal]) => {\n      const loadable = getCachedNodeLoadable(store, state, nodeKey);\n      return loadable.contents !== oldVal.contents &&\n      /**\n       * FIXME: in the condition below we're making the assumption that a\n       * dependency that goes from loading to having a value is always because\n       * the dependency resolved to that value, so we don't count it as a dep\n       * change as the normal retry loop will handle retrying in response to a\n       * resolved async dep. This is an incorrect assumption for the edge case\n       * where there is an async selector that is loading, and while it is\n       * loading one of its dependencies changes, triggering a new execution,\n       * and that new execution produces a value synchronously (we don't make\n       * that assumption for asynchronous work b/c it's guaranteed that a\n       * loadable that goes from 'loading' to 'loading' in a new loadable is\n       * a dep change).\n       */\n      !(oldVal.state === 'loading' && loadable.state !== 'loading');\n    });\n  }\n  /**\n   * This function will update the selector's execution info when the selector\n   * has either finished running an execution or has started a new execution. If\n   * the given loadable is in a 'loading' state, the intention is that a new\n   * execution has started. Otherwise, the intention is that an execution has\n   * just finished.\n   */\n\n\n  function setExecutionInfo(loadable, store, depValues, newExecutionId, state) {\n    const executionInfo = getExecutionInfo(store);\n\n    if (loadable.state === 'loading') {\n      executionInfo.depValuesDiscoveredSoFarDuringAsyncWork = depValues;\n      executionInfo.latestExecutionId = newExecutionId;\n      executionInfo.latestLoadable = loadable;\n      executionInfo.stateVersion = state === null || state === void 0 ? void 0 : state.version;\n    } else {\n      executionInfo.depValuesDiscoveredSoFarDuringAsyncWork = null;\n      executionInfo.latestExecutionId = null;\n      executionInfo.latestLoadable = null;\n      executionInfo.stateVersion = null;\n    }\n  }\n  /**\n   * Conditionally updates the cache with a given loadable.\n   *\n   * We only cache loadables that are not loading because our cache keys are\n   * based on dep values, which are in an unfinished state for loadables that\n   * have a 'loading' state (new deps may be discovered while the selector\n   * runs its async code). We never want to cache partial dependencies b/c it\n   * could lead to errors, such as prematurely returning the result based on a\n   * partial list of deps-- we need the full list of deps to ensure that we\n   * are returning the correct result from cache.\n   */\n\n\n  function maybeSetCacheWithLoadable(state, depRoute, loadable) {\n    if (loadable.state !== 'loading') {\n      setCache(state, depRoute, loadable);\n    }\n  }\n\n  function updateExecutionInfoDepValues(depValues, store, executionId) {\n    const executionInfo = getExecutionInfo(store);\n\n    if (isLatestExecution(store, executionId)) {\n      executionInfo.depValuesDiscoveredSoFarDuringAsyncWork = depValues;\n    }\n  }\n\n  function clearExecutionInfo(store, executionId) {\n    if (isLatestExecution(store, executionId)) {\n      executionInfoMap.delete(store);\n    }\n  }\n\n  function isLatestExecution(store, executionId) {\n    const executionInfo = getExecutionInfo(store);\n    return executionId === executionInfo.latestExecutionId;\n  }\n\n  function maybeFreezeLoadableContents(loadable) {\n    if (loadable.state !== 'loading') {\n      maybeFreezeValue(loadable.contents);\n    }\n  }\n\n  function maybeFreezeValue(val) {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (Boolean(options.dangerouslyAllowMutability) === false) {\n        Recoil_deepFreezeValue(val);\n      }\n    }\n  }\n\n  function setCache(state, cacheRoute, loadable) {\n    state.atomValues.set(key, loadable);\n    cache.set(cacheRoute, loadable);\n  }\n\n  function detectCircularDependencies(fn) {\n    if (dependencyStack.includes(key)) {\n      const message = `Recoil selector has circular dependencies: ${dependencyStack.slice(dependencyStack.indexOf(key)).join(' \\u2192 ')}`;\n      return loadableWithError$1(new Error(message));\n    }\n\n    dependencyStack.push(key);\n\n    try {\n      return fn();\n    } finally {\n      dependencyStack.pop();\n    }\n  }\n\n  function selectorPeek(store, state) {\n    const cacheVal = cache.get(nodeKey => {\n      !(typeof nodeKey === 'string') ? process.env.NODE_ENV !== \"production\" ? Recoil_invariant(false, 'Cache nodeKey is type string') : Recoil_invariant(false) : void 0;\n      const peek = peekNodeLoadable$1(store, state, nodeKey);\n      return peek === null || peek === void 0 ? void 0 : peek.contents;\n    });\n    return cacheVal;\n  }\n\n  function selectorGet(store, state) {\n    return detectCircularDependencies(() => getSelectorValAndUpdatedDeps(store, state));\n  }\n\n  function invalidateSelector(state) {\n    state.atomValues.delete(key);\n  }\n\n  if (set != null) {\n    /**\n     * ES5 strict mode prohibits defining non-top-level function declarations,\n     * so don't use function declaration syntax here\n     */\n    const selectorSet = (store, state, newValue) => {\n      let syncSelectorSetFinished = false;\n      const writes = new Map();\n\n      function getRecoilValue({\n        key\n      }) {\n        if (syncSelectorSetFinished) {\n          throw new Error('Recoil: Async selector sets are not currently supported.');\n        }\n\n        const loadable = getCachedNodeLoadable(store, state, key);\n        maybeFreezeLoadableContents(loadable);\n\n        if (loadable.state === 'hasValue') {\n          return loadable.contents;\n        } else if (loadable.state === 'loading') {\n          throw new RecoilValueNotReady$2(key);\n        } else {\n          throw loadable.contents;\n        }\n      }\n\n      function setRecoilState(recoilState, valueOrUpdater) {\n        if (syncSelectorSetFinished) {\n          throw new Error('Recoil: Async selector sets are not currently supported.');\n        }\n\n        const newValue = typeof valueOrUpdater === 'function' ? // cast to any because we can't restrict type S from being a function itself without losing support for opaque types\n        // flowlint-next-line unclear-type:off\n        valueOrUpdater(getRecoilValue(recoilState)) : valueOrUpdater;\n        const upstreamWrites = setNodeValue$3(store, state, recoilState.key, newValue);\n        upstreamWrites.forEach((v, k) => writes.set(k, v));\n      }\n\n      function resetRecoilState(recoilState) {\n        setRecoilState(recoilState, DEFAULT_VALUE$4);\n      }\n\n      const ret = set({\n        set: setRecoilState,\n        get: getRecoilValue,\n        reset: resetRecoilState\n      }, newValue); // set should be a void method, but if the user makes it `async`, then it\n      // will return a Promise, which we don't currently support.\n\n      if (ret !== undefined) {\n        throw Recoil_isPromise(ret) ? new Error('Recoil: Async selector sets are not currently supported.') : new Error('Recoil: selector set should be a void function.');\n      }\n\n      syncSelectorSetFinished = true;\n      return writes;\n    };\n\n    return registerNode$1({\n      key,\n      nodeType: 'selector',\n      peek: selectorPeek,\n      get: selectorGet,\n      set: selectorSet,\n      init: selectorInit,\n      invalidate: invalidateSelector,\n      shouldDeleteConfigOnRelease: selectorShouldDeleteConfigOnRelease,\n      dangerouslyAllowMutability: options.dangerouslyAllowMutability,\n      shouldRestoreFromSnapshots: false,\n      retainedBy\n    });\n  } else {\n    return registerNode$1({\n      key,\n      nodeType: 'selector',\n      peek: selectorPeek,\n      get: selectorGet,\n      init: selectorInit,\n      invalidate: invalidateSelector,\n      shouldDeleteConfigOnRelease: selectorShouldDeleteConfigOnRelease,\n      dangerouslyAllowMutability: options.dangerouslyAllowMutability,\n      shouldRestoreFromSnapshots: false,\n      retainedBy\n    });\n  }\n}\n/* eslint-enable no-redeclare */\n\n\nvar Recoil_selector = selector; // @fb-only: const {scopedAtom} = require('Recoil_ScopedAtom');\n\nconst {\n  loadableWithError: loadableWithError$2,\n  loadableWithPromise: loadableWithPromise$2,\n  loadableWithValue: loadableWithValue$3\n} = Recoil_Loadable;\nconst {\n  DEFAULT_VALUE: DEFAULT_VALUE$5,\n  DefaultValue: DefaultValue$2,\n  getConfigDeletionHandler: getConfigDeletionHandler$2,\n  registerNode: registerNode$2,\n  setConfigDeletionHandler: setConfigDeletionHandler$1\n} = Recoil_Node;\nconst {\n  isRecoilValue: isRecoilValue$4\n} = Recoil_RecoilValue$1;\nconst {\n  markRecoilValueModified: markRecoilValueModified$1,\n  setRecoilValue: setRecoilValue$3,\n  setRecoilValueLoadable: setRecoilValueLoadable$3\n} = Recoil_RecoilValueInterface;\nconst {\n  retainedByOptionWithDefault: retainedByOptionWithDefault$2\n} = Recoil_Retention;\n\nfunction baseAtom(options) {\n  const {\n    key,\n    persistence_UNSTABLE: persistence\n  } = options;\n  const retainedBy = retainedByOptionWithDefault$2(options.retainedBy_UNSTABLE);\n  let liveStoresCount = 0;\n  let defaultLoadable = Recoil_isPromise(options.default) ? loadableWithPromise$2(options.default.then(value => {\n    defaultLoadable = loadableWithValue$3(value); // TODO Temporary disable Flow due to pending selector_NEW refactor\n\n    const promiseInfo = {\n      __key: key,\n      __value: value\n    };\n    return promiseInfo;\n  }).catch(error => {\n    defaultLoadable = loadableWithError$2(error);\n    throw error;\n  })) : loadableWithValue$3(options.default);\n  let cachedAnswerForUnvalidatedValue = undefined; // Cleanup handlers for this atom\n  // Rely on stable reference equality of the store to use it as a key per <RecoilRoot>\n\n  const cleanupEffectsByStore = new Map();\n\n  function wrapPendingPromise(store, promise) {\n    const wrappedPromise = promise.then(value => {\n      var _store$getState$nextT, _state$atomValues$get;\n\n      const state = (_store$getState$nextT = store.getState().nextTree) !== null && _store$getState$nextT !== void 0 ? _store$getState$nextT : store.getState().currentTree;\n\n      if (((_state$atomValues$get = state.atomValues.get(key)) === null || _state$atomValues$get === void 0 ? void 0 : _state$atomValues$get.contents) === wrappedPromise) {\n        setRecoilValue$3(store, node, value);\n      }\n\n      return {\n        __key: key,\n        __value: value\n      };\n    }).catch(error => {\n      var _store$getState$nextT2, _state$atomValues$get2;\n\n      const state = (_store$getState$nextT2 = store.getState().nextTree) !== null && _store$getState$nextT2 !== void 0 ? _store$getState$nextT2 : store.getState().currentTree;\n\n      if (((_state$atomValues$get2 = state.atomValues.get(key)) === null || _state$atomValues$get2 === void 0 ? void 0 : _state$atomValues$get2.contents) === wrappedPromise) {\n        setRecoilValueLoadable$3(store, node, loadableWithError$2(error));\n      }\n\n      throw error;\n    });\n    return wrappedPromise;\n  }\n\n  function initAtom(store, initState, trigger) {\n    liveStoresCount++;\n    const alreadyKnown = store.getState().knownAtoms.has(key);\n    store.getState().knownAtoms.add(key); // Setup async defaults to notify subscribers when they resolve\n\n    if (defaultLoadable.state === 'loading') {\n      const notifyDefaultSubscribers = () => {\n        var _store$getState$nextT3;\n\n        const state = (_store$getState$nextT3 = store.getState().nextTree) !== null && _store$getState$nextT3 !== void 0 ? _store$getState$nextT3 : store.getState().currentTree;\n\n        if (!state.atomValues.has(key)) {\n          markRecoilValueModified$1(store, node);\n        }\n      };\n\n      defaultLoadable.contents.then(notifyDefaultSubscribers).catch(notifyDefaultSubscribers);\n    } // Run Atom Effects\n    // This state is scoped by Store, since this is in the initAtom() closure\n\n\n    let initValue = DEFAULT_VALUE$5;\n    let pendingSetSelf = null;\n\n    if (options.effects_UNSTABLE != null && !alreadyKnown) {\n      let duringInit = true;\n\n      const setSelf = effect => valueOrUpdater => {\n        if (duringInit) {\n          const currentValue = initValue instanceof DefaultValue$2 || Recoil_isPromise(initValue) ? defaultLoadable.state === 'hasValue' ? defaultLoadable.contents : DEFAULT_VALUE$5 : initValue;\n          initValue = typeof valueOrUpdater === 'function' ? // cast to any because we can't restrict T from being a function without losing support for opaque types\n          valueOrUpdater(currentValue) // flowlint-line unclear-type:off\n          : valueOrUpdater; // Avoid calling onSet() when setSelf() initializes with a Promise\n\n          if (Recoil_isPromise(initValue)) {\n            initValue = initValue.then(value => {\n              pendingSetSelf = {\n                effect,\n                value\n              };\n              return value;\n            });\n          }\n        } else {\n          if (Recoil_isPromise(valueOrUpdater)) {\n            throw new Error('Setting atoms to async values is not implemented.');\n          }\n\n          if (typeof valueOrUpdater !== 'function') {\n            pendingSetSelf = {\n              effect,\n              value: valueOrUpdater\n            };\n          }\n\n          setRecoilValue$3(store, node, typeof valueOrUpdater === 'function' ? currentValue => {\n            const newValue = // cast to any because we can't restrict T from being a function without losing support for opaque types\n            valueOrUpdater(currentValue); // flowlint-line unclear-type:off\n\n            pendingSetSelf = {\n              effect,\n              value: newValue\n            };\n            return newValue;\n          } : valueOrUpdater);\n        }\n      };\n\n      const resetSelf = effect => () => setSelf(effect)(DEFAULT_VALUE$5);\n\n      const onSet = effect => handler => {\n        store.subscribeToTransactions(currentStore => {\n          var _currentTree$atomValu; // eslint-disable-next-line prefer-const\n\n\n          let {\n            currentTree,\n            previousTree\n          } = currentStore.getState();\n\n          if (!previousTree) {\n            Recoil_recoverableViolation('Transaction subscribers notified without a next tree being present -- this is a bug in Recoil');\n            previousTree = currentTree; // attempt to trundle on\n          }\n\n          const newLoadable = (_currentTree$atomValu = currentTree.atomValues.get(key)) !== null && _currentTree$atomValu !== void 0 ? _currentTree$atomValu : defaultLoadable;\n\n          if (newLoadable.state === 'hasValue') {\n            var _previousTree$atomVal, _pendingSetSelf, _pendingSetSelf2, _pendingSetSelf3;\n\n            const newValue = newLoadable.contents;\n            const oldLoadable = (_previousTree$atomVal = previousTree.atomValues.get(key)) !== null && _previousTree$atomVal !== void 0 ? _previousTree$atomVal : defaultLoadable;\n            const oldValue = oldLoadable.state === 'hasValue' ? oldLoadable.contents : DEFAULT_VALUE$5; // TODO This isn't actually valid, use as a placeholder for now.\n            // Ignore atom value changes that were set via setSelf() in the same effect.\n            // We will still properly call the handler if there was a subsequent\n            // set from something other than an atom effect which was batched\n            // with the `setSelf()` call.  However, we may incorrectly ignore\n            // the handler if the subsequent batched call happens to set the\n            // atom to the exact same value as the `setSelf()`.   But, in that\n            // case, it was kind of a noop, so the semantics are debatable..\n\n            if (((_pendingSetSelf = pendingSetSelf) === null || _pendingSetSelf === void 0 ? void 0 : _pendingSetSelf.effect) !== effect || ((_pendingSetSelf2 = pendingSetSelf) === null || _pendingSetSelf2 === void 0 ? void 0 : _pendingSetSelf2.value) !== newValue) {\n              handler(newValue, oldValue);\n            } else if (((_pendingSetSelf3 = pendingSetSelf) === null || _pendingSetSelf3 === void 0 ? void 0 : _pendingSetSelf3.effect) === effect) {\n              pendingSetSelf = null;\n            }\n          }\n        }, key);\n      };\n\n      for (const effect of (_options$effects_UNST = options.effects_UNSTABLE) !== null && _options$effects_UNST !== void 0 ? _options$effects_UNST : []) {\n        var _options$effects_UNST;\n\n        const cleanup = effect({\n          node,\n          trigger,\n          setSelf: setSelf(effect),\n          resetSelf: resetSelf(effect),\n          onSet: onSet(effect)\n        });\n\n        if (cleanup != null) {\n          var _cleanupEffectsByStor;\n\n          cleanupEffectsByStore.set(store, [...((_cleanupEffectsByStor = cleanupEffectsByStore.get(store)) !== null && _cleanupEffectsByStor !== void 0 ? _cleanupEffectsByStor : []), cleanup]);\n        }\n      }\n\n      duringInit = false;\n    } // Mutate initial state in place since we know there are no other subscribers\n    // since we are the ones initializing on first use.\n\n\n    if (!(initValue instanceof DefaultValue$2)) {\n      var _store$getState$nextT4;\n\n      const initLoadable = Recoil_isPromise(initValue) ? loadableWithPromise$2(wrapPendingPromise(store, initValue)) : loadableWithValue$3(initValue);\n      initState.atomValues.set(key, initLoadable); // If there is a pending transaction, then also mutate the next state tree.\n      // This could happen if the atom was first initialized in an action that\n      // also updated some other atom's state.\n\n      (_store$getState$nextT4 = store.getState().nextTree) === null || _store$getState$nextT4 === void 0 ? void 0 : _store$getState$nextT4.atomValues.set(key, initLoadable);\n    }\n\n    return () => {\n      var _cleanupEffectsByStor2;\n\n      liveStoresCount--;\n      (_cleanupEffectsByStor2 = cleanupEffectsByStore.get(store)) === null || _cleanupEffectsByStor2 === void 0 ? void 0 : _cleanupEffectsByStor2.forEach(cleanup => cleanup());\n      cleanupEffectsByStore.delete(store);\n      store.getState().knownAtoms.delete(key); // FIXME remove knownAtoms?\n    };\n  }\n\n  function peekAtom(_store, state) {\n    var _ref, _state$atomValues$get3, _cachedAnswerForUnval;\n\n    return (_ref = (_state$atomValues$get3 = state.atomValues.get(key)) !== null && _state$atomValues$get3 !== void 0 ? _state$atomValues$get3 : (_cachedAnswerForUnval = cachedAnswerForUnvalidatedValue) === null || _cachedAnswerForUnval === void 0 ? void 0 : _cachedAnswerForUnval[1]) !== null && _ref !== void 0 ? _ref : defaultLoadable;\n  }\n\n  function getAtom(_store, state) {\n    if (state.atomValues.has(key)) {\n      // Atom value is stored in state:\n      return Recoil_nullthrows(state.atomValues.get(key));\n    } else if (state.nonvalidatedAtoms.has(key)) {\n      // Atom value is stored but needs validation before use.\n      // We might have already validated it and have a cached validated value:\n      if (cachedAnswerForUnvalidatedValue != null) {\n        return cachedAnswerForUnvalidatedValue;\n      }\n\n      if (persistence == null) {\n        Recoil_expectationViolation(`Tried to restore a persisted value for atom ${key} but it has no persistence settings.`);\n        return defaultLoadable;\n      }\n\n      const nonvalidatedValue = state.nonvalidatedAtoms.get(key);\n      const validatorResult = persistence.validator(nonvalidatedValue, DEFAULT_VALUE$5);\n      const validatedValueLoadable = validatorResult instanceof DefaultValue$2 ? defaultLoadable : loadableWithValue$3(validatorResult);\n      cachedAnswerForUnvalidatedValue = validatedValueLoadable;\n      return cachedAnswerForUnvalidatedValue;\n    } else {\n      return defaultLoadable;\n    }\n  }\n\n  function invalidateAtom() {\n    cachedAnswerForUnvalidatedValue = undefined;\n  }\n\n  function setAtom(_store, state, newValue) {\n    // Bail out if we're being set to the existing value, or if we're being\n    // reset but have no stored value (validated or unvalidated) to reset from:\n    if (state.atomValues.has(key)) {\n      const existing = Recoil_nullthrows(state.atomValues.get(key));\n\n      if (existing.state === 'hasValue' && newValue === existing.contents) {\n        return new Map();\n      }\n    } else if (!state.nonvalidatedAtoms.has(key) && newValue instanceof DefaultValue$2) {\n      return new Map();\n    }\n\n    if (process.env.NODE_ENV !== \"production\") {\n      if (options.dangerouslyAllowMutability !== true) {\n        Recoil_deepFreezeValue(newValue);\n      }\n    }\n\n    cachedAnswerForUnvalidatedValue = undefined; // can be released now if it was previously in use\n\n    return new Map().set(key, loadableWithValue$3(newValue));\n  }\n\n  function shouldDeleteConfigOnReleaseAtom() {\n    return getConfigDeletionHandler$2(key) !== undefined && liveStoresCount <= 0;\n  }\n\n  const node = registerNode$2({\n    key,\n    nodeType: 'atom',\n    peek: peekAtom,\n    get: getAtom,\n    set: setAtom,\n    init: initAtom,\n    invalidate: invalidateAtom,\n    shouldDeleteConfigOnRelease: shouldDeleteConfigOnReleaseAtom,\n    dangerouslyAllowMutability: options.dangerouslyAllowMutability,\n    persistence_UNSTABLE: options.persistence_UNSTABLE ? {\n      type: options.persistence_UNSTABLE.type,\n      backButton: options.persistence_UNSTABLE.backButton\n    } : undefined,\n    shouldRestoreFromSnapshots: true,\n    retainedBy\n  });\n  return node;\n} // prettier-ignore\n\n\nfunction atom(options) {\n  const {\n    default: optionsDefault,\n    // @fb-only: scopeRules_APPEND_ONLY_READ_THE_DOCS,\n    ...restOptions\n  } = options;\n\n  if (isRecoilValue$4(optionsDefault) // Continue to use atomWithFallback for promise defaults for scoped atoms\n  // for now, since scoped atoms don't support async defaults\n  // @fb-only: || (isPromise(optionsDefault) && scopeRules_APPEND_ONLY_READ_THE_DOCS)\n  ) {\n      return atomWithFallback({ ...restOptions,\n        default: optionsDefault // @fb-only: scopeRules_APPEND_ONLY_READ_THE_DOCS,\n\n      }); // @fb-only: } else if (scopeRules_APPEND_ONLY_READ_THE_DOCS && !isPromise(optionsDefault)) {\n      // @fb-only: return scopedAtom<T>({\n      // @fb-only: ...restOptions,\n      // @fb-only: default: optionsDefault,\n      // @fb-only: scopeRules_APPEND_ONLY_READ_THE_DOCS,\n      // @fb-only: });\n    } else {\n    return baseAtom({ ...restOptions,\n      default: optionsDefault\n    });\n  }\n}\n\nfunction atomWithFallback(options) {\n  const base = atom({ ...options,\n    default: DEFAULT_VALUE$5,\n    persistence_UNSTABLE: options.persistence_UNSTABLE === undefined ? undefined : { ...options.persistence_UNSTABLE,\n      validator: storedValue => storedValue instanceof DefaultValue$2 ? storedValue : Recoil_nullthrows(options.persistence_UNSTABLE).validator(storedValue, DEFAULT_VALUE$5)\n    },\n    // TODO Hack for now.\n    // flowlint-next-line unclear-type: off\n    effects_UNSTABLE: options.effects_UNSTABLE\n  });\n  const sel = Recoil_selector({\n    key: `${options.key}__withFallback`,\n    get: ({\n      get\n    }) => {\n      const baseValue = get(base);\n      return baseValue instanceof DefaultValue$2 ? options.default : baseValue;\n    },\n    set: ({\n      set\n    }, newValue) => set(base, newValue),\n    dangerouslyAllowMutability: options.dangerouslyAllowMutability\n  });\n  setConfigDeletionHandler$1(sel.key, getConfigDeletionHandler$2(options.key));\n  return sel;\n}\n\nvar Recoil_atom = atom;\n/**\n * (c) Facebook, Inc. and its affiliates. Confidential and proprietary.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nclass MapCache {\n  constructor(options) {\n    var _options$mapKey;\n\n    _defineProperty(this, \"_map\", void 0);\n\n    _defineProperty(this, \"_keyMapper\", void 0);\n\n    this._map = new Map();\n    this._keyMapper = (_options$mapKey = options === null || options === void 0 ? void 0 : options.mapKey) !== null && _options$mapKey !== void 0 ? _options$mapKey : v => v;\n  }\n\n  size() {\n    return this._map.size;\n  }\n\n  has(key) {\n    return this._map.has(this._keyMapper(key));\n  }\n\n  get(key) {\n    return this._map.get(this._keyMapper(key));\n  }\n\n  set(key, val) {\n    this._map.set(this._keyMapper(key), val);\n  }\n\n  delete(key) {\n    this._map.delete(this._keyMapper(key));\n  }\n\n  clear() {\n    this._map.clear();\n  }\n\n}\n\nvar Recoil_MapCache = {\n  MapCache\n};\nvar Recoil_MapCache_1 = Recoil_MapCache.MapCache;\nvar Recoil_MapCache$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  MapCache: Recoil_MapCache_1\n});\nconst {\n  LRUCache: LRUCache$2\n} = Recoil_LRUCache$1;\nconst {\n  MapCache: MapCache$1\n} = Recoil_MapCache$1;\nconst defaultPolicy$1 = {\n  equality: 'reference',\n  eviction: 'none',\n  maxSize: Infinity\n};\n\nfunction cacheFromPolicy({\n  equality = defaultPolicy$1.equality,\n  eviction = defaultPolicy$1.eviction,\n  maxSize = defaultPolicy$1.maxSize\n} = defaultPolicy$1) {\n  const valueMapper = getValueMapper$1(equality);\n  const cache = getCache(eviction, maxSize, valueMapper);\n  return cache;\n}\n\nfunction getValueMapper$1(equality) {\n  switch (equality) {\n    case 'reference':\n      return val => val;\n\n    case 'value':\n      return val => Recoil_stableStringify(val);\n  }\n\n  throw new Error(`Unrecognized equality policy ${equality}`);\n}\n\nfunction getCache(eviction, maxSize, mapKey) {\n  switch (eviction) {\n    case 'keep-all':\n      // $FlowFixMe[method-unbinding]\n      return new MapCache$1({\n        mapKey\n      });\n\n    case 'lru':\n      // $FlowFixMe[method-unbinding]\n      return new LRUCache$2({\n        mapKey,\n        maxSize: Recoil_nullthrows(maxSize)\n      });\n\n    case 'most-recent':\n      // $FlowFixMe[method-unbinding]\n      return new LRUCache$2({\n        mapKey,\n        maxSize: 1\n      });\n  }\n\n  throw new Error(`Unrecognized eviction policy ${eviction}`);\n}\n\nvar Recoil_cacheFromPolicy = cacheFromPolicy;\nconst {\n  setConfigDeletionHandler: setConfigDeletionHandler$2\n} = Recoil_Node;\n/*\nA function which returns an atom based on the input parameter.\n\nEach unique parameter returns a unique atom. E.g.,\n\n  const f = atomFamily(...);\n  f({a: 1}) => an atom\n  f({a: 2}) => a different atom\n\nThis allows components to persist local, private state using atoms.  Each\ninstance of the component may have a different key, which it uses as the\nparameter for a family of atoms; in this way, each component will have\nits own atom not shared by other instances.  These state keys may be composed\ninto children's state keys as well.\n*/\n\nfunction atomFamily(options) {\n  var _options$cachePolicyF, _options$cachePolicyF2;\n\n  const atomCache = Recoil_cacheFromPolicy({\n    equality: (_options$cachePolicyF = (_options$cachePolicyF2 = options.cachePolicyForParams_UNSTABLE) === null || _options$cachePolicyF2 === void 0 ? void 0 : _options$cachePolicyF2.equality) !== null && _options$cachePolicyF !== void 0 ? _options$cachePolicyF : 'value',\n    eviction: 'keep-all'\n  }); // Simple atomFamily implementation to cache individual atoms based\n  // on the parameter value equality.\n\n  return params => {\n    var _stableStringify;\n\n    const cachedAtom = atomCache.get(params);\n\n    if (cachedAtom != null) {\n      return cachedAtom;\n    }\n\n    const {\n      cachePolicyForParams_UNSTABLE,\n      ...atomOptions\n    } = options;\n    const newAtom = Recoil_atom({ ...atomOptions,\n      key: `${options.key}__${(_stableStringify = Recoil_stableStringify(params)) !== null && _stableStringify !== void 0 ? _stableStringify : 'void'}`,\n      default: typeof options.default === 'function' ? // The default was parameterized\n      // Flow doesn't know that T isn't a function, so we need to case to any\n      options.default(params) // flowlint-line unclear-type:off\n      : // Default may be a static value, promise, or RecoilValue\n      options.default,\n      retainedBy_UNSTABLE: typeof options.retainedBy_UNSTABLE === 'function' ? options.retainedBy_UNSTABLE(params) : options.retainedBy_UNSTABLE,\n      effects_UNSTABLE: typeof options.effects_UNSTABLE === 'function' ? options.effects_UNSTABLE(params) : options.effects_UNSTABLE // prettier-ignore\n      // @fb-only: scopeRules_APPEND_ONLY_READ_THE_DOCS: mapScopeRules(\n      // @fb-only: options.scopeRules_APPEND_ONLY_READ_THE_DOCS,\n      // @fb-only: params,\n      // @fb-only: ),\n\n    });\n    atomCache.set(params, newAtom);\n    setConfigDeletionHandler$2(newAtom.key, () => {\n      atomCache.delete(params);\n    });\n    return newAtom;\n  };\n}\n\nvar Recoil_atomFamily = atomFamily;\nconst {\n  setConfigDeletionHandler: setConfigDeletionHandler$3\n} = Recoil_Node; // Keep in mind the parameter needs to be serializable as a cahche key\n// using Recoil_stableStringify\n// Add a unique index to each selector in case the cache implementation allows\n// duplicate keys based on equivalent stringified parameters\n\nlet nextIndex = 0;\n/* eslint-disable no-redeclare */\n// Return a function that returns members of a family of selectors of the same type\n// E.g.,\n//\n// const s = selectorFamily(...);\n// s({a: 1}) => a selector\n// s({a: 2}) => a different selector\n//\n// By default, the selectors are distinguished by distinct values of the\n// parameter based on value equality, not reference equality.  This allows using\n// object literals or other equivalent objects at callsites to not create\n// duplicate cache entries.  This behavior may be overridden with the\n// cacheImplementationForParams option.\n\nfunction selectorFamily(options) {\n  var _options$cachePolicyF, _options$cachePolicyF2;\n\n  const selectorCache = Recoil_cacheFromPolicy({\n    equality: (_options$cachePolicyF = (_options$cachePolicyF2 = options.cachePolicyForParams_UNSTABLE) === null || _options$cachePolicyF2 === void 0 ? void 0 : _options$cachePolicyF2.equality) !== null && _options$cachePolicyF !== void 0 ? _options$cachePolicyF : 'value',\n    eviction: 'keep-all'\n  });\n  return params => {\n    var _stableStringify;\n\n    const cachedSelector = selectorCache.get(params);\n\n    if (cachedSelector != null) {\n      return cachedSelector;\n    }\n\n    const myKey = `${options.key}__selectorFamily/${(_stableStringify = Recoil_stableStringify(params, {\n      // It is possible to use functions in parameters if the user uses\n      // a cache with reference equality thanks to the incrementing index.\n      allowFunctions: true\n    })) !== null && _stableStringify !== void 0 ? _stableStringify : 'void'}/${nextIndex++}`; // Append index in case values serialize to the same key string\n\n    const myGet = callbacks => options.get(params)(callbacks);\n\n    const myCachePolicy = options.cachePolicy_UNSTABLE;\n    const retainedBy = typeof options.retainedBy_UNSTABLE === 'function' ? options.retainedBy_UNSTABLE(params) : options.retainedBy_UNSTABLE;\n    let newSelector;\n\n    if (options.set != null) {\n      const set = options.set;\n\n      const mySet = (callbacks, newValue) => set(params)(callbacks, newValue);\n\n      newSelector = Recoil_selector({\n        key: myKey,\n        get: myGet,\n        set: mySet,\n        cachePolicy_UNSTABLE: myCachePolicy,\n        dangerouslyAllowMutability: options.dangerouslyAllowMutability,\n        retainedBy_UNSTABLE: retainedBy\n      });\n    } else {\n      newSelector = Recoil_selector({\n        key: myKey,\n        get: myGet,\n        cachePolicy_UNSTABLE: myCachePolicy,\n        dangerouslyAllowMutability: options.dangerouslyAllowMutability,\n        retainedBy_UNSTABLE: retainedBy\n      });\n    }\n\n    selectorCache.set(params, newSelector);\n    setConfigDeletionHandler$3(newSelector.key, () => {\n      selectorCache.delete(params);\n    });\n    return newSelector;\n  };\n}\n/* eslint-enable no-redeclare */\n\n\nvar Recoil_selectorFamily = selectorFamily; // flowlint-next-line unclear-type:off\n\nconst constantSelector = Recoil_selectorFamily({\n  key: '__constant',\n  get: constant => () => constant,\n  cachePolicyForParams_UNSTABLE: {\n    equality: 'reference'\n  }\n}); // Function that returns a selector which always produces the\n// same constant value.  It may be called multiple times with the\n// same value, based on reference equality, and will provide the\n// same selector.\n\nfunction constSelector(constant) {\n  return constantSelector(constant);\n}\n\nvar Recoil_constSelector = constSelector; // flowlint-next-line unclear-type:off\n\nconst throwingSelector = Recoil_selectorFamily({\n  key: '__error',\n  get: message => () => {\n    throw new Error(message);\n  },\n  cachePolicyForParams_UNSTABLE: {\n    equality: 'reference'\n  }\n}); // Function that returns a selector which always throws an error\n// with the provided message.\n\nfunction errorSelector(message) {\n  return throwingSelector(message);\n}\n\nvar Recoil_errorSelector = errorSelector;\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Wraps another recoil value and prevents writing to it.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nfunction readOnlySelector(atom) {\n  // flowlint-next-line unclear-type: off\n  return atom;\n}\n\nvar Recoil_readOnlySelector = readOnlySelector;\nconst {\n  loadableWithError: loadableWithError$3,\n  loadableWithPromise: loadableWithPromise$3,\n  loadableWithValue: loadableWithValue$4\n} = Recoil_Loadable; /////////////////\n//  TRUTH TABLE\n/////////////////\n// Dependencies        waitForNone         waitForAny        waitForAll       waitForAllSettled\n//  [loading, loading]  [Promise, Promise]  Promise           Promise         Promise\n//  [value, loading]    [value, Promise]    [value, Promise]  Promise         Promise\n//  [value, value]      [value, value]      [value, value]    [value, value]  [value, value]\n//\n//  [error, loading]    [Error, Promise]    [Error, Promise]  Error           Promise\n//  [error, error]      [Error, Error]      [Error, Error]    Error           [error, error]\n//  [value, error]      [value, Error]      [value, Error]    Error           [value, error]\n// Issue parallel requests for all dependencies and return the current\n// status if they have results, have some error, or are still pending.\n\nfunction concurrentRequests(getRecoilValue, deps) {\n  const results = Array(deps.length).fill(undefined);\n  const exceptions = Array(deps.length).fill(undefined);\n\n  for (const [i, dep] of deps.entries()) {\n    try {\n      results[i] = getRecoilValue(dep);\n    } catch (e) {\n      // exceptions can either be Promises of pending results or real errors\n      exceptions[i] = e;\n    }\n  }\n\n  return [results, exceptions];\n}\n\nfunction isError(exp) {\n  return exp != null && !Recoil_isPromise(exp);\n}\n\nfunction unwrapDependencies(dependencies) {\n  return Array.isArray(dependencies) ? dependencies : Object.getOwnPropertyNames(dependencies).map(key => dependencies[key]);\n}\n\nfunction getValueFromLoadablePromiseResult(result) {\n  if (result != null && typeof result === 'object' && result.hasOwnProperty('__value')) {\n    return result.__value;\n  }\n\n  return result;\n}\n\nfunction wrapResults(dependencies, results) {\n  return Array.isArray(dependencies) ? results : // Object.getOwnPropertyNames() has consistent key ordering with ES6\n  Object.getOwnPropertyNames(dependencies).reduce((out, key, idx) => ({ ...out,\n    [key]: results[idx]\n  }), {});\n}\n\nfunction wrapLoadables(dependencies, results, exceptions) {\n  const output = exceptions.map((exception, idx) => exception == null ? loadableWithValue$4(results[idx]) : Recoil_isPromise(exception) ? loadableWithPromise$3(exception) : loadableWithError$3(exception));\n  return wrapResults(dependencies, output);\n}\n\nfunction combineAsyncResultsWithSyncResults(syncResults, asyncResults) {\n  return asyncResults.map((result, idx) =>\n  /**\n   * it's important we use === undefined as opposed to == null, because the\n   * resolved value of the async promise could be `null`, in which case we\n   * don't want to use syncResults[idx], which would be undefined. If async\n   * promise resolves to `undefined`, that's ok because `syncResults[idx]`\n   * will also be `undefined`. That's a little hacky, but it works.\n   */\n  result === undefined ? syncResults[idx] : result);\n} // Selector that requests all dependencies in parallel and immediately returns\n// current results without waiting.\n\n\nconst waitForNone = Recoil_selectorFamily({\n  key: '__waitForNone',\n  get: dependencies => ({\n    get\n  }) => {\n    // Issue requests for all dependencies in parallel.\n    const deps = unwrapDependencies(dependencies);\n    const [results, exceptions] = concurrentRequests(get, deps); // Always return the current status of the results; never block.\n\n    return wrapLoadables(dependencies, results, exceptions);\n  },\n  dangerouslyAllowMutability: true\n}); // Selector that requests all dependencies in parallel and waits for at least\n// one to be available before returning results.  It will only error if all\n// dependencies have errors.\n\nconst waitForAny = Recoil_selectorFamily({\n  key: '__waitForAny',\n  get: dependencies => ({\n    get\n  }) => {\n    // Issue requests for all dependencies in parallel.\n    // Exceptions can either be Promises of pending results or real errors\n    const deps = unwrapDependencies(dependencies);\n    const [results, exceptions] = concurrentRequests(get, deps); // If any results are available, value or error, return the current status\n\n    if (exceptions.some(exp => !Recoil_isPromise(exp))) {\n      return wrapLoadables(dependencies, results, exceptions);\n    } // Otherwise, return a promise that will resolve when the next result is\n    // available, whichever one happens to be next.  But, if all pending\n    // dependencies end up with errors, then reject the promise.\n\n\n    return new Promise(resolve => {\n      for (const [i, exp] of exceptions.entries()) {\n        if (Recoil_isPromise(exp)) {\n          exp.then(result => {\n            results[i] = getValueFromLoadablePromiseResult(result);\n            exceptions[i] = undefined;\n            resolve(wrapLoadables(dependencies, results, exceptions));\n          }).catch(error => {\n            exceptions[i] = error;\n            resolve(wrapLoadables(dependencies, results, exceptions));\n          });\n        }\n      }\n    });\n  },\n  dangerouslyAllowMutability: true\n}); // Selector that requests all dependencies in parallel and waits for all to be\n// available before returning a value.  It will error if any dependencies error.\n\nconst waitForAll = Recoil_selectorFamily({\n  key: '__waitForAll',\n  get: dependencies => ({\n    get\n  }) => {\n    // Issue requests for all dependencies in parallel.\n    // Exceptions can either be Promises of pending results or real errors\n    const deps = unwrapDependencies(dependencies);\n    const [results, exceptions] = concurrentRequests(get, deps); // If all results are available, return the results\n\n    if (exceptions.every(exp => exp == null)) {\n      return wrapResults(dependencies, results);\n    } // If we have any errors, throw the first error\n\n\n    const error = exceptions.find(isError);\n\n    if (error != null) {\n      throw error;\n    } // Otherwise, return a promise that will resolve when all results are available\n\n\n    return Promise.all(exceptions).then(exceptionResults => wrapResults(dependencies, combineAsyncResultsWithSyncResults(results, exceptionResults).map(getValueFromLoadablePromiseResult)));\n  },\n  dangerouslyAllowMutability: true\n});\nconst waitForAllSettled = Recoil_selectorFamily({\n  key: '__waitForAllSettled',\n  get: dependencies => ({\n    get\n  }) => {\n    // Issue requests for all dependencies in parallel.\n    // Exceptions can either be Promises of pending results or real errors\n    const deps = unwrapDependencies(dependencies);\n    const [results, exceptions] = concurrentRequests(get, deps); // If all results are available, return the results\n\n    if (exceptions.every(exp => !Recoil_isPromise(exp))) {\n      return wrapLoadables(dependencies, results, exceptions);\n    } // Wait for all results to settle\n\n\n    return Promise.all(exceptions.map((exp, i) => Recoil_isPromise(exp) ? exp.then(result => {\n      results[i] = getValueFromLoadablePromiseResult(result);\n      exceptions[i] = undefined;\n    }).catch(error => {\n      results[i] = undefined;\n      exceptions[i] = error;\n    }) : null)) // Then wrap them as loadables\n    .then(() => wrapLoadables(dependencies, results, exceptions));\n  },\n  dangerouslyAllowMutability: true\n});\nconst noWait = Recoil_selectorFamily({\n  key: '__noWait',\n  get: dependency => ({\n    get\n  }) => {\n    try {\n      return loadableWithValue$4(get(dependency));\n    } catch (exception) {\n      return Recoil_isPromise(exception) ? loadableWithPromise$3(exception) : loadableWithError$3(exception);\n    }\n  },\n  dangerouslyAllowMutability: true\n});\nvar Recoil_WaitFor = {\n  waitForNone,\n  waitForAny,\n  waitForAll,\n  waitForAllSettled,\n  noWait\n};\nconst {\n  batchUpdates: batchUpdates$3,\n  setBatcher: setBatcher$1\n} = Recoil_Batching;\nconst {\n  DefaultValue: DefaultValue$3\n} = Recoil_Node;\nconst {\n  RecoilRoot: RecoilRoot$2\n} = Recoil_RecoilRoot_react;\nconst {\n  isRecoilValue: isRecoilValue$5\n} = Recoil_RecoilValue$1;\nconst {\n  retentionZone: retentionZone$1\n} = Recoil_RetentionZone;\nconst {\n  freshSnapshot: freshSnapshot$2\n} = Recoil_Snapshot$1;\nconst {\n  useGotoRecoilSnapshot: useGotoRecoilSnapshot$1,\n  useRecoilCallback: useRecoilCallback$1,\n  useRecoilSnapshot: useRecoilSnapshot$1,\n  useRecoilState: useRecoilState$1,\n  useRecoilStateLoadable: useRecoilStateLoadable$1,\n  useRecoilTransaction: useRecoilTransaction$1,\n  useRecoilTransactionObserver: useRecoilTransactionObserver$1,\n  useRecoilValue: useRecoilValue$1,\n  useRecoilValueLoadable: useRecoilValueLoadable$1,\n  useResetRecoilState: useResetRecoilState$1,\n  useRetain: useRetain$1,\n  useSetRecoilState: useSetRecoilState$1,\n  useSetUnvalidatedAtomValues: useSetUnvalidatedAtomValues$1,\n  useTransactionObservation_DEPRECATED: useTransactionObservation_DEPRECATED$1\n} = Recoil_Hooks;\nconst {\n  noWait: noWait$1,\n  waitForAll: waitForAll$1,\n  waitForAllSettled: waitForAllSettled$1,\n  waitForAny: waitForAny$1,\n  waitForNone: waitForNone$1\n} = Recoil_WaitFor;\nvar Recoil_index = {\n  // Types\n  DefaultValue: DefaultValue$3,\n  // Components\n  RecoilRoot: RecoilRoot$2,\n  useRecoilBridgeAcrossReactRoots_UNSTABLE: Recoil_useRecoilBridgeAcrossReactRoots,\n  // RecoilValues\n  atom: Recoil_atom,\n  selector: Recoil_selector,\n  // Other factories\n  retentionZone: retentionZone$1,\n  // Convenience RecoilValues\n  atomFamily: Recoil_atomFamily,\n  selectorFamily: Recoil_selectorFamily,\n  constSelector: Recoil_constSelector,\n  errorSelector: Recoil_errorSelector,\n  readOnlySelector: Recoil_readOnlySelector,\n  // Hooks that accept RecoilValues\n  useRecoilValue: useRecoilValue$1,\n  useRecoilValueLoadable: useRecoilValueLoadable$1,\n  useRecoilState: useRecoilState$1,\n  useRecoilStateLoadable: useRecoilStateLoadable$1,\n  useSetRecoilState: useSetRecoilState$1,\n  useResetRecoilState: useResetRecoilState$1,\n  useGetRecoilValueInfo_UNSTABLE: Recoil_useGetRecoilValueInfo,\n  useRetain: useRetain$1,\n  // Hooks for complex operations with RecoilValues\n  useRecoilCallback: useRecoilCallback$1,\n  useRecoilTransaction_UNSTABLE: useRecoilTransaction$1,\n  // Hooks for Snapshots\n  useGotoRecoilSnapshot: useGotoRecoilSnapshot$1,\n  useRecoilSnapshot: useRecoilSnapshot$1,\n  useRecoilTransactionObserver_UNSTABLE: useRecoilTransactionObserver$1,\n  useTransactionObservation_UNSTABLE: useTransactionObservation_DEPRECATED$1,\n  useSetUnvalidatedAtomValues_UNSTABLE: useSetUnvalidatedAtomValues$1,\n  // Concurrency Helpers\n  noWait: noWait$1,\n  waitForNone: waitForNone$1,\n  waitForAny: waitForAny$1,\n  waitForAll: waitForAll$1,\n  waitForAllSettled: waitForAllSettled$1,\n  // Other functions\n  isRecoilValue: isRecoilValue$5,\n  // Batching\n  batchUpdates: batchUpdates$3,\n  setBatcher: setBatcher$1,\n  // Snapshot Utils\n  snapshot_UNSTABLE: freshSnapshot$2\n};\nvar Recoil_index_1 = Recoil_index.DefaultValue;\nvar Recoil_index_2 = Recoil_index.RecoilRoot;\nvar Recoil_index_3 = Recoil_index.useRecoilBridgeAcrossReactRoots_UNSTABLE;\nvar Recoil_index_4 = Recoil_index.atom;\nvar Recoil_index_5 = Recoil_index.selector;\nvar Recoil_index_6 = Recoil_index.retentionZone;\nvar Recoil_index_7 = Recoil_index.atomFamily;\nvar Recoil_index_8 = Recoil_index.selectorFamily;\nvar Recoil_index_9 = Recoil_index.constSelector;\nvar Recoil_index_10 = Recoil_index.errorSelector;\nvar Recoil_index_11 = Recoil_index.readOnlySelector;\nvar Recoil_index_12 = Recoil_index.useRecoilValue;\nvar Recoil_index_13 = Recoil_index.useRecoilValueLoadable;\nvar Recoil_index_14 = Recoil_index.useRecoilState;\nvar Recoil_index_15 = Recoil_index.useRecoilStateLoadable;\nvar Recoil_index_16 = Recoil_index.useSetRecoilState;\nvar Recoil_index_17 = Recoil_index.useResetRecoilState;\nvar Recoil_index_18 = Recoil_index.useGetRecoilValueInfo_UNSTABLE;\nvar Recoil_index_19 = Recoil_index.useRetain;\nvar Recoil_index_20 = Recoil_index.useRecoilCallback;\nvar Recoil_index_21 = Recoil_index.useRecoilTransaction_UNSTABLE;\nvar Recoil_index_22 = Recoil_index.useGotoRecoilSnapshot;\nvar Recoil_index_23 = Recoil_index.useRecoilSnapshot;\nvar Recoil_index_24 = Recoil_index.useRecoilTransactionObserver_UNSTABLE;\nvar Recoil_index_25 = Recoil_index.useTransactionObservation_UNSTABLE;\nvar Recoil_index_26 = Recoil_index.useSetUnvalidatedAtomValues_UNSTABLE;\nvar Recoil_index_27 = Recoil_index.noWait;\nvar Recoil_index_28 = Recoil_index.waitForNone;\nvar Recoil_index_29 = Recoil_index.waitForAny;\nvar Recoil_index_30 = Recoil_index.waitForAll;\nvar Recoil_index_31 = Recoil_index.waitForAllSettled;\nvar Recoil_index_32 = Recoil_index.isRecoilValue;\nvar Recoil_index_33 = Recoil_index.batchUpdates;\nvar Recoil_index_34 = Recoil_index.setBatcher;\nvar Recoil_index_35 = Recoil_index.snapshot_UNSTABLE;\nexport default Recoil_index;\nexport { Recoil_index_1 as DefaultValue, Recoil_index_2 as RecoilRoot, Recoil_index_4 as atom, Recoil_index_7 as atomFamily, Recoil_index_33 as batchUpdates, Recoil_index_9 as constSelector, Recoil_index_10 as errorSelector, Recoil_index_32 as isRecoilValue, Recoil_index_27 as noWait, Recoil_index_11 as readOnlySelector, Recoil_index_6 as retentionZone, Recoil_index_5 as selector, Recoil_index_8 as selectorFamily, Recoil_index_34 as setBatcher, Recoil_index_35 as snapshot_UNSTABLE, Recoil_index_18 as useGetRecoilValueInfo_UNSTABLE, Recoil_index_22 as useGotoRecoilSnapshot, Recoil_index_3 as useRecoilBridgeAcrossReactRoots_UNSTABLE, Recoil_index_20 as useRecoilCallback, Recoil_index_23 as useRecoilSnapshot, Recoil_index_14 as useRecoilState, Recoil_index_15 as useRecoilStateLoadable, Recoil_index_24 as useRecoilTransactionObserver_UNSTABLE, Recoil_index_21 as useRecoilTransaction_UNSTABLE, Recoil_index_12 as useRecoilValue, Recoil_index_13 as useRecoilValueLoadable, Recoil_index_17 as useResetRecoilState, Recoil_index_19 as useRetain, Recoil_index_16 as useSetRecoilState, Recoil_index_26 as useSetUnvalidatedAtomValues_UNSTABLE, Recoil_index_25 as useTransactionObservation_UNSTABLE, Recoil_index_30 as waitForAll, Recoil_index_31 as waitForAllSettled, Recoil_index_29 as waitForAny, Recoil_index_28 as waitForNone };","map":{"version":3,"sources":["/usr/src/app/react-app/node_modules/recoil/es/recoil.js"],"names":["react","reactDom","isPromise","p","then","Recoil_isPromise","nullthrows","x","message","Error","Recoil_nullthrows","Canceled","CANCELED","loadableAccessors","valueMaybe","undefined","valueOrThrow","error","state","errorMaybe","errorOrThrow","promiseMaybe","promiseOrThrow","is","other","contents","map","next","loadableWithPromise","loadableWithValue","e","loadableWithError","catch","value","Object","freeze","getValue","toPromise","Promise","resolve","reject","promise","__value","loadableLoading","loadableAll","inputs","every","i","some","find","all","Recoil_Loadable","_useMutableSource","useMutableSource","unstable_useMutableSource","mutableSourceExists","window","$disableRecoilValueMutableSource_TEMP_HACK_DO_NOT_USE","Recoil_mutableSource","mutableSourceExists$1","gks","Map","set","Recoil_gkx","gk","_gks$get","get","setPass","setFail","Recoil_gkx_1","recoverableViolation","projectName","process","env","NODE_ENV","console","recoverableViolation_1","Recoil_recoverableViolation","setByAddingToSet","v","Set","add","setByDeletingFromSet","delete","mapBySettingInMap","k","mapByUpdatingInMap","updater","mapByDeletingFromMap","mapByDeletingMultipleFromMap","ks","forEach","Recoil_CopyOnWrite","filterIterable","iterable","predicate","index","Recoil_filterIterable","mapIterable","callback","Recoil_mapIterable","sprintf","format","args","replace","String","sprintf_1","expectationViolation","call","name","expectationViolation_1","Recoil_expectationViolation","_defineProperty","obj","key","defineProperty","enumerable","configurable","writable","AbstractRecoilValue","constructor","newKey","RecoilState","RecoilValueReadOnly","isRecoilValue","Recoil_RecoilValue","Recoil_RecoilValue_1","Recoil_RecoilValue_2","Recoil_RecoilValue_3","Recoil_RecoilValue_4","Recoil_RecoilValue$1","__proto__","DefaultValue","DEFAULT_VALUE","RecoilValueNotReady","nodes","recoilValues","recoilValuesForKeys","keys","registerNode","node","has","warn","recoilValue","NodeMissingError","getNode","getNodeMaybe","configDeletionHandlers","deleteNodeConfigIfPossible","_node$shouldDeleteCon","shouldDeleteConfigOnRelease","_getConfigDeletionHan","getConfigDeletionHandler","setConfigDeletionHandler","fn","Recoil_Node","RetentionZone","retentionZone","Recoil_RetentionZone","setByAddingToSet$1","getNode$1","getNodeMaybe$1","recoilValuesForKeys$1","RetentionZone$1","emptySet","ReadOnlyRecoilValueError","initializeRetentionForNode","store","nodeKey","retainedBy","nodesRetainedByZone","getState","retention","addToZone","zone","Array","isArray","deleteFromZone","size","initializeNodeIfNewToStore","treeState","trigger","storeState","nodeCleanupFunctions","config","retentionCleanup","nodeCleanup","init","cleanUpNode","_state$nodeCleanupFun","getNodeLoadable","peekNodeLoadable","peek","setUnvalidatedAtomValue_DEPRECATED","newValue","_node$invalidate","invalidate","atomValues","clone","nonvalidatedAtoms","dirtyAtoms","setNodeValue","peekNodeInfo","_graph$nodeDeps$get","_storeState$nodeToCom","_storeState$nodeToCom2","graph","getGraph","version","type","knownAtoms","knownSelectors","downstreamNodes","getDownstreamNodes","loadable","isActive","isSet","isModified","deps","nodeDeps","subscribers","components","nodeToComponentSubscriptions","values","visitedNodes","visitingNodes","from","pop","_graph$nodeToNodeSubs","subscribedNodes","nodeToNodeSubscriptions","downstreamNode","push","Recoil_FunctionalCore","CANCELED$1","getDownstreamNodes$1","getNodeLoadable$1","setNodeValue$1","getNodeMaybe$2","DefaultValue$1","RecoilValueNotReady$1","AbstractRecoilValue$1","RecoilState$1","RecoilValueReadOnly$1","isRecoilValue$1","getRecoilValueAsLoadable","currentTree","_storeState$nextTree","_storeState$previousT","nextTree","previousTree","applyAtomValueWrites","writes","result","valueFromValueOrUpdater","valueOrUpdater","current","applyAction","action","entries","writeLoadableToTreeState","unvalidatedValue","applyActionsToStore","actions","replaceState","newState","copyTreeState","invalidateDownstreams","queueOrPerformStateUpdate","batchStack","length","actionsByStore","batchStart","popped","downstreams","_getNodeMaybe","_getNodeMaybe$invalid","setRecoilValue","setRecoilValueLoadable","markRecoilValueModified","setUnvalidatedRecoilValue","subscriptionID","subscribeToRecoilValue","componentDebugName","subID","release","subs","Recoil_RecoilValueInterface","invalidateDownstreams_FOR_TESTING","unstable_batchedUpdates","ReactBatchedUpdates","unstable_batchedUpdates$1","Recoil_ReactBatchedUpdates","batchStart$1","unstable_batchedUpdates$2","batcher","setBatcher","newBatcher","getBatcher","batchUpdates","batchEnd","Recoil_Batching","enqueueExecution","s","f","Recoil_Queue","differenceSets","setsWithValuesToRemove","ret","FIRST","otherSet","Recoil_differenceSets","mapMap","Recoil_mapMap","cloneGraph","mergeDependencyMapIntoGraph","olderGraph","upstreams","downstream","existingUpstreams","addedUpstreams","upstream","existing","removedUpstreams","saveDependencyMapToStore","dependencyMap","_storeState$previousT2","_storeState$previousT3","currentGraph","_storeState$nextTree2","nextVersion","nextGraph","mergeDepsIntoDependencyMap","into","upstreamDeps","dep","addToDependencyMap","Recoil_Graph","createCommonjsModule","module","exports","hamt_1","_typeof","Symbol","iterator","prototype","hamt","SIZE","BUCKET_SIZE","Math","pow","MASK","MAX_INDEX_NODE","MIN_ARRAY_NODE","nothing","constant","hash","str","len","c","charCodeAt","popcount","hashFragment","shift","h","toBitmap","fromBitmap","bitmap","bit","arrayUpdate","mutate","at","arr","out","arraySpliceOut","newLen","g","arraySpliceIn","_i","LEAF","COLLISION","INDEX","ARRAY","empty","__hamt_isEmpty","isEmptyNode","Leaf","edit","_modify","Leaf__modify","Collision","children","Collision__modify","IndexedNode","mask","IndexedNode__modify","ArrayNode","ArrayNode__modify","isLeaf","expand","frag","child","subNodes","count","pack","removed","elements","elem","mergeLeaves","h1","n1","h2","n2","subH1","subH2","updateCollisionList","keyEq","list","_newValue","canEditNode","_v","canEdit","indx","exists","newChildren","newChild","editable","root","_editable","_edit","_config","_root","_size","setTree","newRoot","newSize","tryGetHash","alt","tryGet","getHash","hasHash","defKeyCompare","y","make","isEmpty","modifyHash","NaN","modify","setHash","del","removeHash","deleteHash","remove","beginMutation","endMutation","transient","appk","lazyVisitChildren","lazyVisit","rest","DONE","done","MapIterator","v0","visit","buildPairs","buildKeys","buildValues","fold","z","m","toVisit","_","BuiltInMap","_map","persistentMap","toMap","HashArrayMappedTrieMap","_hamt","Recoil_PersistentMap","Recoil_PersistentMap_1","Recoil_PersistentMap$1","graph$1","persistentMap$1","nextTreeStateVersion","getNextTreeStateVersion","makeEmptyTreeState","stateID","transactionMetadata","makeEmptyStoreState","commitDepth","transactionSubscriptions","nodeTransactionSubscriptions","queuedComponentCallbacks_DEPRECATED","suspendedComponentResolvers","graphsByVersion","versionsUsedByComponent","referenceCounts","retainablesToCheckForRelease","Recoil_State","unionSets","sets","Recoil_unionSets","someSet","context","entry","Recoil_someSet","cleanUpNode$1","deleteNodeConfigIfPossible$1","getNode$2","RetentionZone$2","emptySet$1","releaseRetainablesNowOnCurrentTree","retainables","r","n","releasableNodes","findReleasableNodes","releaseNode","searchFromNodes","nonReleasableNodes","findReleasableNodesInner","releasableNodesFoundThisIteration","getDownstreamNodesInTopologicalOrder","_storeState$retention","zonesThatCouldRetainNode","nodeChildren","parents","parent","doNotDescendInto1","doNotDescendInto2","answer","visited","zones","_storeState$retention2","_storeState$retention3","scheduleOrPerformPossibleReleaseOfRetainable","retainable","updateRetainCount","delta","_map$get","newCount","updateRetainCountToZero","releaseScheduledRetainablesNow","clear","retainedByOptionWithDefault","Recoil_Retention","concatIterables","iters","iter","val","Recoil_concatIterables","isSSR","isReactNative","navigator","product","Recoil_Environment","isSSR$1","batchUpdates$1","initializeNodeIfNewToStore$1","peekNodeInfo$1","graph$2","DEFAULT_VALUE$1","recoilValues$1","recoilValuesForKeys$2","AbstractRecoilValue$2","getRecoilValueAsLoadable$1","setRecoilValue$1","setUnvalidatedRecoilValue$1","updateRetainCount$1","getNextTreeStateVersion$1","makeEmptyStoreState$1","retainWarning","Snapshot","checkRefCount_INTERNAL","_store","getLoadable","opt","isInitialized","mapper","mutableSnapshot","MutableSnapshot","cloneSnapshot","getStore_INTERNAL","cb","replacer","graphs","newGraph","subscribeToTransactions","addTransactionMetadata","retain","autorelease_INTERNAL","_refCount","released","release_INTERNAL","setTimeout","getID","getID_INTERNAL","cloneStoreState","bumpVersion","freshSnapshot","initializeState","snapshot","batch","recoilState","newValueOrUpdater","_batch","Recoil_Snapshot","Recoil_Snapshot_1","Recoil_Snapshot_2","Recoil_Snapshot_3","Recoil_Snapshot_4","Recoil_Snapshot$1","getNextTreeStateVersion$2","makeEmptyStoreState$2","cleanUpNode$2","getDownstreamNodes$2","setNodeValue$2","setUnvalidatedAtomValue_DEPRECATED$1","graph$3","cloneGraph$1","applyAtomValueWrites$1","releaseScheduledRetainablesNow$1","freshSnapshot$1","useCallback","useContext","useEffect","useMemo","useRef","useState","notInAContext","defaultStore","stateReplacerIsBeingExecuted","startNextTreeIfNeeded","AppContext","createContext","useStoreRef","MutableSourceContext","useRecoilMutableSource","mutableSource","notifyComponents","dependentNodes","comps","_subID","_debugName","sendEndOfBatchNotifications","subscriptions","subscription","splice","endBatch","storeRef","Batcher","setNotifyBatcherOfChange","setState","$recoilDebugStates","initialStoreState_DEPRECATED","initial","atom","writtenNodes","setUnvalidatedAtomValues","initialStoreState","nextID","RecoilRoot_INTERNAL","initializeState_DEPRECATED","store_INTERNAL","storeProp","_createMutableSource","id","metadata","replaced","notifyBatcherOfChange","createMutableSource","unstable_createMutableSource","atomKey","createElement","Provider","RecoilRoot","props","override","propsExceptOverride","ancestorStoreRef","Recoil_RecoilRoot_react","notifyComponents_FOR_TESTING","sendEndOfBatchNotifications_FOR_TESTING","loadableWithValue$1","DEFAULT_VALUE$2","getNode$3","copyTreeState$1","getRecoilValueAsLoadable$2","invalidateDownstreams$1","writeLoadableToTreeState$1","isAtom","nodeType","TransactionInterfaceImpl","_changes","_treeState","newTreeState_INTERNAL","atomicUpdater","changeset","Recoil_AtomicUpdates","Recoil_AtomicUpdates_1","Recoil_AtomicUpdates$1","filterMap","Recoil_filterMap","filterSet","Recoil_filterSet","invariant","condition","invariant_1","Recoil_invariant","mergeMaps","maps","nextKey","Recoil_mergeMaps","shallowArrayEqual","a","b","l","Recoil_shallowArrayEqual","UNKNOWN_FUNCTION","stackTraceParser","stackString","lines","split","reduce","stack","line","parseResult","parseChrome","parseWinjs","parseGecko","parseNode","parseJSC","chromeRe","chromeEvalRe","parts","exec","isNative","indexOf","isEval","submatch","file","methodName","arguments","lineNumber","column","winjsRe","geckoRe","geckoEvalRe","javaScriptCoreRe","nodeRe","Recoil_stackTraceParser","useRef$1","useComponentName","nameRef","_nameRef$current","frames","match","Recoil_useComponentName","atomicUpdater$1","batchUpdates$2","DEFAULT_VALUE$3","getNode$4","nodes$1","useRecoilMutableSource$1","useStoreRef$1","isRecoilValue$2","AbstractRecoilValue$3","getRecoilValueAsLoadable$3","setRecoilValue$2","setRecoilValueLoadable$1","setUnvalidatedRecoilValue$2","subscribeToRecoilValue$1","updateRetainCount$2","RetentionZone$3","Snapshot$1","cloneSnapshot$1","setByAddingToSet$2","isSSR$2","mutableSourceExists$2","useMutableSource$1","useCallback$1","useEffect$1","useMemo$1","useRef$2","useState$1","SUSPENSE_TIMEOUT_MS","handleLoadable","err","validateRecoilValue","hookName","useRecoilInterface_DEPRECATED","forceUpdate","recoilValuesUsed","previousSubscriptions","unsubscribeFrom","sub","componentName","updateState","_state","useSetRecoilState","useResetRecoilState","useRecoilValueLoadable","useRecoilValue","useRecoilState","useRecoilStateLoadable","getRecoilValue","getRecoilValueLoadable","getRecoilState","getRecoilStateLoadable","getSetRecoilState","getResetRecoilState","recoilComponentGetRecoilValueCount_FOR_TESTING","useRecoilValueLoadable_MUTABLESOURCE","getLoadableWithTesting","subscribe","_storeState","newLoadable","prevLoadableRef","source","useRecoilValueLoadable_LEGACY","_prevLoadableRef$curr","_prevLoadableRef$curr2","useRetain","useTransactionSubscription","externallyVisibleAtomValuesInState","persistedAtomContentsValues","persistence","persistence_UNSTABLE","useTransactionObservation_DEPRECATED","previousAtomValues","atomInfo","_node$persistence_UNS","_node$persistence_UNS2","_node$persistence_UNS3","_node$persistence_UNS4","backButton","modifiedAtoms","useRecoilTransactionObserver","previousSnapshot","usePrevious","ref","useRecoilSnapshot","setSnapshot","timeoutID","clearTimeout","useGotoRecoilSnapshot","_storeState$nextTree3","prev","keysToUpdate","_prev$atomValues$get","_next$atomValues$get","shouldRestoreFromSnapshots","useSetUnvalidatedAtomValues","Sentinel","SENTINEL","useRecoilCallback","gotoSnapshot","reset","atomicUpdate","errMsg","transact_UNSTABLE","toRetain","useRetain_ACTUAL","array","previousRetainables","useRecoilTransaction","transactionInterface","Recoil_Hooks","useRecoilInterface","useTransactionSubscription_DEPRECATED","peekNodeInfo$2","useStoreRef$2","useGetRecoilValueInfo","Recoil_useGetRecoilValueInfo","RecoilRoot$1","useStoreRef$3","useMemo$2","useRecoilBridgeAcrossReactRoots","RecoilBridge","Recoil_useRecoilBridgeAcrossReactRoots","isNode","object","_ownerDocument","_doc$defaultView","doc","ownerDocument","document","defaultView","Node","nodeName","Recoil_isNode","isReactNative$1","isSSR$3","shouldNotBeFrozen","$$typeof","ArrayBuffer","isView","Window","deepFreezeValue","hasOwnProperty","prop","isFrozen","seal","Recoil_deepFreezeValue","TIME_WARNING_THRESHOLD_MS","stringify","includes","JSON","allowFunctions","_JSON$stringify","toString","toJSON","sort","localeCompare","filter","join","stableStringify","startTime","performance","now","endTime","groupCollapsed","groupEnd","Recoil_stableStringify","TreeCache","options","_options$onHit","_options$onSet","_options$mapNodeValue","_numLeafs","_onHit","onHit","_onSet","onSet","_mapNodeValue","mapNodeValue","getNodeValue","handlers","_this$getLeafNode","getLeafNode","findLeaf","onNodeVisit","route","leafNode","addLeaf","nodeValue","existsInTree","pruneNodeFromTree","branches","countDownstreamLeaves","_handlers$onNodeVisit","branchKey","_handlers$onNodeVisit2","path","pruneUpstreamBranches","branchNode","sum","currNode","Recoil_TreeCache","Recoil_TreeCache_1","Recoil_TreeCache$1","LRUCache","_options$mapKey","_maxSize","maxSize","_head","_tail","_keyMapper","mapKey","head","tail","mappedKey","existingNode","right","left","_maybeDeleteLRU","deleteLru","Recoil_LRUCache","Recoil_LRUCache_1","Recoil_LRUCache$1","LRUCache$1","TreeCache$1","treeCacheLRU","lruCache","cache","lruNode","Recoil_treeCacheLRU","TreeCache$2","defaultPolicy","equality","eviction","Infinity","treeCacheFromPolicy","valueMapper","getValueMapper","treeCache","getTreeCache","Recoil_treeCacheFromPolicy","startPerfBlock","_id","Recoil_PerformanceTimings","CANCELED$2","Canceled$1","loadableWithError$1","loadableWithPromise$1","loadableWithValue$2","getNodeLoadable$2","peekNodeLoadable$1","setNodeValue$3","saveDependencyMapToStore$1","DEFAULT_VALUE$4","RecoilValueNotReady$2","getConfigDeletionHandler$1","registerNode$1","isRecoilValue$3","AbstractRecoilValue$4","setRecoilValueLoadable$2","retainedByOptionWithDefault$1","cloneSnapshot$2","startPerfBlock$1","dependencyStack","waitingStores","getNewExecutionId","executionId","getInitialExecutionInfo","depValuesDiscoveredSoFarDuringAsyncWork","latestLoadable","latestExecutionId","stateVersion","selector","cachePolicy_UNSTABLE","cachePolicy","retainedBy_UNSTABLE","executionInfoMap","liveStoresCount","selectorIsLive","getExecutionInfo","selectorInit","selectorShouldDeleteConfigOnRelease","notifyStoreWhenAsyncSettles","stores","notifyStoresOfSettledAsync","getCachedNodeLoadable","isKeyPointingToSelector","wrapPendingPromise","depValues","clearExecutionInfo","maybeFreezeValue","setCache","depValuesToDepRoute","setDepsInStore","setLoadableInStoreToNotifyDeps","__key","errorOrPromise","isLatestExecution","updateExecutionInfoDepValues","wrapPendingDependencyPromise","existingDeps","resolvedDep","resolvedDepKey","depValue","bypassSelectorDepCacheOnReevaluation","cachedLoadable","getValFromCacheAndUpdatedDownstreamDeps","setExecutionInfo","evaluateSelectorGetter","maybeFreezeLoadableContents","_store$getState","_store$getState$curre","_store$getState2","_store$getState2$next","_store$getState$nextT","_store$getState3","_store$getState3$next","setNewDepInStore","newDepKey","bypassSelectorDepCache","endPerfBlock","resultIsError","depKey","depLoadable","gateCallback","getCallback","finally","errorOrDepPromise","depsAfterCacheDone","executionInfo","cachedVal","valLoadable","getValFromRunningNewExecutionAndUpdatedDeps","newExecutionId","newDepValues","maybeSetCacheWithLoadable","getSelectorValAndUpdatedDeps","inProgressExecutionInfo","getExecutionInfoOfInProgressExecution","_Array$from$find","haveAsyncDepsChanged","mapOfCheckedVersions","_executionInfo$depVal","_mapOfCheckedVersions","oldDepValues","cachedDepValuesCheckedForThisVersion","isCachedVersionSame","nodeVal","oldVal","depRoute","Boolean","dangerouslyAllowMutability","cacheRoute","detectCircularDependencies","slice","selectorPeek","cacheVal","selectorGet","invalidateSelector","selectorSet","syncSelectorSetFinished","setRecoilState","upstreamWrites","resetRecoilState","Recoil_selector","loadableWithError$2","loadableWithPromise$2","loadableWithValue$3","DEFAULT_VALUE$5","DefaultValue$2","getConfigDeletionHandler$2","registerNode$2","setConfigDeletionHandler$1","isRecoilValue$4","markRecoilValueModified$1","setRecoilValue$3","setRecoilValueLoadable$3","retainedByOptionWithDefault$2","baseAtom","defaultLoadable","default","promiseInfo","cachedAnswerForUnvalidatedValue","cleanupEffectsByStore","wrappedPromise","_state$atomValues$get","_store$getState$nextT2","_state$atomValues$get2","initAtom","initState","alreadyKnown","notifyDefaultSubscribers","_store$getState$nextT3","initValue","pendingSetSelf","effects_UNSTABLE","duringInit","setSelf","effect","currentValue","resetSelf","handler","currentStore","_currentTree$atomValu","_previousTree$atomVal","_pendingSetSelf","_pendingSetSelf2","_pendingSetSelf3","oldLoadable","oldValue","_options$effects_UNST","cleanup","_cleanupEffectsByStor","_store$getState$nextT4","initLoadable","_cleanupEffectsByStor2","peekAtom","_ref","_state$atomValues$get3","_cachedAnswerForUnval","getAtom","nonvalidatedValue","validatorResult","validator","validatedValueLoadable","invalidateAtom","setAtom","shouldDeleteConfigOnReleaseAtom","optionsDefault","restOptions","atomWithFallback","base","storedValue","sel","baseValue","Recoil_atom","MapCache","Recoil_MapCache","Recoil_MapCache_1","Recoil_MapCache$1","LRUCache$2","MapCache$1","defaultPolicy$1","cacheFromPolicy","getValueMapper$1","getCache","Recoil_cacheFromPolicy","setConfigDeletionHandler$2","atomFamily","_options$cachePolicyF","_options$cachePolicyF2","atomCache","cachePolicyForParams_UNSTABLE","params","_stableStringify","cachedAtom","atomOptions","newAtom","Recoil_atomFamily","setConfigDeletionHandler$3","nextIndex","selectorFamily","selectorCache","cachedSelector","myKey","myGet","callbacks","myCachePolicy","newSelector","mySet","Recoil_selectorFamily","constantSelector","constSelector","Recoil_constSelector","throwingSelector","errorSelector","Recoil_errorSelector","readOnlySelector","Recoil_readOnlySelector","loadableWithError$3","loadableWithPromise$3","loadableWithValue$4","concurrentRequests","results","fill","exceptions","isError","exp","unwrapDependencies","dependencies","getOwnPropertyNames","getValueFromLoadablePromiseResult","wrapResults","idx","wrapLoadables","output","exception","combineAsyncResultsWithSyncResults","syncResults","asyncResults","waitForNone","waitForAny","waitForAll","exceptionResults","waitForAllSettled","noWait","dependency","Recoil_WaitFor","batchUpdates$3","setBatcher$1","DefaultValue$3","RecoilRoot$2","isRecoilValue$5","retentionZone$1","freshSnapshot$2","useGotoRecoilSnapshot$1","useRecoilCallback$1","useRecoilSnapshot$1","useRecoilState$1","useRecoilStateLoadable$1","useRecoilTransaction$1","useRecoilTransactionObserver$1","useRecoilValue$1","useRecoilValueLoadable$1","useResetRecoilState$1","useRetain$1","useSetRecoilState$1","useSetUnvalidatedAtomValues$1","useTransactionObservation_DEPRECATED$1","noWait$1","waitForAll$1","waitForAllSettled$1","waitForAny$1","waitForNone$1","Recoil_index","useRecoilBridgeAcrossReactRoots_UNSTABLE","useGetRecoilValueInfo_UNSTABLE","useRecoilTransaction_UNSTABLE","useRecoilTransactionObserver_UNSTABLE","useTransactionObservation_UNSTABLE","useSetUnvalidatedAtomValues_UNSTABLE","snapshot_UNSTABLE","Recoil_index_1","Recoil_index_2","Recoil_index_3","Recoil_index_4","Recoil_index_5","Recoil_index_6","Recoil_index_7","Recoil_index_8","Recoil_index_9","Recoil_index_10","Recoil_index_11","Recoil_index_12","Recoil_index_13","Recoil_index_14","Recoil_index_15","Recoil_index_16","Recoil_index_17","Recoil_index_18","Recoil_index_19","Recoil_index_20","Recoil_index_21","Recoil_index_22","Recoil_index_23","Recoil_index_24","Recoil_index_25","Recoil_index_26","Recoil_index_27","Recoil_index_28","Recoil_index_29","Recoil_index_30","Recoil_index_31","Recoil_index_32","Recoil_index_33","Recoil_index_34","Recoil_index_35"],"mappings":"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","sourcesContent":["import react from 'react';\nimport reactDom from 'react-dom';\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\n// Split declaration and implementation to allow this function to pretend to\n// check for actual instance of Promise instead of something with a `then`\n// method.\n// eslint-disable-next-line no-redeclare\nfunction isPromise(p) {\n  return !!p && typeof p.then === 'function';\n}\n\nvar Recoil_isPromise = isPromise;\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nfunction nullthrows(x, message) {\n  if (x != null) {\n    return x;\n  }\n\n  throw new Error(message !== null && message !== void 0 ? message : 'Got unexpected null or undefined');\n}\n\nvar Recoil_nullthrows = nullthrows;\n\n// TODO Convert Loadable to a Class to allow for runtime type detection.\n// Containing static factories of withValue(), withError(), withPromise(), and all()\n\n\nclass Canceled {}\n\nconst CANCELED = new Canceled();\nconst loadableAccessors = {\n  valueMaybe() {\n    return undefined;\n  },\n\n  valueOrThrow() {\n    const error = new Error( // $FlowFixMe[object-this-reference]\n    `Loadable expected value, but in \"${this.state}\" state`); // V8 keeps closures alive until stack is accessed, this prevents a memory leak\n    throw error;\n  },\n\n  errorMaybe() {\n    return undefined;\n  },\n\n  errorOrThrow() {\n    const error = new Error( // $FlowFixMe[object-this-reference]\n    `Loadable expected error, but in \"${this.state}\" state`); // V8 keeps closures alive until stack is accessed, this prevents a memory leak\n    throw error;\n  },\n\n  promiseMaybe() {\n    return undefined;\n  },\n\n  promiseOrThrow() {\n    const error = new Error( // $FlowFixMe[object-this-reference]\n    `Loadable expected promise, but in \"${this.state}\" state`); // V8 keeps closures alive until stack is accessed, this prevents a memory leak\n    throw error;\n  },\n\n  is(other) {\n    // $FlowFixMe[object-this-reference]\n    return other.state === this.state && other.contents === this.contents;\n  },\n\n  // TODO Unit tests\n  // TODO Convert Loadable to a Class to better support chaining\n  //      by returning a Loadable from a map function\n  map(map) {\n    // $FlowFixMe[object-this-reference]\n    if (this.state === 'hasError') {\n      // $FlowFixMe[object-this-reference]\n      return this;\n    } // $FlowFixMe[object-this-reference]\n\n\n    if (this.state === 'hasValue') {\n      try {\n        // $FlowFixMe[object-this-reference]\n        const next = map(this.contents); // TODO if next instanceof Loadable, then return next\n\n        return Recoil_isPromise(next) ? loadableWithPromise(next) : loadableWithValue(next);\n      } catch (e) {\n        return Recoil_isPromise(e) ? // If we \"suspended\", then try again.\n        // errors and subsequent retries will be handled in 'loading' case\n        // $FlowFixMe[object-this-reference]\n        loadableWithPromise(e.next(() => map(this.contents))) : loadableWithError(e);\n      }\n    } // $FlowFixMe[object-this-reference]\n\n\n    if (this.state === 'loading') {\n      return loadableWithPromise( // $FlowFixMe[object-this-reference]\n      this.contents // TODO if map returns a loadable, then return the value or promise or throw the error\n      .then(map).catch(e => {\n        if (Recoil_isPromise(e)) {\n          // we were \"suspended,\" try again\n          // $FlowFixMe[object-this-reference]\n          return e.then(() => map(this.contents));\n        }\n\n        throw e;\n      }));\n    }\n\n    const error = new Error('Invalid Loadable state'); // V8 keeps closures alive until stack is accessed, this prevents a memory leak\n    throw error;\n  }\n\n};\n\nfunction loadableWithValue(value) {\n  // Build objects this way since Flow doesn't support disjoint unions for class properties\n  return Object.freeze({\n    state: 'hasValue',\n    contents: value,\n    ...loadableAccessors,\n\n    getValue() {\n      return this.contents;\n    },\n\n    toPromise() {\n      return Promise.resolve(this.contents);\n    },\n\n    valueMaybe() {\n      return this.contents;\n    },\n\n    valueOrThrow() {\n      return this.contents;\n    }\n\n  });\n}\n\nfunction loadableWithError(error) {\n  return Object.freeze({\n    state: 'hasError',\n    contents: error,\n    ...loadableAccessors,\n\n    getValue() {\n      throw this.contents;\n    },\n\n    toPromise() {\n      return Promise.reject(this.contents);\n    },\n\n    errorMaybe() {\n      return this.contents;\n    },\n\n    errorOrThrow() {\n      return this.contents;\n    }\n\n  });\n}\n\nfunction loadableWithPromise(promise) {\n  return Object.freeze({\n    state: 'loading',\n    contents: promise,\n    ...loadableAccessors,\n\n    getValue() {\n      throw this.contents.then(({\n        __value\n      }) => __value);\n    },\n\n    toPromise() {\n      return this.contents.then(({\n        __value\n      }) => __value);\n    },\n\n    promiseMaybe() {\n      return this.contents.then(({\n        __value\n      }) => __value);\n    },\n\n    promiseOrThrow() {\n      return this.contents.then(({\n        __value\n      }) => __value);\n    }\n\n  });\n}\n\nfunction loadableLoading() {\n  return loadableWithPromise(new Promise(() => {}));\n}\n\nfunction loadableAll(inputs) {\n  return inputs.every(i => i.state === 'hasValue') ? loadableWithValue(inputs.map(i => i.contents)) : inputs.some(i => i.state === 'hasError') ? loadableWithError(Recoil_nullthrows(inputs.find(i => i.state === 'hasError'), 'Invalid loadable passed to loadableAll').contents) : loadableWithPromise(Promise.all(inputs.map(i => i.contents)).then(value => ({\n    __value: value\n  })));\n}\n\nvar Recoil_Loadable = {\n  loadableWithValue,\n  loadableWithError,\n  loadableWithPromise,\n  loadableLoading,\n  loadableAll,\n  Canceled,\n  CANCELED\n};\n\nvar _useMutableSource;\n\n // FIXME T2710559282599660\n\n\nconst useMutableSource = // flowlint-line unclear-type:off\n(_useMutableSource = react.useMutableSource) !== null && _useMutableSource !== void 0 ? _useMutableSource : react.unstable_useMutableSource; // flowlint-line unclear-type:off\n\nfunction mutableSourceExists() {\n  return useMutableSource && !(typeof window !== 'undefined' && window.$disableRecoilValueMutableSource_TEMP_HACK_DO_NOT_USE);\n}\n\nvar Recoil_mutableSource = {\n  mutableSourceExists,\n  useMutableSource\n};\n\nconst {\n  mutableSourceExists: mutableSourceExists$1\n} = Recoil_mutableSource;\n\nconst gks = new Map().set('recoil_hamt_2020', true).set('recoil_memory_managament_2020', true);\n\nfunction Recoil_gkx(gk) {\n  var _gks$get;\n\n  if (gk === 'recoil_early_rendering_2021' && !mutableSourceExists$1()) {\n    return false;\n  }\n\n  return (_gks$get = gks.get(gk)) !== null && _gks$get !== void 0 ? _gks$get : false;\n}\n\nRecoil_gkx.setPass = gk => {\n  gks.set(gk, true);\n};\n\nRecoil_gkx.setFail = gk => {\n  gks.set(gk, false);\n};\n\nvar Recoil_gkx_1 = Recoil_gkx; // @oss-only\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nfunction recoverableViolation(message, projectName, {\n  error\n} = {}) {\n  if (process.env.NODE_ENV !== \"production\") {\n    console.error(message, error);\n  }\n\n  return null;\n}\n\nvar recoverableViolation_1 = recoverableViolation;\n\n// @oss-only\n\n\nvar Recoil_recoverableViolation = recoverableViolation_1;\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Utilities for working with built-in Maps and Sets without mutating them.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nfunction setByAddingToSet(set, v) {\n  const next = new Set(set);\n  next.add(v);\n  return next;\n}\n\nfunction setByDeletingFromSet(set, v) {\n  const next = new Set(set);\n  next.delete(v);\n  return next;\n}\n\nfunction mapBySettingInMap(map, k, v) {\n  const next = new Map(map);\n  next.set(k, v);\n  return next;\n}\n\nfunction mapByUpdatingInMap(map, k, updater) {\n  const next = new Map(map);\n  next.set(k, updater(next.get(k)));\n  return next;\n}\n\nfunction mapByDeletingFromMap(map, k) {\n  const next = new Map(map);\n  next.delete(k);\n  return next;\n}\n\nfunction mapByDeletingMultipleFromMap(map, ks) {\n  const next = new Map(map);\n  ks.forEach(k => next.delete(k));\n  return next;\n}\n\nvar Recoil_CopyOnWrite = {\n  setByAddingToSet,\n  setByDeletingFromSet,\n  mapBySettingInMap,\n  mapByUpdatingInMap,\n  mapByDeletingFromMap,\n  mapByDeletingMultipleFromMap\n};\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n/**\n * Creates a new iterable whose output is generated by passing the input\n * iterable's values through the filter function.\n */\n\nfunction* filterIterable(iterable, predicate) {\n  // Use generator to create iterable/iterator\n  let index = 0;\n\n  for (const value of iterable) {\n    if (predicate(value, index++)) {\n      yield value;\n    }\n  }\n}\n\nvar Recoil_filterIterable = filterIterable;\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n/**\n * Creates a new iterable whose output is generated by passing the input\n * iterable's values through the mapper function.\n */\n\nfunction mapIterable(iterable, callback) {\n  // Use generator to create iterable/iterator\n  return function* () {\n    let index = 0;\n\n    for (const value of iterable) {\n      yield callback(value, index++);\n    }\n  }();\n}\n\nvar Recoil_mapIterable = mapIterable;\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nfunction sprintf(format, ...args) {\n  let index = 0;\n  return format.replace(/%s/g, () => String(args[index++]));\n}\n\nvar sprintf_1 = sprintf;\n\nfunction expectationViolation(format, ...args) {\n  if (process.env.NODE_ENV !== \"production\") {\n    const message = sprintf_1.call(null, format, ...args);\n    const error = new Error(message);\n    error.name = 'Expectation Violation';\n    console.error(error);\n  }\n}\n\nvar expectationViolation_1 = expectationViolation;\n\n// @oss-only\n\n\nvar Recoil_expectationViolation = expectationViolation_1;\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\n// eslint-disable-next-line no-unused-vars\nclass AbstractRecoilValue {\n  constructor(newKey) {\n    _defineProperty(this, \"key\", void 0);\n\n    this.key = newKey;\n  }\n\n}\n\nclass RecoilState extends AbstractRecoilValue {}\n\nclass RecoilValueReadOnly extends AbstractRecoilValue {}\n\nfunction isRecoilValue(x) {\n  return x instanceof RecoilState || x instanceof RecoilValueReadOnly;\n}\n\nvar Recoil_RecoilValue = {\n  AbstractRecoilValue,\n  RecoilState,\n  RecoilValueReadOnly,\n  isRecoilValue\n};\n\nvar Recoil_RecoilValue_1 = Recoil_RecoilValue.AbstractRecoilValue;\nvar Recoil_RecoilValue_2 = Recoil_RecoilValue.RecoilState;\nvar Recoil_RecoilValue_3 = Recoil_RecoilValue.RecoilValueReadOnly;\nvar Recoil_RecoilValue_4 = Recoil_RecoilValue.isRecoilValue;\n\nvar Recoil_RecoilValue$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  AbstractRecoilValue: Recoil_RecoilValue_1,\n  RecoilState: Recoil_RecoilValue_2,\n  RecoilValueReadOnly: Recoil_RecoilValue_3,\n  isRecoilValue: Recoil_RecoilValue_4\n});\n\nclass DefaultValue {}\n\nconst DEFAULT_VALUE = new DefaultValue();\n\nclass RecoilValueNotReady extends Error {\n  constructor(key) {\n    super(`Tried to set the value of Recoil selector ${key} using an updater function, but it is an async selector in a pending or error state; this is not supported.`);\n  }\n\n}\n\n// flowlint-next-line unclear-type:off\nconst nodes = new Map(); // flowlint-next-line unclear-type:off\n\nconst recoilValues = new Map();\n/* eslint-disable no-redeclare */\n\nfunction recoilValuesForKeys(keys) {\n  return Recoil_mapIterable(keys, key => Recoil_nullthrows(recoilValues.get(key)));\n}\n\nfunction registerNode(node) {\n  if (nodes.has(node.key)) {\n    const message = `Duplicate atom key \"${node.key}\". This is a FATAL ERROR in\n      production. But it is safe to ignore this warning if it occurred because of\n      hot module replacement.`; // TODO Need to figure out if there is a standard/open-source equivalent to see if hot module replacement is happening:\n    // prettier-ignore\n    // @fb-only: if (__DEV__) {\n    // @fb-only: const isAcceptingUpdate = require('__debug').isAcceptingUpdate;\n    // prettier-ignore\n    // @fb-only: if (typeof isAcceptingUpdate !== 'function' || !isAcceptingUpdate()) {\n    // @fb-only: expectationViolation(message, 'recoil');\n    // @fb-only: }\n    // prettier-ignore\n    // @fb-only: } else {\n    // @fb-only: recoverableViolation(message, 'recoil');\n    // @fb-only: }\n\n    console.warn(message); // @oss-only\n  }\n\n  nodes.set(node.key, node);\n  const recoilValue = node.set == null ? new Recoil_RecoilValue$1.RecoilValueReadOnly(node.key) : new Recoil_RecoilValue$1.RecoilState(node.key);\n  recoilValues.set(node.key, recoilValue);\n  return recoilValue;\n}\n/* eslint-enable no-redeclare */\n\n\nclass NodeMissingError extends Error {} // flowlint-next-line unclear-type:off\n\n\nfunction getNode(key) {\n  const node = nodes.get(key);\n\n  if (node == null) {\n    throw new NodeMissingError(`Missing definition for RecoilValue: \"${key}\"\"`);\n  }\n\n  return node;\n} // flowlint-next-line unclear-type:off\n\n\nfunction getNodeMaybe(key) {\n  return nodes.get(key);\n}\n\nconst configDeletionHandlers = new Map();\n\nfunction deleteNodeConfigIfPossible(key) {\n  var _node$shouldDeleteCon;\n\n  if (!Recoil_gkx_1('recoil_memory_managament_2020')) {\n    return;\n  }\n\n  const node = nodes.get(key);\n\n  if (node === null || node === void 0 ? void 0 : (_node$shouldDeleteCon = node.shouldDeleteConfigOnRelease) === null || _node$shouldDeleteCon === void 0 ? void 0 : _node$shouldDeleteCon.call(node)) {\n    var _getConfigDeletionHan;\n\n    nodes.delete(key);\n    (_getConfigDeletionHan = getConfigDeletionHandler(key)) === null || _getConfigDeletionHan === void 0 ? void 0 : _getConfigDeletionHan();\n    configDeletionHandlers.delete(key);\n  }\n}\n\nfunction setConfigDeletionHandler(key, fn) {\n  if (!Recoil_gkx_1('recoil_memory_managament_2020')) {\n    return;\n  }\n\n  if (fn === undefined) {\n    configDeletionHandlers.delete(key);\n  } else {\n    configDeletionHandlers.set(key, fn);\n  }\n}\n\nfunction getConfigDeletionHandler(key) {\n  return configDeletionHandlers.get(key);\n}\n\nvar Recoil_Node = {\n  nodes,\n  recoilValues,\n  registerNode,\n  getNode,\n  getNodeMaybe,\n  deleteNodeConfigIfPossible,\n  setConfigDeletionHandler,\n  getConfigDeletionHandler,\n  recoilValuesForKeys,\n  NodeMissingError,\n  DefaultValue,\n  DEFAULT_VALUE,\n  RecoilValueNotReady\n};\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nclass RetentionZone {}\n\nfunction retentionZone() {\n  return new RetentionZone();\n}\n\nvar Recoil_RetentionZone = {\n  RetentionZone,\n  retentionZone\n};\n\nconst {\n  setByAddingToSet: setByAddingToSet$1\n} = Recoil_CopyOnWrite;\n\n\n\n\n\n\n\nconst {\n  getNode: getNode$1,\n  getNodeMaybe: getNodeMaybe$1,\n  recoilValuesForKeys: recoilValuesForKeys$1\n} = Recoil_Node;\n\nconst {\n  RetentionZone: RetentionZone$1\n} = Recoil_RetentionZone; // flowlint-next-line unclear-type:off\n\n\nconst emptySet = Object.freeze(new Set());\n\nclass ReadOnlyRecoilValueError extends Error {}\n\nfunction initializeRetentionForNode(store, nodeKey, retainedBy) {\n  if (!Recoil_gkx_1('recoil_memory_managament_2020')) {\n    return () => undefined;\n  }\n\n  const {\n    nodesRetainedByZone\n  } = store.getState().retention;\n\n  function addToZone(zone) {\n    let set = nodesRetainedByZone.get(zone);\n\n    if (!set) {\n      nodesRetainedByZone.set(zone, set = new Set());\n    }\n\n    set.add(nodeKey);\n  }\n\n  if (retainedBy instanceof RetentionZone$1) {\n    addToZone(retainedBy);\n  } else if (Array.isArray(retainedBy)) {\n    for (const zone of retainedBy) {\n      addToZone(zone);\n    }\n  }\n\n  return () => {\n    if (!Recoil_gkx_1('recoil_memory_managament_2020')) {\n      return;\n    }\n\n    const nodesRetainedByZone = store.getState().retention.nodesRetainedByZone;\n\n    function deleteFromZone(zone) {\n      const set = nodesRetainedByZone.get(zone);\n\n      if (set) {\n        set.delete(nodeKey);\n      }\n\n      if (set && set.size === 0) {\n        nodesRetainedByZone.delete(zone);\n      }\n    }\n\n    if (retainedBy instanceof RetentionZone$1) {\n      deleteFromZone(retainedBy);\n    } else if (Array.isArray(retainedBy)) {\n      for (const zone of retainedBy) {\n        deleteFromZone(zone);\n      }\n    }\n  };\n}\n\nfunction initializeNodeIfNewToStore(store, treeState, key, trigger) {\n  const storeState = store.getState();\n\n  if (storeState.nodeCleanupFunctions.has(key)) {\n    return;\n  }\n\n  const config = getNode$1(key);\n  const retentionCleanup = initializeRetentionForNode(store, key, config.retainedBy);\n  const nodeCleanup = config.init(store, treeState, trigger);\n  storeState.nodeCleanupFunctions.set(key, () => {\n    nodeCleanup();\n    retentionCleanup();\n  });\n}\n\nfunction cleanUpNode(store, key) {\n  var _state$nodeCleanupFun;\n\n  const state = store.getState();\n  (_state$nodeCleanupFun = state.nodeCleanupFunctions.get(key)) === null || _state$nodeCleanupFun === void 0 ? void 0 : _state$nodeCleanupFun();\n  state.nodeCleanupFunctions.delete(key);\n} // Get the current value loadable of a node and update the state.\n// Update dependencies and subscriptions for selectors.\n// Update saved value validation for atoms.\n\n\nfunction getNodeLoadable(store, state, key) {\n  initializeNodeIfNewToStore(store, state, key, 'get');\n  return getNode$1(key).get(store, state);\n} // Peek at the current value loadable for a node without any evaluation or state change\n\n\nfunction peekNodeLoadable(store, state, key) {\n  return getNode$1(key).peek(store, state);\n} // Write value directly to state bypassing the Node interface as the node\n// definitions may not have been loaded yet when processing the initial snapshot.\n\n\nfunction setUnvalidatedAtomValue_DEPRECATED(state, key, newValue) {\n  var _node$invalidate;\n\n  const node = getNodeMaybe$1(key);\n  node === null || node === void 0 ? void 0 : (_node$invalidate = node.invalidate) === null || _node$invalidate === void 0 ? void 0 : _node$invalidate.call(node, state);\n  return { ...state,\n    atomValues: state.atomValues.clone().delete(key),\n    nonvalidatedAtoms: state.nonvalidatedAtoms.clone().set(key, newValue),\n    dirtyAtoms: setByAddingToSet$1(state.dirtyAtoms, key)\n  };\n} // Return the discovered dependencies and values to be written by setting\n// a node value. (Multiple values may be written due to selectors getting to\n// set upstreams; deps may be discovered because of reads in updater functions.)\n\n\nfunction setNodeValue(store, state, key, newValue) {\n  const node = getNode$1(key);\n\n  if (node.set == null) {\n    throw new ReadOnlyRecoilValueError(`Attempt to set read-only RecoilValue: ${key}`);\n  }\n\n  const set = node.set; // so flow doesn't lose the above refinement.\n\n  initializeNodeIfNewToStore(store, state, key, 'set');\n  return set(store, state, newValue);\n}\n\nfunction peekNodeInfo(store, state, key) {\n  var _graph$nodeDeps$get, _storeState$nodeToCom, _storeState$nodeToCom2;\n\n  const storeState = store.getState();\n  const graph = store.getGraph(state.version);\n  const type = storeState.knownAtoms.has(key) ? 'atom' : storeState.knownSelectors.has(key) ? 'selector' : undefined;\n  const downstreamNodes = Recoil_filterIterable(getDownstreamNodes(store, state, new Set([key])), nodeKey => nodeKey !== key);\n  return {\n    loadable: peekNodeLoadable(store, state, key),\n    isActive: storeState.knownAtoms.has(key) || storeState.knownSelectors.has(key),\n    isSet: type === 'selector' ? false : state.atomValues.has(key),\n    isModified: state.dirtyAtoms.has(key),\n    type,\n    // Report current dependencies.  If the node hasn't been evaluated, then\n    // dependencies may be missing based on the current state.\n    deps: recoilValuesForKeys$1((_graph$nodeDeps$get = graph.nodeDeps.get(key)) !== null && _graph$nodeDeps$get !== void 0 ? _graph$nodeDeps$get : []),\n    // Reportsall \"current\" subscribers.  Evaluating other nodes or\n    // previous in-progress async evaluations may introduce new subscribers.\n    subscribers: {\n      nodes: recoilValuesForKeys$1(downstreamNodes),\n      components: Recoil_mapIterable((_storeState$nodeToCom = (_storeState$nodeToCom2 = storeState.nodeToComponentSubscriptions.get(key)) === null || _storeState$nodeToCom2 === void 0 ? void 0 : _storeState$nodeToCom2.values()) !== null && _storeState$nodeToCom !== void 0 ? _storeState$nodeToCom : [], ([name]) => ({\n        name\n      }))\n    }\n  };\n} // Find all of the recursively dependent nodes\n\n\nfunction getDownstreamNodes(store, state, keys) {\n  const visitedNodes = new Set();\n  const visitingNodes = Array.from(keys);\n  const graph = store.getGraph(state.version);\n\n  for (let key = visitingNodes.pop(); key; key = visitingNodes.pop()) {\n    var _graph$nodeToNodeSubs;\n\n    visitedNodes.add(key);\n    const subscribedNodes = (_graph$nodeToNodeSubs = graph.nodeToNodeSubscriptions.get(key)) !== null && _graph$nodeToNodeSubs !== void 0 ? _graph$nodeToNodeSubs : emptySet;\n\n    for (const downstreamNode of subscribedNodes) {\n      if (!visitedNodes.has(downstreamNode)) {\n        visitingNodes.push(downstreamNode);\n      }\n    }\n  }\n\n  return visitedNodes;\n}\n\nvar Recoil_FunctionalCore = {\n  getNodeLoadable,\n  peekNodeLoadable,\n  setNodeValue,\n  cleanUpNode,\n  setUnvalidatedAtomValue_DEPRECATED,\n  peekNodeInfo,\n  getDownstreamNodes,\n  initializeNodeIfNewToStore\n};\n\nconst {\n  CANCELED: CANCELED$1\n} = Recoil_Loadable;\n\n\n\n\n\n\n\nconst {\n  getDownstreamNodes: getDownstreamNodes$1,\n  getNodeLoadable: getNodeLoadable$1,\n  setNodeValue: setNodeValue$1\n} = Recoil_FunctionalCore;\n\nconst {\n  getNodeMaybe: getNodeMaybe$2\n} = Recoil_Node;\n\nconst {\n  DefaultValue: DefaultValue$1,\n  RecoilValueNotReady: RecoilValueNotReady$1\n} = Recoil_Node;\n\nconst {\n  AbstractRecoilValue: AbstractRecoilValue$1,\n  RecoilState: RecoilState$1,\n  RecoilValueReadOnly: RecoilValueReadOnly$1,\n  isRecoilValue: isRecoilValue$1\n} = Recoil_RecoilValue$1;\n\nfunction getRecoilValueAsLoadable(store, {\n  key\n}, treeState = store.getState().currentTree) {\n  var _storeState$nextTree, _storeState$previousT;\n\n  // Reading from an older tree can cause bugs because the dependencies that we\n  // discover during the read are lost.\n  const storeState = store.getState();\n\n  if (!(treeState.version === storeState.currentTree.version || treeState.version === ((_storeState$nextTree = storeState.nextTree) === null || _storeState$nextTree === void 0 ? void 0 : _storeState$nextTree.version) || treeState.version === ((_storeState$previousT = storeState.previousTree) === null || _storeState$previousT === void 0 ? void 0 : _storeState$previousT.version))) {\n    Recoil_recoverableViolation('Tried to read from a discarded tree');\n  }\n\n  const loadable = getNodeLoadable$1(store, treeState, key);\n\n  if (loadable.state === 'loading') {\n    loadable.contents.catch(() => {\n      /**\n       * HACK: intercept thrown error here to prevent an uncaught promise exception. Ideally this would happen closer to selector\n       * execution (perhaps introducing a new ERROR class to be resolved by async selectors that are in an error state)\n       */\n      return CANCELED$1;\n    });\n  }\n\n  return loadable;\n}\n\nfunction applyAtomValueWrites(atomValues, writes) {\n  const result = atomValues.clone();\n  writes.forEach((v, k) => {\n    if (v.state === 'hasValue' && v.contents instanceof DefaultValue$1) {\n      result.delete(k);\n    } else {\n      result.set(k, v);\n    }\n  });\n  return result;\n}\n\nfunction valueFromValueOrUpdater(store, state, {\n  key\n}, valueOrUpdater) {\n  if (typeof valueOrUpdater === 'function') {\n    // Updater form: pass in the current value. Throw if the current value\n    // is unavailable (namely when updating an async selector that's\n    // pending or errored):\n    const current = getNodeLoadable$1(store, state, key);\n\n    if (current.state === 'loading') {\n      throw new RecoilValueNotReady$1(key);\n    } else if (current.state === 'hasError') {\n      throw current.contents;\n    } // T itself may be a function, so our refinement is not sufficient:\n\n\n    return valueOrUpdater(current.contents); // flowlint-line unclear-type:off\n  } else {\n    return valueOrUpdater;\n  }\n}\n\nfunction applyAction(store, state, action) {\n  if (action.type === 'set') {\n    const {\n      recoilValue,\n      valueOrUpdater\n    } = action;\n    const newValue = valueFromValueOrUpdater(store, state, recoilValue, valueOrUpdater);\n    const writes = setNodeValue$1(store, state, recoilValue.key, newValue);\n\n    for (const [key, loadable] of writes.entries()) {\n      writeLoadableToTreeState(state, key, loadable);\n    }\n  } else if (action.type === 'setLoadable') {\n    const {\n      recoilValue: {\n        key\n      },\n      loadable\n    } = action;\n    writeLoadableToTreeState(state, key, loadable);\n  } else if (action.type === 'markModified') {\n    const {\n      recoilValue: {\n        key\n      }\n    } = action;\n    state.dirtyAtoms.add(key);\n  } else if (action.type === 'setUnvalidated') {\n    var _node$invalidate;\n\n    // Write value directly to state bypassing the Node interface as the node\n    // definitions may not have been loaded yet when processing the initial snapshot.\n    const {\n      recoilValue: {\n        key\n      },\n      unvalidatedValue\n    } = action;\n    const node = getNodeMaybe$2(key);\n    node === null || node === void 0 ? void 0 : (_node$invalidate = node.invalidate) === null || _node$invalidate === void 0 ? void 0 : _node$invalidate.call(node, state);\n    state.atomValues.delete(key);\n    state.nonvalidatedAtoms.set(key, unvalidatedValue);\n    state.dirtyAtoms.add(key);\n  } else {\n    Recoil_recoverableViolation(`Unknown action ${action.type}`);\n  }\n}\n\nfunction writeLoadableToTreeState(state, key, loadable) {\n  if (loadable.state === 'hasValue' && loadable.contents instanceof DefaultValue$1) {\n    state.atomValues.delete(key);\n  } else {\n    state.atomValues.set(key, loadable);\n  }\n\n  state.dirtyAtoms.add(key);\n  state.nonvalidatedAtoms.delete(key);\n}\n\nfunction applyActionsToStore(store, actions) {\n  store.replaceState(state => {\n    const newState = copyTreeState(state);\n\n    for (const action of actions) {\n      applyAction(store, newState, action);\n    }\n\n    invalidateDownstreams(store, newState);\n    return newState;\n  });\n}\n\nfunction queueOrPerformStateUpdate(store, action) {\n  if (batchStack.length) {\n    const actionsByStore = batchStack[batchStack.length - 1];\n    let actions = actionsByStore.get(store);\n\n    if (!actions) {\n      actionsByStore.set(store, actions = []);\n    }\n\n    actions.push(action);\n  } else {\n    applyActionsToStore(store, [action]);\n  }\n}\n\nconst batchStack = [];\n\nfunction batchStart() {\n  const actionsByStore = new Map();\n  batchStack.push(actionsByStore);\n  return () => {\n    for (const [store, actions] of actionsByStore) {\n      applyActionsToStore(store, actions);\n    }\n\n    const popped = batchStack.pop();\n\n    if (popped !== actionsByStore) {\n      Recoil_recoverableViolation('Incorrect order of batch popping');\n    }\n  };\n}\n\nfunction copyTreeState(state) {\n  return { ...state,\n    atomValues: state.atomValues.clone(),\n    nonvalidatedAtoms: state.nonvalidatedAtoms.clone(),\n    dirtyAtoms: new Set(state.dirtyAtoms)\n  };\n}\n\nfunction invalidateDownstreams(store, state) {\n  // Inform any nodes that were changed or downstream of changes so that they\n  // can clear out any caches as needed due to the update:\n  const downstreams = getDownstreamNodes$1(store, state, state.dirtyAtoms);\n\n  for (const key of downstreams) {\n    var _getNodeMaybe, _getNodeMaybe$invalid;\n\n    (_getNodeMaybe = getNodeMaybe$2(key)) === null || _getNodeMaybe === void 0 ? void 0 : (_getNodeMaybe$invalid = _getNodeMaybe.invalidate) === null || _getNodeMaybe$invalid === void 0 ? void 0 : _getNodeMaybe$invalid.call(_getNodeMaybe, state);\n  }\n}\n\nfunction setRecoilValue(store, recoilValue, valueOrUpdater) {\n  queueOrPerformStateUpdate(store, {\n    type: 'set',\n    recoilValue,\n    valueOrUpdater\n  });\n}\n\nfunction setRecoilValueLoadable(store, recoilValue, loadable) {\n  if (loadable instanceof DefaultValue$1) {\n    return setRecoilValue(store, recoilValue, loadable);\n  }\n\n  queueOrPerformStateUpdate(store, {\n    type: 'setLoadable',\n    recoilValue,\n    loadable\n  });\n}\n\nfunction markRecoilValueModified(store, recoilValue) {\n  queueOrPerformStateUpdate(store, {\n    type: 'markModified',\n    recoilValue\n  });\n}\n\nfunction setUnvalidatedRecoilValue(store, recoilValue, unvalidatedValue) {\n  queueOrPerformStateUpdate(store, {\n    type: 'setUnvalidated',\n    recoilValue,\n    unvalidatedValue\n  });\n}\n\nlet subscriptionID = 0;\n\nfunction subscribeToRecoilValue(store, {\n  key\n}, callback, componentDebugName = null) {\n  const subID = subscriptionID++;\n  const storeState = store.getState();\n\n  if (!storeState.nodeToComponentSubscriptions.has(key)) {\n    storeState.nodeToComponentSubscriptions.set(key, new Map());\n  }\n\n  Recoil_nullthrows(storeState.nodeToComponentSubscriptions.get(key)).set(subID, [componentDebugName !== null && componentDebugName !== void 0 ? componentDebugName : '<not captured>', callback]); // Handle the case that, during the same tick that we are subscribing, an atom\n  // has been updated by some effect handler. Otherwise we will miss the update.\n\n  if (Recoil_gkx_1('recoil_early_rendering_2021')) {\n    const nextTree = store.getState().nextTree;\n\n    if (nextTree && nextTree.dirtyAtoms.has(key)) {\n      callback(nextTree);\n    }\n  }\n\n  return {\n    release: () => {\n      const storeState = store.getState();\n      const subs = storeState.nodeToComponentSubscriptions.get(key);\n\n      if (subs === undefined || !subs.has(subID)) {\n        Recoil_recoverableViolation(`Subscription missing at release time for atom ${key}. This is a bug in Recoil.`);\n        return;\n      }\n\n      subs.delete(subID);\n\n      if (subs.size === 0) {\n        storeState.nodeToComponentSubscriptions.delete(key);\n      }\n    }\n  };\n}\n\nvar Recoil_RecoilValueInterface = {\n  RecoilValueReadOnly: RecoilValueReadOnly$1,\n  AbstractRecoilValue: AbstractRecoilValue$1,\n  RecoilState: RecoilState$1,\n  getRecoilValueAsLoadable,\n  setRecoilValue,\n  setRecoilValueLoadable,\n  markRecoilValueModified,\n  setUnvalidatedRecoilValue,\n  subscribeToRecoilValue,\n  isRecoilValue: isRecoilValue$1,\n  applyAtomValueWrites,\n  // TODO Remove export when deprecating initialStoreState_DEPRECATED in RecoilRoot\n  batchStart,\n  writeLoadableToTreeState,\n  invalidateDownstreams,\n  copyTreeState,\n  invalidateDownstreams_FOR_TESTING: invalidateDownstreams\n};\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n *\n * This is to export esstiential functions from react-dom\n * for our web build\n */\nconst {\n  unstable_batchedUpdates\n} = reactDom;\n\nvar ReactBatchedUpdates = {\n  unstable_batchedUpdates\n};\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n *\n * This is to export esstiential functions from react-dom\n * for our web build\n */\n// @fb-only: const {unstable_batchedUpdates} = require('ReactDOMComet');\nconst {\n  unstable_batchedUpdates: unstable_batchedUpdates$1\n} = ReactBatchedUpdates; // @oss-only\n\n\nvar Recoil_ReactBatchedUpdates = {\n  unstable_batchedUpdates: unstable_batchedUpdates$1\n};\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\nconst {\n  batchStart: batchStart$1\n} = Recoil_RecoilValueInterface;\n\nconst {\n  unstable_batchedUpdates: unstable_batchedUpdates$2\n} = Recoil_ReactBatchedUpdates;\n\nlet batcher = unstable_batchedUpdates$2; // flowlint-next-line unclear-type:off\n\n/**\n * Sets the provided batcher function as the batcher function used by Recoil.\n *\n * Set the batcher to a custom batcher for your renderer,\n * if you use a renderer other than React DOM or React Native.\n */\nconst setBatcher = newBatcher => {\n  batcher = newBatcher;\n};\n/**\n * Returns the current batcher function.\n */\n\n\nconst getBatcher = () => batcher;\n/**\n * Calls the current batcher function and passes the\n * provided callback function.\n */\n\n\nconst batchUpdates = callback => {\n  batcher(() => {\n    let batchEnd = () => undefined;\n\n    try {\n      batchEnd = batchStart$1();\n      callback();\n    } finally {\n      batchEnd();\n    }\n  });\n};\n\nvar Recoil_Batching = {\n  getBatcher,\n  setBatcher,\n  batchUpdates\n};\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nfunction enqueueExecution(s, f) {\n  f();\n}\n\nvar Recoil_Queue = {\n  enqueueExecution\n};\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n/**\n * Returns a set containing all of the values from the first set that are not\n * present in any of the subsequent sets.\n *\n * Note: this is written procedurally (i.e., without filterSet) for performant\n * use in tight loops.\n */\n\nfunction differenceSets(set, ...setsWithValuesToRemove) {\n  const ret = new Set();\n\n  FIRST: for (const value of set) {\n    for (const otherSet of setsWithValuesToRemove) {\n      if (otherSet.has(value)) {\n        continue FIRST;\n      }\n    }\n\n    ret.add(value);\n  }\n\n  return ret;\n}\n\nvar Recoil_differenceSets = differenceSets;\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n/**\n * Returns a new Map object with the same keys as the original, but with the\n * values replaced with the output of the given callback function.\n */\n\nfunction mapMap(map, callback) {\n  const result = new Map();\n  map.forEach((value, key) => {\n    result.set(key, callback(value, key));\n  });\n  return result;\n}\n\nvar Recoil_mapMap = mapMap;\n\nfunction graph() {\n  return {\n    nodeDeps: new Map(),\n    nodeToNodeSubscriptions: new Map()\n  };\n}\n\nfunction cloneGraph(graph) {\n  return {\n    nodeDeps: Recoil_mapMap(graph.nodeDeps, s => new Set(s)),\n    nodeToNodeSubscriptions: Recoil_mapMap(graph.nodeToNodeSubscriptions, s => new Set(s))\n  };\n} // Note that this overwrites the deps of existing nodes, rather than unioning\n// the new deps with the old deps.\n\n\nfunction mergeDependencyMapIntoGraph(deps, graph, // If olderGraph is given then we will not overwrite changes made to the given\n// graph compared with olderGraph:\nolderGraph) {\n  const {\n    nodeDeps,\n    nodeToNodeSubscriptions\n  } = graph;\n  deps.forEach((upstreams, downstream) => {\n    const existingUpstreams = nodeDeps.get(downstream);\n\n    if (existingUpstreams && olderGraph && existingUpstreams !== olderGraph.nodeDeps.get(downstream)) {\n      return;\n    } // Update nodeDeps:\n\n\n    nodeDeps.set(downstream, new Set(upstreams)); // Add new deps to nodeToNodeSubscriptions:\n\n    const addedUpstreams = existingUpstreams == null ? upstreams : Recoil_differenceSets(upstreams, existingUpstreams);\n    addedUpstreams.forEach(upstream => {\n      if (!nodeToNodeSubscriptions.has(upstream)) {\n        nodeToNodeSubscriptions.set(upstream, new Set());\n      }\n\n      const existing = Recoil_nullthrows(nodeToNodeSubscriptions.get(upstream));\n      existing.add(downstream);\n    }); // Remove removed deps from nodeToNodeSubscriptions:\n\n    if (existingUpstreams) {\n      const removedUpstreams = Recoil_differenceSets(existingUpstreams, upstreams);\n      removedUpstreams.forEach(upstream => {\n        if (!nodeToNodeSubscriptions.has(upstream)) {\n          return;\n        }\n\n        const existing = Recoil_nullthrows(nodeToNodeSubscriptions.get(upstream));\n        existing.delete(downstream);\n\n        if (existing.size === 0) {\n          nodeToNodeSubscriptions.delete(upstream);\n        }\n      });\n    }\n  });\n}\n\nfunction saveDependencyMapToStore(dependencyMap, store, version) {\n  var _storeState$nextTree, _storeState$previousT, _storeState$previousT2, _storeState$previousT3;\n\n  const storeState = store.getState();\n\n  if (!(version === storeState.currentTree.version || version === ((_storeState$nextTree = storeState.nextTree) === null || _storeState$nextTree === void 0 ? void 0 : _storeState$nextTree.version) || version === ((_storeState$previousT = storeState.previousTree) === null || _storeState$previousT === void 0 ? void 0 : _storeState$previousT.version))) {\n    Recoil_recoverableViolation('Tried to save dependencies to a discarded tree');\n  } // Merge the dependencies discovered into the store's dependency map\n  // for the version that was read:\n\n\n  const graph = store.getGraph(version);\n  mergeDependencyMapIntoGraph(dependencyMap, graph); // If this version is not the latest version, also write these dependencies\n  // into later versions if they don't already have their own:\n\n  if (version === ((_storeState$previousT2 = storeState.previousTree) === null || _storeState$previousT2 === void 0 ? void 0 : _storeState$previousT2.version)) {\n    const currentGraph = store.getGraph(storeState.currentTree.version);\n    mergeDependencyMapIntoGraph(dependencyMap, currentGraph, graph);\n  }\n\n  if (version === ((_storeState$previousT3 = storeState.previousTree) === null || _storeState$previousT3 === void 0 ? void 0 : _storeState$previousT3.version) || version === storeState.currentTree.version) {\n    var _storeState$nextTree2;\n\n    const nextVersion = (_storeState$nextTree2 = storeState.nextTree) === null || _storeState$nextTree2 === void 0 ? void 0 : _storeState$nextTree2.version;\n\n    if (nextVersion !== undefined) {\n      const nextGraph = store.getGraph(nextVersion);\n      mergeDependencyMapIntoGraph(dependencyMap, nextGraph, graph);\n    }\n  }\n}\n\nfunction mergeDepsIntoDependencyMap(from, into) {\n  from.forEach((upstreamDeps, downstreamNode) => {\n    if (!into.has(downstreamNode)) {\n      into.set(downstreamNode, new Set());\n    }\n\n    const deps = Recoil_nullthrows(into.get(downstreamNode));\n    upstreamDeps.forEach(dep => deps.add(dep));\n  });\n}\n\nfunction addToDependencyMap(downstream, upstream, dependencyMap) {\n  if (!dependencyMap.has(downstream)) {\n    dependencyMap.set(downstream, new Set());\n  }\n\n  Recoil_nullthrows(dependencyMap.get(downstream)).add(upstream);\n}\n\nvar Recoil_Graph = {\n  addToDependencyMap,\n  cloneGraph,\n  graph,\n  mergeDepsIntoDependencyMap,\n  saveDependencyMapToStore\n};\n\nfunction createCommonjsModule(fn, module) {\n\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n}\n\nvar hamt_1 = createCommonjsModule(function (module) {\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n/**\n    @fileOverview Hash Array Mapped Trie.\n\n    Code based on: https://github.com/exclipy/pdata\n*/\n\n\nvar hamt = {}; // export\n\n/* Configuration\n ******************************************************************************/\n\nvar SIZE = 5;\nvar BUCKET_SIZE = Math.pow(2, SIZE);\nvar MASK = BUCKET_SIZE - 1;\nvar MAX_INDEX_NODE = BUCKET_SIZE / 2;\nvar MIN_ARRAY_NODE = BUCKET_SIZE / 4;\n/*\n ******************************************************************************/\n\nvar nothing = {};\n\nvar constant = function constant(x) {\n  return function () {\n    return x;\n  };\n};\n/**\n    Get 32 bit hash of string.\n\n    Based on:\n    http://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript-jquery\n*/\n\n\nvar hash = hamt.hash = function (str) {\n  var type = typeof str === 'undefined' ? 'undefined' : _typeof(str);\n  if (type === 'number') return str;\n  if (type !== 'string') str += '';\n  var hash = 0;\n\n  for (var i = 0, len = str.length; i < len; ++i) {\n    var c = str.charCodeAt(i);\n    hash = (hash << 5) - hash + c | 0;\n  }\n\n  return hash;\n};\n/* Bit Ops\n ******************************************************************************/\n\n/**\n    Hamming weight.\n\n    Taken from: http://jsperf.com/hamming-weight\n*/\n\n\nvar popcount = function popcount(x) {\n  x -= x >> 1 & 0x55555555;\n  x = (x & 0x33333333) + (x >> 2 & 0x33333333);\n  x = x + (x >> 4) & 0x0f0f0f0f;\n  x += x >> 8;\n  x += x >> 16;\n  return x & 0x7f;\n};\n\nvar hashFragment = function hashFragment(shift, h) {\n  return h >>> shift & MASK;\n};\n\nvar toBitmap = function toBitmap(x) {\n  return 1 << x;\n};\n\nvar fromBitmap = function fromBitmap(bitmap, bit) {\n  return popcount(bitmap & bit - 1);\n};\n/* Array Ops\n ******************************************************************************/\n\n/**\n    Set a value in an array.\n\n    @param mutate Should the input array be mutated?\n    @param at Index to change.\n    @param v New value\n    @param arr Array.\n*/\n\n\nvar arrayUpdate = function arrayUpdate(mutate, at, v, arr) {\n  var out = arr;\n\n  if (!mutate) {\n    var len = arr.length;\n    out = new Array(len);\n\n    for (var i = 0; i < len; ++i) {\n      out[i] = arr[i];\n    }\n  }\n\n  out[at] = v;\n  return out;\n};\n/**\n    Remove a value from an array.\n\n    @param mutate Should the input array be mutated?\n    @param at Index to remove.\n    @param arr Array.\n*/\n\n\nvar arraySpliceOut = function arraySpliceOut(mutate, at, arr) {\n  var newLen = arr.length - 1;\n  var i = 0;\n  var g = 0;\n  var out = arr;\n\n  if (mutate) {\n    i = g = at;\n  } else {\n    out = new Array(newLen);\n\n    while (i < at) {\n      out[g++] = arr[i++];\n    }\n  }\n\n  ++i;\n\n  while (i <= newLen) {\n    out[g++] = arr[i++];\n  }\n\n  if (mutate) {\n    out.length = newLen;\n  }\n\n  return out;\n};\n/**\n    Insert a value into an array.\n\n    @param mutate Should the input array be mutated?\n    @param at Index to insert at.\n    @param v Value to insert,\n    @param arr Array.\n*/\n\n\nvar arraySpliceIn = function arraySpliceIn(mutate, at, v, arr) {\n  var len = arr.length;\n\n  if (mutate) {\n    var _i = len;\n\n    while (_i >= at) {\n      arr[_i--] = arr[_i];\n    }\n\n    arr[at] = v;\n    return arr;\n  }\n\n  var i = 0,\n      g = 0;\n  var out = new Array(len + 1);\n\n  while (i < at) {\n    out[g++] = arr[i++];\n  }\n\n  out[at] = v;\n\n  while (i < len) {\n    out[++g] = arr[i++];\n  }\n\n  return out;\n};\n/* Node Structures\n ******************************************************************************/\n\n\nvar LEAF = 1;\nvar COLLISION = 2;\nvar INDEX = 3;\nvar ARRAY = 4;\n/**\n    Empty node.\n*/\n\nvar empty = {\n  __hamt_isEmpty: true\n};\n\nvar isEmptyNode = function isEmptyNode(x) {\n  return x === empty || x && x.__hamt_isEmpty;\n};\n/**\n    Leaf holding a value.\n\n    @member edit Edit of the node.\n    @member hash Hash of key.\n    @member key Key.\n    @member value Value stored.\n*/\n\n\nvar Leaf = function Leaf(edit, hash, key, value) {\n  return {\n    type: LEAF,\n    edit: edit,\n    hash: hash,\n    key: key,\n    value: value,\n    _modify: Leaf__modify\n  };\n};\n/**\n    Leaf holding multiple values with the same hash but different keys.\n\n    @member edit Edit of the node.\n    @member hash Hash of key.\n    @member children Array of collision children node.\n*/\n\n\nvar Collision = function Collision(edit, hash, children) {\n  return {\n    type: COLLISION,\n    edit: edit,\n    hash: hash,\n    children: children,\n    _modify: Collision__modify\n  };\n};\n/**\n    Internal node with a sparse set of children.\n\n    Uses a bitmap and array to pack children.\n\n  @member edit Edit of the node.\n    @member mask Bitmap that encode the positions of children in the array.\n    @member children Array of child nodes.\n*/\n\n\nvar IndexedNode = function IndexedNode(edit, mask, children) {\n  return {\n    type: INDEX,\n    edit: edit,\n    mask: mask,\n    children: children,\n    _modify: IndexedNode__modify\n  };\n};\n/**\n    Internal node with many children.\n\n    @member edit Edit of the node.\n    @member size Number of children.\n    @member children Array of child nodes.\n*/\n\n\nvar ArrayNode = function ArrayNode(edit, size, children) {\n  return {\n    type: ARRAY,\n    edit: edit,\n    size: size,\n    children: children,\n    _modify: ArrayNode__modify\n  };\n};\n/**\n    Is `node` a leaf node?\n*/\n\n\nvar isLeaf = function isLeaf(node) {\n  return node === empty || node.type === LEAF || node.type === COLLISION;\n};\n/* Internal node operations.\n ******************************************************************************/\n\n/**\n    Expand an indexed node into an array node.\n\n  @param edit Current edit.\n    @param frag Index of added child.\n    @param child Added child.\n    @param mask Index node mask before child added.\n    @param subNodes Index node children before child added.\n*/\n\n\nvar expand = function expand(edit, frag, child, bitmap, subNodes) {\n  var arr = [];\n  var bit = bitmap;\n  var count = 0;\n\n  for (var i = 0; bit; ++i) {\n    if (bit & 1) arr[i] = subNodes[count++];\n    bit >>>= 1;\n  }\n\n  arr[frag] = child;\n  return ArrayNode(edit, count + 1, arr);\n};\n/**\n    Collapse an array node into a indexed node.\n\n  @param edit Current edit.\n    @param count Number of elements in new array.\n    @param removed Index of removed element.\n    @param elements Array node children before remove.\n*/\n\n\nvar pack = function pack(edit, count, removed, elements) {\n  var children = new Array(count - 1);\n  var g = 0;\n  var bitmap = 0;\n\n  for (var i = 0, len = elements.length; i < len; ++i) {\n    if (i !== removed) {\n      var elem = elements[i];\n\n      if (elem && !isEmptyNode(elem)) {\n        children[g++] = elem;\n        bitmap |= 1 << i;\n      }\n    }\n  }\n\n  return IndexedNode(edit, bitmap, children);\n};\n/**\n    Merge two leaf nodes.\n\n    @param shift Current shift.\n    @param h1 Node 1 hash.\n    @param n1 Node 1.\n    @param h2 Node 2 hash.\n    @param n2 Node 2.\n*/\n\n\nvar mergeLeaves = function mergeLeaves(edit, shift, h1, n1, h2, n2) {\n  if (h1 === h2) return Collision(edit, h1, [n2, n1]);\n  var subH1 = hashFragment(shift, h1);\n  var subH2 = hashFragment(shift, h2);\n  return IndexedNode(edit, toBitmap(subH1) | toBitmap(subH2), subH1 === subH2 ? [mergeLeaves(edit, shift + SIZE, h1, n1, h2, n2)] : subH1 < subH2 ? [n1, n2] : [n2, n1]);\n};\n/**\n    Update an entry in a collision list.\n\n    @param mutate Should mutation be used?\n    @param edit Current edit.\n    @param keyEq Key compare function.\n    @param hash Hash of collision.\n    @param list Collision list.\n    @param f Update function.\n    @param k Key to update.\n    @param size Size ref.\n*/\n\n\nvar updateCollisionList = function updateCollisionList(mutate, edit, keyEq, h, list, f, k, size) {\n  var len = list.length;\n\n  for (var i = 0; i < len; ++i) {\n    var child = list[i];\n\n    if (keyEq(k, child.key)) {\n      var value = child.value;\n\n      var _newValue = f(value);\n\n      if (_newValue === value) return list;\n\n      if (_newValue === nothing) {\n        --size.value;\n        return arraySpliceOut(mutate, i, list);\n      }\n\n      return arrayUpdate(mutate, i, Leaf(edit, h, k, _newValue), list);\n    }\n  }\n\n  var newValue = f();\n  if (newValue === nothing) return list;\n  ++size.value;\n  return arrayUpdate(mutate, len, Leaf(edit, h, k, newValue), list);\n};\n\nvar canEditNode = function canEditNode(edit, node) {\n  return edit === node.edit;\n};\n/* Editing\n ******************************************************************************/\n\n\nvar Leaf__modify = function Leaf__modify(edit, keyEq, shift, f, h, k, size) {\n  if (keyEq(k, this.key)) {\n    var _v = f(this.value);\n\n    if (_v === this.value) return this;else if (_v === nothing) {\n      --size.value;\n      return empty;\n    }\n\n    if (canEditNode(edit, this)) {\n      this.value = _v;\n      return this;\n    }\n\n    return Leaf(edit, h, k, _v);\n  }\n\n  var v = f();\n  if (v === nothing) return this;\n  ++size.value;\n  return mergeLeaves(edit, shift, this.hash, this, h, Leaf(edit, h, k, v));\n};\n\nvar Collision__modify = function Collision__modify(edit, keyEq, shift, f, h, k, size) {\n  if (h === this.hash) {\n    var canEdit = canEditNode(edit, this);\n    var list = updateCollisionList(canEdit, edit, keyEq, this.hash, this.children, f, k, size);\n    if (list === this.children) return this;\n    return list.length > 1 ? Collision(edit, this.hash, list) : list[0]; // collapse single element collision list\n  }\n\n  var v = f();\n  if (v === nothing) return this;\n  ++size.value;\n  return mergeLeaves(edit, shift, this.hash, this, h, Leaf(edit, h, k, v));\n};\n\nvar IndexedNode__modify = function IndexedNode__modify(edit, keyEq, shift, f, h, k, size) {\n  var mask = this.mask;\n  var children = this.children;\n  var frag = hashFragment(shift, h);\n  var bit = toBitmap(frag);\n  var indx = fromBitmap(mask, bit);\n  var exists = mask & bit;\n  var current = exists ? children[indx] : empty;\n\n  var child = current._modify(edit, keyEq, shift + SIZE, f, h, k, size);\n\n  if (current === child) return this;\n  var canEdit = canEditNode(edit, this);\n  var bitmap = mask;\n  var newChildren = void 0;\n\n  if (exists && isEmptyNode(child)) {\n    // remove\n    bitmap &= ~bit;\n    if (!bitmap) return empty;\n    if (children.length <= 2 && isLeaf(children[indx ^ 1])) return children[indx ^ 1]; // collapse\n\n    newChildren = arraySpliceOut(canEdit, indx, children);\n  } else if (!exists && !isEmptyNode(child)) {\n    // add\n    if (children.length >= MAX_INDEX_NODE) return expand(edit, frag, child, mask, children);\n    bitmap |= bit;\n    newChildren = arraySpliceIn(canEdit, indx, child, children);\n  } else {\n    // modify\n    newChildren = arrayUpdate(canEdit, indx, child, children);\n  }\n\n  if (canEdit) {\n    this.mask = bitmap;\n    this.children = newChildren;\n    return this;\n  }\n\n  return IndexedNode(edit, bitmap, newChildren);\n};\n\nvar ArrayNode__modify = function ArrayNode__modify(edit, keyEq, shift, f, h, k, size) {\n  var count = this.size;\n  var children = this.children;\n  var frag = hashFragment(shift, h);\n  var child = children[frag];\n\n  var newChild = (child || empty)._modify(edit, keyEq, shift + SIZE, f, h, k, size);\n\n  if (child === newChild) return this;\n  var canEdit = canEditNode(edit, this);\n  var newChildren = void 0;\n\n  if (isEmptyNode(child) && !isEmptyNode(newChild)) {\n    // add\n    ++count;\n    newChildren = arrayUpdate(canEdit, frag, newChild, children);\n  } else if (!isEmptyNode(child) && isEmptyNode(newChild)) {\n    // remove\n    --count;\n    if (count <= MIN_ARRAY_NODE) return pack(edit, count, frag, children);\n    newChildren = arrayUpdate(canEdit, frag, empty, children);\n  } else {\n    // modify\n    newChildren = arrayUpdate(canEdit, frag, newChild, children);\n  }\n\n  if (canEdit) {\n    this.size = count;\n    this.children = newChildren;\n    return this;\n  }\n\n  return ArrayNode(edit, count, newChildren);\n};\n\nempty._modify = function (edit, keyEq, shift, f, h, k, size) {\n  var v = f();\n  if (v === nothing) return empty;\n  ++size.value;\n  return Leaf(edit, h, k, v);\n};\n/*\n ******************************************************************************/\n\n\nfunction Map(editable, edit, config, root, size) {\n  this._editable = editable;\n  this._edit = edit;\n  this._config = config;\n  this._root = root;\n  this._size = size;\n}\n\nMap.prototype.setTree = function (newRoot, newSize) {\n  if (this._editable) {\n    this._root = newRoot;\n    this._size = newSize;\n    return this;\n  }\n\n  return newRoot === this._root ? this : new Map(this._editable, this._edit, this._config, newRoot, newSize);\n};\n/* Queries\n ******************************************************************************/\n\n/**\n    Lookup the value for `key` in `map` using a custom `hash`.\n\n    Returns the value or `alt` if none.\n*/\n\n\nvar tryGetHash = hamt.tryGetHash = function (alt, hash, key, map) {\n  var node = map._root;\n  var shift = 0;\n  var keyEq = map._config.keyEq;\n\n  while (true) {\n    switch (node.type) {\n      case LEAF:\n        {\n          return keyEq(key, node.key) ? node.value : alt;\n        }\n\n      case COLLISION:\n        {\n          if (hash === node.hash) {\n            var children = node.children;\n\n            for (var i = 0, len = children.length; i < len; ++i) {\n              var child = children[i];\n              if (keyEq(key, child.key)) return child.value;\n            }\n          }\n\n          return alt;\n        }\n\n      case INDEX:\n        {\n          var frag = hashFragment(shift, hash);\n          var bit = toBitmap(frag);\n\n          if (node.mask & bit) {\n            node = node.children[fromBitmap(node.mask, bit)];\n            shift += SIZE;\n            break;\n          }\n\n          return alt;\n        }\n\n      case ARRAY:\n        {\n          node = node.children[hashFragment(shift, hash)];\n\n          if (node) {\n            shift += SIZE;\n            break;\n          }\n\n          return alt;\n        }\n\n      default:\n        return alt;\n    }\n  }\n};\n\nMap.prototype.tryGetHash = function (alt, hash, key) {\n  return tryGetHash(alt, hash, key, this);\n};\n/**\n    Lookup the value for `key` in `map` using internal hash function.\n\n    @see `tryGetHash`\n*/\n\n\nvar tryGet = hamt.tryGet = function (alt, key, map) {\n  return tryGetHash(alt, map._config.hash(key), key, map);\n};\n\nMap.prototype.tryGet = function (alt, key) {\n  return tryGet(alt, key, this);\n};\n/**\n    Lookup the value for `key` in `map` using a custom `hash`.\n\n    Returns the value or `undefined` if none.\n*/\n\n\nvar getHash = hamt.getHash = function (hash, key, map) {\n  return tryGetHash(undefined, hash, key, map);\n};\n\nMap.prototype.getHash = function (hash, key) {\n  return getHash(hash, key, this);\n};\n/**\n    Lookup the value for `key` in `map` using internal hash function.\n\n    @see `get`\n*/\n\n\nvar get = hamt.get = function (key, map) {\n  return tryGetHash(undefined, map._config.hash(key), key, map);\n};\n\nMap.prototype.get = function (key, alt) {\n  return tryGet(alt, key, this);\n};\n/**\n    Does an entry exist for `key` in `map`? Uses custom `hash`.\n*/\n\n\nvar hasHash = hamt.has = function (hash, key, map) {\n  return tryGetHash(nothing, hash, key, map) !== nothing;\n};\n\nMap.prototype.hasHash = function (hash, key) {\n  return hasHash(hash, key, this);\n};\n/**\n    Does an entry exist for `key` in `map`? Uses internal hash function.\n*/\n\n\nvar has = hamt.has = function (key, map) {\n  return hasHash(map._config.hash(key), key, map);\n};\n\nMap.prototype.has = function (key) {\n  return has(key, this);\n};\n\nvar defKeyCompare = function defKeyCompare(x, y) {\n  return x === y;\n};\n/**\n    Create an empty map.\n\n    @param config Configuration.\n*/\n\n\nhamt.make = function (config) {\n  return new Map(0, 0, {\n    keyEq: config && config.keyEq || defKeyCompare,\n    hash: config && config.hash || hash\n  }, empty, 0);\n};\n/**\n    Empty map.\n*/\n\n\nhamt.empty = hamt.make();\n/**\n    Does `map` contain any elements?\n*/\n\nvar isEmpty = hamt.isEmpty = function (map) {\n  return map && !!isEmptyNode(map._root);\n};\n\nMap.prototype.isEmpty = function () {\n  return isEmpty(this);\n};\n/* Updates\n ******************************************************************************/\n\n/**\n    Alter the value stored for `key` in `map` using function `f` using\n    custom hash.\n\n    `f` is invoked with the current value for `k` if it exists,\n    or no arguments if no such value exists. `modify` will always either\n    update or insert a value into the map.\n\n    Returns a map with the modified value. Does not alter `map`.\n*/\n\n\nvar modifyHash = hamt.modifyHash = function (f, hash, key, map) {\n  var size = {\n    value: map._size\n  };\n\n  var newRoot = map._root._modify(map._editable ? map._edit : NaN, map._config.keyEq, 0, f, hash, key, size);\n\n  return map.setTree(newRoot, size.value);\n};\n\nMap.prototype.modifyHash = function (hash, key, f) {\n  return modifyHash(f, hash, key, this);\n};\n/**\n    Alter the value stored for `key` in `map` using function `f` using\n    internal hash function.\n\n    @see `modifyHash`\n*/\n\n\nvar modify = hamt.modify = function (f, key, map) {\n  return modifyHash(f, map._config.hash(key), key, map);\n};\n\nMap.prototype.modify = function (key, f) {\n  return modify(f, key, this);\n};\n/**\n    Store `value` for `key` in `map` using custom `hash`.\n\n    Returns a map with the modified value. Does not alter `map`.\n*/\n\n\nvar setHash = hamt.setHash = function (hash, key, value, map) {\n  return modifyHash(constant(value), hash, key, map);\n};\n\nMap.prototype.setHash = function (hash, key, value) {\n  return setHash(hash, key, value, this);\n};\n/**\n    Store `value` for `key` in `map` using internal hash function.\n\n    @see `setHash`\n*/\n\n\nvar set = hamt.set = function (key, value, map) {\n  return setHash(map._config.hash(key), key, value, map);\n};\n\nMap.prototype.set = function (key, value) {\n  return set(key, value, this);\n};\n/**\n    Remove the entry for `key` in `map`.\n\n    Returns a map with the value removed. Does not alter `map`.\n*/\n\n\nvar del = constant(nothing);\n\nvar removeHash = hamt.removeHash = function (hash, key, map) {\n  return modifyHash(del, hash, key, map);\n};\n\nMap.prototype.removeHash = Map.prototype.deleteHash = function (hash, key) {\n  return removeHash(hash, key, this);\n};\n/**\n    Remove the entry for `key` in `map` using internal hash function.\n\n    @see `removeHash`\n*/\n\n\nvar remove = hamt.remove = function (key, map) {\n  return removeHash(map._config.hash(key), key, map);\n};\n\nMap.prototype.remove = Map.prototype.delete = function (key) {\n  return remove(key, this);\n};\n/* Mutation\n ******************************************************************************/\n\n/**\n    Mark `map` as mutable.\n */\n\n\nvar beginMutation = hamt.beginMutation = function (map) {\n  return new Map(map._editable + 1, map._edit + 1, map._config, map._root, map._size);\n};\n\nMap.prototype.beginMutation = function () {\n  return beginMutation(this);\n};\n/**\n    Mark `map` as immutable.\n */\n\n\nvar endMutation = hamt.endMutation = function (map) {\n  map._editable = map._editable && map._editable - 1;\n  return map;\n};\n\nMap.prototype.endMutation = function () {\n  return endMutation(this);\n};\n/**\n    Mutate `map` within the context of `f`.\n    @param f\n    @param map HAMT\n*/\n\n\nvar mutate = hamt.mutate = function (f, map) {\n  var transient = beginMutation(map);\n  f(transient);\n  return endMutation(transient);\n};\n\nMap.prototype.mutate = function (f) {\n  return mutate(f, this);\n};\n/* Traversal\n ******************************************************************************/\n\n/**\n    Apply a continuation.\n*/\n\n\nvar appk = function appk(k) {\n  return k && lazyVisitChildren(k[0], k[1], k[2], k[3], k[4]);\n};\n/**\n    Recursively visit all values stored in an array of nodes lazily.\n*/\n\n\nvar lazyVisitChildren = function lazyVisitChildren(len, children, i, f, k) {\n  while (i < len) {\n    var child = children[i++];\n    if (child && !isEmptyNode(child)) return lazyVisit(child, f, [len, children, i, f, k]);\n  }\n\n  return appk(k);\n};\n/**\n    Recursively visit all values stored in `node` lazily.\n*/\n\n\nvar lazyVisit = function lazyVisit(node, f, k) {\n  switch (node.type) {\n    case LEAF:\n      return {\n        value: f(node),\n        rest: k\n      };\n\n    case COLLISION:\n    case ARRAY:\n    case INDEX:\n      var children = node.children;\n      return lazyVisitChildren(children.length, children, 0, f, k);\n\n    default:\n      return appk(k);\n  }\n};\n\nvar DONE = {\n  done: true\n};\n/**\n    Javascript iterator over a map.\n*/\n\nfunction MapIterator(v) {\n  this.v = v;\n}\n\nMapIterator.prototype.next = function () {\n  if (!this.v) return DONE;\n  var v0 = this.v;\n  this.v = appk(v0.rest);\n  return v0;\n};\n\nMapIterator.prototype[Symbol.iterator] = function () {\n  return this;\n};\n/**\n    Lazily visit each value in map with function `f`.\n*/\n\n\nvar visit = function visit(map, f) {\n  return new MapIterator(lazyVisit(map._root, f));\n};\n/**\n    Get a Javascsript iterator of `map`.\n\n    Iterates over `[key, value]` arrays.\n*/\n\n\nvar buildPairs = function buildPairs(x) {\n  return [x.key, x.value];\n};\n\nvar entries = hamt.entries = function (map) {\n  return visit(map, buildPairs);\n};\n\nMap.prototype.entries = Map.prototype[Symbol.iterator] = function () {\n  return entries(this);\n};\n/**\n    Get array of all keys in `map`.\n\n    Order is not guaranteed.\n*/\n\n\nvar buildKeys = function buildKeys(x) {\n  return x.key;\n};\n\nvar keys = hamt.keys = function (map) {\n  return visit(map, buildKeys);\n};\n\nMap.prototype.keys = function () {\n  return keys(this);\n};\n/**\n    Get array of all values in `map`.\n\n    Order is not guaranteed, duplicates are preserved.\n*/\n\n\nvar buildValues = function buildValues(x) {\n  return x.value;\n};\n\nvar values = hamt.values = Map.prototype.values = function (map) {\n  return visit(map, buildValues);\n};\n\nMap.prototype.values = function () {\n  return values(this);\n};\n/* Fold\n ******************************************************************************/\n\n/**\n    Visit every entry in the map, aggregating data.\n\n    Order of nodes is not guaranteed.\n\n    @param f Function mapping accumulated value, value, and key to new value.\n    @param z Starting value.\n    @param m HAMT\n*/\n\n\nvar fold = hamt.fold = function (f, z, m) {\n  var root = m._root;\n  if (root.type === LEAF) return f(z, root.value, root.key);\n  var toVisit = [root.children];\n  var children = void 0;\n\n  while (children = toVisit.pop()) {\n    for (var i = 0, len = children.length; i < len;) {\n      var child = children[i++];\n\n      if (child && child.type) {\n        if (child.type === LEAF) z = f(z, child.value, child.key);else toVisit.push(child.children);\n      }\n    }\n  }\n\n  return z;\n};\n\nMap.prototype.fold = function (f, z) {\n  return fold(f, z, this);\n};\n/**\n    Visit every entry in the map, aggregating data.\n\n    Order of nodes is not guaranteed.\n\n    @param f Function invoked with value and key\n    @param map HAMT\n*/\n\n\nvar forEach = hamt.forEach = function (f, map) {\n  return fold(function (_, value, key) {\n    return f(value, key, map);\n  }, null, map);\n};\n\nMap.prototype.forEach = function (f) {\n  return forEach(f, this);\n};\n/* Aggregate\n ******************************************************************************/\n\n/**\n    Get the number of entries in `map`.\n*/\n\n\nvar count = hamt.count = function (map) {\n  return map._size;\n};\n\nMap.prototype.count = function () {\n  return count(this);\n};\n\nObject.defineProperty(Map.prototype, 'size', {\n  get: Map.prototype.count\n});\n/* Export\n ******************************************************************************/\n\nif ( module.exports) {\n  module.exports = hamt;\n} else {\n  undefined.hamt = hamt;\n}\n});\n\nclass BuiltInMap {\n  constructor(existing) {\n    _defineProperty(this, \"_map\", void 0);\n\n    this._map = new Map(existing === null || existing === void 0 ? void 0 : existing.entries());\n  }\n\n  keys() {\n    return this._map.keys();\n  }\n\n  entries() {\n    return this._map.entries();\n  }\n\n  get(k) {\n    return this._map.get(k);\n  }\n\n  has(k) {\n    return this._map.has(k);\n  }\n\n  set(k, v) {\n    this._map.set(k, v);\n\n    return this;\n  }\n\n  delete(k) {\n    this._map.delete(k);\n\n    return this;\n  }\n\n  clone() {\n    return persistentMap(this);\n  }\n\n  toMap() {\n    return new Map(this._map);\n  }\n\n}\n\nclass HashArrayMappedTrieMap {\n  // Because hamt.empty is not a function there is no way to introduce type\n  // parameters on it, so empty is typed as HAMTPlusMap<string, mixed>.\n  // flowlint-next-line unclear-type:off\n  constructor(existing) {\n    _defineProperty(this, \"_hamt\", hamt_1.empty.beginMutation());\n\n    if (existing instanceof HashArrayMappedTrieMap) {\n      const h = existing._hamt.endMutation();\n\n      existing._hamt = h.beginMutation();\n      this._hamt = h.beginMutation();\n    } else if (existing) {\n      for (const [k, v] of existing.entries()) {\n        this._hamt.set(k, v);\n      }\n    }\n  }\n\n  keys() {\n    return this._hamt.keys();\n  }\n\n  entries() {\n    return this._hamt.entries();\n  }\n\n  get(k) {\n    return this._hamt.get(k);\n  }\n\n  has(k) {\n    return this._hamt.has(k);\n  }\n\n  set(k, v) {\n    this._hamt.set(k, v);\n\n    return this;\n  }\n\n  delete(k) {\n    this._hamt.delete(k);\n\n    return this;\n  }\n\n  clone() {\n    return persistentMap(this);\n  }\n\n  toMap() {\n    return new Map(this._hamt);\n  }\n\n}\n\nfunction persistentMap(existing) {\n  if (Recoil_gkx_1('recoil_hamt_2020')) {\n    return new HashArrayMappedTrieMap(existing);\n  } else {\n    return new BuiltInMap(existing);\n  }\n}\n\nvar Recoil_PersistentMap = {\n  persistentMap\n};\n\nvar Recoil_PersistentMap_1 = Recoil_PersistentMap.persistentMap;\n\nvar Recoil_PersistentMap$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  persistentMap: Recoil_PersistentMap_1\n});\n\nconst {\n  graph: graph$1\n} = Recoil_Graph;\n\nconst {\n  persistentMap: persistentMap$1\n} = Recoil_PersistentMap$1; // flowlint-next-line unclear-type:off\n\n\nlet nextTreeStateVersion = 0;\n\nconst getNextTreeStateVersion = () => nextTreeStateVersion++;\n\nfunction makeEmptyTreeState() {\n  const version = getNextTreeStateVersion();\n  return {\n    version,\n    stateID: version,\n    transactionMetadata: {},\n    dirtyAtoms: new Set(),\n    atomValues: persistentMap$1(),\n    nonvalidatedAtoms: persistentMap$1()\n  };\n}\n\nfunction makeEmptyStoreState() {\n  const currentTree = makeEmptyTreeState();\n  return {\n    currentTree,\n    nextTree: null,\n    previousTree: null,\n    commitDepth: 0,\n    knownAtoms: new Set(),\n    knownSelectors: new Set(),\n    transactionSubscriptions: new Map(),\n    nodeTransactionSubscriptions: new Map(),\n    nodeToComponentSubscriptions: new Map(),\n    queuedComponentCallbacks_DEPRECATED: [],\n    suspendedComponentResolvers: new Set(),\n    graphsByVersion: new Map().set(currentTree.version, graph$1()),\n    versionsUsedByComponent: new Map(),\n    retention: {\n      referenceCounts: new Map(),\n      nodesRetainedByZone: new Map(),\n      retainablesToCheckForRelease: new Set()\n    },\n    nodeCleanupFunctions: new Map()\n  };\n}\n\nvar Recoil_State = {\n  makeEmptyTreeState,\n  makeEmptyStoreState,\n  getNextTreeStateVersion\n};\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nfunction unionSets(...sets) {\n  const result = new Set();\n\n  for (const set of sets) {\n    for (const value of set) {\n      result.add(value);\n    }\n  }\n\n  return result;\n}\n\nvar Recoil_unionSets = unionSets;\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n/**\n * The someSet() method tests whether some elements in the given Set pass the\n * test implemented by the provided function.\n */\n\nfunction someSet(set, callback, context) {\n  const iterator = set.entries();\n  let current = iterator.next();\n\n  while (!current.done) {\n    const entry = current.value;\n\n    if (callback.call(context, entry[1], entry[0], set)) {\n      return true;\n    }\n\n    current = iterator.next();\n  }\n\n  return false;\n}\n\nvar Recoil_someSet = someSet;\n\nconst {\n  cleanUpNode: cleanUpNode$1\n} = Recoil_FunctionalCore;\n\nconst {\n  deleteNodeConfigIfPossible: deleteNodeConfigIfPossible$1,\n  getNode: getNode$2\n} = Recoil_Node;\n\nconst {\n  RetentionZone: RetentionZone$2\n} = Recoil_RetentionZone;\n\nconst emptySet$1 = new Set();\n\nfunction releaseRetainablesNowOnCurrentTree(store, retainables) {\n  const storeState = store.getState();\n  const treeState = storeState.currentTree;\n\n  if (storeState.nextTree) {\n    Recoil_recoverableViolation('releaseNodesNowOnCurrentTree should only be called at the end of a batch');\n    return; // leak memory rather than erase something that's about to be used.\n  }\n\n  const nodes = new Set();\n\n  for (const r of retainables) {\n    if (r instanceof RetentionZone$2) {\n      for (const n of nodesRetainedByZone(storeState, r)) {\n        nodes.add(n);\n      }\n    } else {\n      nodes.add(r);\n    }\n  }\n\n  const releasableNodes = findReleasableNodes(store, nodes);\n\n  for (const node of releasableNodes) {\n    releaseNode(store, treeState, node);\n  }\n}\n\nfunction findReleasableNodes(store, searchFromNodes) {\n  const storeState = store.getState();\n  const treeState = storeState.currentTree;\n  const graph = store.getGraph(treeState.version);\n  const releasableNodes = new Set(); // mutated to collect answer\n\n  const nonReleasableNodes = new Set();\n  findReleasableNodesInner(searchFromNodes);\n  return releasableNodes;\n\n  function findReleasableNodesInner(searchFromNodes) {\n    const releasableNodesFoundThisIteration = new Set();\n    const downstreams = getDownstreamNodesInTopologicalOrder(store, treeState, searchFromNodes, releasableNodes, // don't descend into these\n    nonReleasableNodes // don't descend into these\n    ); // Find which of the downstream nodes are releasable and which are not:\n\n    for (const node of downstreams) {\n      var _storeState$retention;\n\n      // Not releasable if configured to be retained forever:\n      if (getNode$2(node).retainedBy === 'recoilRoot') {\n        nonReleasableNodes.add(node);\n        continue;\n      } // Not releasable if retained directly by a component:\n\n\n      if (((_storeState$retention = storeState.retention.referenceCounts.get(node)) !== null && _storeState$retention !== void 0 ? _storeState$retention : 0) > 0) {\n        nonReleasableNodes.add(node);\n        continue;\n      } // Not releasable if retained by a zone:\n\n\n      if (zonesThatCouldRetainNode(node).some(z => storeState.retention.referenceCounts.get(z))) {\n        nonReleasableNodes.add(node);\n        continue;\n      } // Not releasable if it has a non-releasable child (which will already be in\n      // nonReleasableNodes because we are going in topological order):\n\n\n      const nodeChildren = graph.nodeToNodeSubscriptions.get(node);\n\n      if (nodeChildren && Recoil_someSet(nodeChildren, child => nonReleasableNodes.has(child))) {\n        nonReleasableNodes.add(node);\n        continue;\n      }\n\n      releasableNodes.add(node);\n      releasableNodesFoundThisIteration.add(node);\n    } // If we found any releasable nodes, we need to walk UP from those nodes to\n    // find whether their parents can now be released as well:\n\n\n    const parents = new Set();\n\n    for (const node of releasableNodesFoundThisIteration) {\n      for (const parent of (_graph$nodeDeps$get = graph.nodeDeps.get(node)) !== null && _graph$nodeDeps$get !== void 0 ? _graph$nodeDeps$get : emptySet$1) {\n        var _graph$nodeDeps$get;\n\n        if (!releasableNodes.has(parent)) {\n          parents.add(parent);\n        }\n      }\n    }\n\n    if (parents.size) {\n      findReleasableNodesInner(parents);\n    }\n  }\n} // Children before parents\n\n\nfunction getDownstreamNodesInTopologicalOrder(store, treeState, nodes, // Mutable set is destroyed in place\ndoNotDescendInto1, doNotDescendInto2) {\n  const graph = store.getGraph(treeState.version);\n  const answer = [];\n  const visited = new Set();\n\n  while (nodes.size > 0) {\n    visit(Recoil_nullthrows(nodes.values().next().value));\n  }\n\n  return answer;\n\n  function visit(node) {\n    if (doNotDescendInto1.has(node) || doNotDescendInto2.has(node)) {\n      nodes.delete(node);\n      return;\n    }\n\n    if (visited.has(node)) {\n      return;\n    }\n\n    const children = graph.nodeToNodeSubscriptions.get(node);\n\n    if (children) {\n      for (const child of children) {\n        visit(child);\n      }\n    }\n\n    visited.add(node);\n    nodes.delete(node);\n    answer.push(node);\n  }\n}\n\nfunction releaseNode(store, treeState, node) {\n  if (!Recoil_gkx_1('recoil_memory_managament_2020')) {\n    return;\n  } // Atom effects, in-closure caches, etc.:\n\n\n  cleanUpNode$1(store, node); // Delete from store state:\n\n  const storeState = store.getState();\n  storeState.knownAtoms.delete(node);\n  storeState.knownSelectors.delete(node);\n  storeState.nodeTransactionSubscriptions.delete(node);\n  storeState.retention.referenceCounts.delete(node);\n  const zones = zonesThatCouldRetainNode(node);\n\n  for (const zone of zones) {\n    var _storeState$retention2;\n\n    (_storeState$retention2 = storeState.retention.nodesRetainedByZone.get(zone)) === null || _storeState$retention2 === void 0 ? void 0 : _storeState$retention2.delete(node);\n  } // Note that we DO NOT delete from nodeToComponentSubscriptions because this\n  // already happens when the last component that was retaining the node unmounts,\n  // and this could happen either before or after that.\n  // Delete from TreeState and dep graph:\n\n\n  treeState.atomValues.delete(node);\n  treeState.dirtyAtoms.delete(node);\n  treeState.nonvalidatedAtoms.delete(node);\n  const graph = storeState.graphsByVersion.get(treeState.version);\n\n  if (graph) {\n    const deps = graph.nodeDeps.get(node);\n\n    if (deps !== undefined) {\n      graph.nodeDeps.delete(node);\n\n      for (const dep of deps) {\n        var _graph$nodeToNodeSubs;\n\n        (_graph$nodeToNodeSubs = graph.nodeToNodeSubscriptions.get(dep)) === null || _graph$nodeToNodeSubs === void 0 ? void 0 : _graph$nodeToNodeSubs.delete(node);\n      }\n    } // No need to delete sub's deps as there should be no subs at this point.\n    // But an invariant would require deleting nodes in topological order.\n\n\n    graph.nodeToNodeSubscriptions.delete(node);\n  } // Node config (for family members only as their configs can be recreated, and\n  // only if they are not retained within any other Stores):\n\n\n  deleteNodeConfigIfPossible$1(node);\n}\n\nfunction nodesRetainedByZone(storeState, zone) {\n  var _storeState$retention3;\n\n  return (_storeState$retention3 = storeState.retention.nodesRetainedByZone.get(zone)) !== null && _storeState$retention3 !== void 0 ? _storeState$retention3 : emptySet$1;\n}\n\nfunction zonesThatCouldRetainNode(node) {\n  const retainedBy = getNode$2(node).retainedBy;\n\n  if (retainedBy === undefined || retainedBy === 'components' || retainedBy === 'recoilRoot') {\n    return [];\n  } else if (retainedBy instanceof RetentionZone$2) {\n    return [retainedBy];\n  } else {\n    return retainedBy; // it's an array of zones\n  }\n}\n\nfunction scheduleOrPerformPossibleReleaseOfRetainable(store, retainable) {\n  const state = store.getState();\n\n  if (state.nextTree) {\n    state.retention.retainablesToCheckForRelease.add(retainable);\n  } else {\n    releaseRetainablesNowOnCurrentTree(store, new Set([retainable]));\n  }\n}\n\nfunction updateRetainCount(store, retainable, delta) {\n  var _map$get;\n\n  if (!Recoil_gkx_1('recoil_memory_managament_2020')) {\n    return;\n  }\n\n  const map = store.getState().retention.referenceCounts;\n  const newCount = ((_map$get = map.get(retainable)) !== null && _map$get !== void 0 ? _map$get : 0) + delta;\n\n  if (newCount === 0) {\n    updateRetainCountToZero(store, retainable);\n  } else {\n    map.set(retainable, newCount);\n  }\n}\n\nfunction updateRetainCountToZero(store, retainable) {\n  if (!Recoil_gkx_1('recoil_memory_managament_2020')) {\n    return;\n  }\n\n  const map = store.getState().retention.referenceCounts;\n  map.delete(retainable);\n  scheduleOrPerformPossibleReleaseOfRetainable(store, retainable);\n}\n\nfunction releaseScheduledRetainablesNow(store) {\n  if (!Recoil_gkx_1('recoil_memory_managament_2020')) {\n    return;\n  }\n\n  const state = store.getState();\n  releaseRetainablesNowOnCurrentTree(store, state.retention.retainablesToCheckForRelease);\n  state.retention.retainablesToCheckForRelease.clear();\n}\n\nfunction retainedByOptionWithDefault(r) {\n  // The default will change from 'recoilRoot' to 'components' in the future.\n  return r === undefined ? 'recoilRoot' : r;\n}\n\nvar Recoil_Retention = {\n  updateRetainCount,\n  updateRetainCountToZero,\n  releaseScheduledRetainablesNow,\n  retainedByOptionWithDefault\n};\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n/**\n * Combines multiple Iterables into a single Iterable.\n * Traverses the input Iterables in the order provided and maintains the order\n * of their elements.\n *\n * Example:\n * ```\n * const r = Array.from(concatIterables(['a', 'b'], ['c'], ['d', 'e', 'f']));\n * r == ['a', 'b', 'c', 'd', 'e', 'f'];\n * ```\n */\n\nfunction* concatIterables(iters) {\n  for (const iter of iters) {\n    for (const val of iter) {\n      yield val;\n    }\n  }\n}\n\nvar Recoil_concatIterables = concatIterables;\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nconst isSSR = typeof window === 'undefined';\nconst isReactNative = typeof navigator !== 'undefined' && navigator.product === 'ReactNative'; // eslint-disable-line fb-www/typeof-undefined\n\nvar Recoil_Environment = {\n  isSSR,\n  isReactNative\n};\n\nconst {\n  isSSR: isSSR$1\n} = Recoil_Environment;\n\n\n\n\n\n\n\n\n\nconst {\n  batchUpdates: batchUpdates$1\n} = Recoil_Batching;\n\nconst {\n  initializeNodeIfNewToStore: initializeNodeIfNewToStore$1,\n  peekNodeInfo: peekNodeInfo$1\n} = Recoil_FunctionalCore;\n\nconst {\n  graph: graph$2\n} = Recoil_Graph;\n\nconst {\n  DEFAULT_VALUE: DEFAULT_VALUE$1,\n  recoilValues: recoilValues$1,\n  recoilValuesForKeys: recoilValuesForKeys$2\n} = Recoil_Node;\n\nconst {\n  AbstractRecoilValue: AbstractRecoilValue$2,\n  getRecoilValueAsLoadable: getRecoilValueAsLoadable$1,\n  setRecoilValue: setRecoilValue$1,\n  setUnvalidatedRecoilValue: setUnvalidatedRecoilValue$1\n} = Recoil_RecoilValueInterface;\n\nconst {\n  updateRetainCount: updateRetainCount$1\n} = Recoil_Retention;\n\nconst {\n  getNextTreeStateVersion: getNextTreeStateVersion$1,\n  makeEmptyStoreState: makeEmptyStoreState$1\n} = Recoil_State; // Opaque at this surface because it's part of the public API from here.\n\n\nconst retainWarning = `\nRecoil Snapshots only last for the duration of the callback they are provided to. To keep a Snapshot longer, do this:\n\n  const release = snapshot.retain();\n  try {\n    await useTheSnapshotAsynchronously(snapshot);\n  } finally {\n    release();\n  }\n\nThis is currently a DEV-only warning but will become a thrown exception in the next release of Recoil.\n`; // A \"Snapshot\" is \"read-only\" and captures a specific set of values of atoms.\n// However, the data-flow-graph and selector values may evolve as selector\n// evaluation functions are executed and async selectors resolve.\n\nclass Snapshot {\n  constructor(storeState) {\n    _defineProperty(this, \"_store\", void 0);\n\n    _defineProperty(this, \"_refCount\", 0);\n\n    _defineProperty(this, \"getLoadable\", recoilValue => {\n      this.checkRefCount_INTERNAL();\n      return getRecoilValueAsLoadable$1(this._store, recoilValue);\n    });\n\n    _defineProperty(this, \"getPromise\", recoilValue => {\n      this.checkRefCount_INTERNAL();\n      return this.getLoadable(recoilValue).toPromise();\n    });\n\n    _defineProperty(this, \"getNodes_UNSTABLE\", opt => {\n      this.checkRefCount_INTERNAL(); // TODO Deal with modified selectors\n\n      if ((opt === null || opt === void 0 ? void 0 : opt.isModified) === true) {\n        if ((opt === null || opt === void 0 ? void 0 : opt.isInitialized) === false) {\n          return [];\n        }\n\n        const state = this._store.getState().currentTree;\n\n        return recoilValuesForKeys$2(state.dirtyAtoms);\n      }\n\n      const knownAtoms = this._store.getState().knownAtoms;\n\n      const knownSelectors = this._store.getState().knownSelectors;\n\n      return (opt === null || opt === void 0 ? void 0 : opt.isInitialized) == null ? recoilValues$1.values() : opt.isInitialized === true ? recoilValuesForKeys$2(Recoil_concatIterables([this._store.getState().knownAtoms, this._store.getState().knownSelectors])) : Recoil_filterIterable(recoilValues$1.values(), ({\n        key\n      }) => !knownAtoms.has(key) && !knownSelectors.has(key));\n    });\n\n    _defineProperty(this, \"getInfo_UNSTABLE\", ({\n      key\n    }) => {\n      this.checkRefCount_INTERNAL();\n      return peekNodeInfo$1(this._store, this._store.getState().currentTree, key);\n    });\n\n    _defineProperty(this, \"map\", mapper => {\n      this.checkRefCount_INTERNAL();\n      const mutableSnapshot = new MutableSnapshot(this, batchUpdates$1);\n      mapper(mutableSnapshot); // if removing batchUpdates from `set` add it here\n\n      return cloneSnapshot(mutableSnapshot.getStore_INTERNAL());\n    });\n\n    _defineProperty(this, \"mapBatched_UNSTABLE\", mapper => {\n      this.checkRefCount_INTERNAL();\n      const mutableSnapshot = new MutableSnapshot(this, cb => cb());\n      batchUpdates$1(() => {\n        mapper(mutableSnapshot);\n      });\n      return cloneSnapshot(mutableSnapshot.getStore_INTERNAL());\n    });\n\n    _defineProperty(this, \"asyncMap\", async mapper => {\n      this.checkRefCount_INTERNAL();\n      const mutableSnapshot = new MutableSnapshot(this, batchUpdates$1);\n      await mapper(mutableSnapshot);\n      return cloneSnapshot(mutableSnapshot.getStore_INTERNAL());\n    });\n\n    this._store = {\n      getState: () => storeState,\n      replaceState: replacer => {\n        storeState.currentTree = replacer(storeState.currentTree); // no batching so nextTree is never active\n      },\n      getGraph: version => {\n        const graphs = storeState.graphsByVersion;\n\n        if (graphs.has(version)) {\n          return Recoil_nullthrows(graphs.get(version));\n        }\n\n        const newGraph = graph$2();\n        graphs.set(version, newGraph);\n        return newGraph;\n      },\n      subscribeToTransactions: () => ({\n        release: () => {}\n      }),\n      addTransactionMetadata: () => {\n        throw new Error('Cannot subscribe to Snapshots');\n      }\n    }; // Initialize any nodes that are live in the parent store (primarily so that this\n    // snapshot gets counted towards the node's live stores count).\n\n    for (const nodeKey of this._store.getState().nodeCleanupFunctions.keys()) {\n      initializeNodeIfNewToStore$1(this._store, storeState.currentTree, nodeKey, 'get');\n      updateRetainCount$1(this._store, nodeKey, 1);\n    }\n\n    this.retain();\n    this.autorelease_INTERNAL();\n  }\n\n  retain() {\n    if (!Recoil_gkx_1('recoil_memory_managament_2020')) {\n      return () => undefined;\n    }\n\n    this._refCount++;\n    let released = false;\n    return () => {\n      if (!released) {\n        released = true;\n        this.release_INTERNAL();\n      }\n    };\n  }\n\n  autorelease_INTERNAL() {\n    if (!Recoil_gkx_1('recoil_memory_managament_2020')) {\n      return;\n    }\n\n    if (!isSSR$1) {\n      window.setTimeout(() => this.release_INTERNAL(), 0);\n    }\n  }\n\n  release_INTERNAL() {\n    if (!Recoil_gkx_1('recoil_memory_managament_2020')) {\n      return;\n    }\n\n    this._refCount--;\n\n    if (this._refCount === 0) ;\n  }\n\n  checkRefCount_INTERNAL() {\n    if (Recoil_gkx_1('recoil_memory_managament_2020') && this._refCount <= 0) {\n      if (process.env.NODE_ENV !== \"production\") {\n        Recoil_recoverableViolation(retainWarning);\n      } // What we will ship later:\n      // throw new Error(retainWarning);\n\n    }\n  }\n\n  getStore_INTERNAL() {\n    this.checkRefCount_INTERNAL();\n    return this._store;\n  }\n\n  getID() {\n    this.checkRefCount_INTERNAL();\n    return this.getID_INTERNAL();\n  }\n\n  getID_INTERNAL() {\n    this.checkRefCount_INTERNAL();\n    return this._store.getState().currentTree.stateID;\n  } // We want to allow the methods to be destructured and used as accessors\n  // eslint-disable-next-line fb-www/extra-arrow-initializer\n\n\n}\n\nfunction cloneStoreState(store, treeState, bumpVersion = false) {\n  const storeState = store.getState();\n  const version = bumpVersion ? getNextTreeStateVersion$1() : treeState.version;\n  return {\n    currentTree: bumpVersion ? {\n      // TODO snapshots shouldn't really have versions because a new version number\n      // is always assigned when the snapshot is gone to.\n      version,\n      stateID: version,\n      transactionMetadata: { ...treeState.transactionMetadata\n      },\n      dirtyAtoms: new Set(treeState.dirtyAtoms),\n      atomValues: treeState.atomValues.clone(),\n      nonvalidatedAtoms: treeState.nonvalidatedAtoms.clone()\n    } : treeState,\n    commitDepth: 0,\n    nextTree: null,\n    previousTree: null,\n    knownAtoms: new Set(storeState.knownAtoms),\n    // FIXME here's a copy\n    knownSelectors: new Set(storeState.knownSelectors),\n    // FIXME here's a copy\n    transactionSubscriptions: new Map(),\n    nodeTransactionSubscriptions: new Map(),\n    nodeToComponentSubscriptions: new Map(),\n    queuedComponentCallbacks_DEPRECATED: [],\n    suspendedComponentResolvers: new Set(),\n    graphsByVersion: new Map().set(version, store.getGraph(treeState.version)),\n    versionsUsedByComponent: new Map(),\n    retention: {\n      referenceCounts: new Map(),\n      nodesRetainedByZone: new Map(),\n      retainablesToCheckForRelease: new Set()\n    },\n    nodeCleanupFunctions: new Map()\n  };\n} // Factory to build a fresh snapshot\n\n\nfunction freshSnapshot(initializeState) {\n  const snapshot = new Snapshot(makeEmptyStoreState$1());\n  return initializeState != null ? snapshot.map(initializeState) : snapshot;\n} // Factory to clone a snapahot state\n\n\nfunction cloneSnapshot(store, version = 'current') {\n  const storeState = store.getState();\n  const treeState = version === 'current' ? storeState.currentTree : Recoil_nullthrows(storeState.previousTree);\n  return new Snapshot(cloneStoreState(store, treeState));\n}\n\nclass MutableSnapshot extends Snapshot {\n  constructor(snapshot, batch) {\n    super(cloneStoreState(snapshot.getStore_INTERNAL(), snapshot.getStore_INTERNAL().getState().currentTree, true));\n\n    _defineProperty(this, \"_batch\", void 0);\n\n    _defineProperty(this, \"set\", (recoilState, newValueOrUpdater) => {\n      this.checkRefCount_INTERNAL();\n      const store = this.getStore_INTERNAL(); // This batchUpdates ensures this `set` is applied immediately and you can\n      // read the written value after calling `set`. I would like to remove this\n      // behavior and only batch in `Snapshot.map`, but this would be a breaking\n      // change potentially.\n\n      this._batch(() => {\n        updateRetainCount$1(store, recoilState.key, 1);\n        setRecoilValue$1(this.getStore_INTERNAL(), recoilState, newValueOrUpdater);\n      });\n    });\n\n    _defineProperty(this, \"reset\", recoilState => {\n      this.checkRefCount_INTERNAL();\n      const store = this.getStore_INTERNAL(); // See note at `set` about batched updates.\n\n      this._batch(() => {\n        updateRetainCount$1(store, recoilState.key, 1);\n        setRecoilValue$1(this.getStore_INTERNAL(), recoilState, DEFAULT_VALUE$1);\n      });\n    });\n\n    _defineProperty(this, \"setUnvalidatedAtomValues_DEPRECATED\", values => {\n      this.checkRefCount_INTERNAL();\n      const store = this.getStore_INTERNAL(); // See note at `set` about batched updates.\n\n      batchUpdates$1(() => {\n        for (const [k, v] of values.entries()) {\n          updateRetainCount$1(store, k, 1);\n          setUnvalidatedRecoilValue$1(store, new AbstractRecoilValue$2(k), v);\n        }\n      });\n    });\n\n    this._batch = batch;\n  } // We want to allow the methods to be destructured and used as accessors\n  // eslint-disable-next-line fb-www/extra-arrow-initializer\n\n\n}\n\nvar Recoil_Snapshot = {\n  Snapshot,\n  MutableSnapshot,\n  freshSnapshot,\n  cloneSnapshot\n};\n\nvar Recoil_Snapshot_1 = Recoil_Snapshot.Snapshot;\nvar Recoil_Snapshot_2 = Recoil_Snapshot.MutableSnapshot;\nvar Recoil_Snapshot_3 = Recoil_Snapshot.freshSnapshot;\nvar Recoil_Snapshot_4 = Recoil_Snapshot.cloneSnapshot;\n\nvar Recoil_Snapshot$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  Snapshot: Recoil_Snapshot_1,\n  MutableSnapshot: Recoil_Snapshot_2,\n  freshSnapshot: Recoil_Snapshot_3,\n  cloneSnapshot: Recoil_Snapshot_4\n});\n\n// @fb-only: const RecoilusagelogEvent = require('RecoilusagelogEvent');\n// @fb-only: const RecoilUsageLogFalcoEvent = require('RecoilUsageLogFalcoEvent');\n// @fb-only: const URI = require('URI');\n\n\nconst {\n  getNextTreeStateVersion: getNextTreeStateVersion$2,\n  makeEmptyStoreState: makeEmptyStoreState$2\n} = Recoil_State;\n\n\n\n\n\n\n\n\n\n\n\nconst {\n  cleanUpNode: cleanUpNode$2,\n  getDownstreamNodes: getDownstreamNodes$2,\n  setNodeValue: setNodeValue$2,\n  setUnvalidatedAtomValue_DEPRECATED: setUnvalidatedAtomValue_DEPRECATED$1\n} = Recoil_FunctionalCore;\n\nconst {\n  graph: graph$3\n} = Recoil_Graph;\n\nconst {\n  cloneGraph: cloneGraph$1\n} = Recoil_Graph;\n\nconst {\n  applyAtomValueWrites: applyAtomValueWrites$1\n} = Recoil_RecoilValueInterface;\n\nconst {\n  releaseScheduledRetainablesNow: releaseScheduledRetainablesNow$1\n} = Recoil_Retention;\n\nconst {\n  freshSnapshot: freshSnapshot$1\n} = Recoil_Snapshot$1;\n\n\n\nconst {\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState\n} = react;\n\nfunction notInAContext() {\n  throw new Error('This component must be used inside a <RecoilRoot> component.');\n}\n\nconst defaultStore = Object.freeze({\n  getState: notInAContext,\n  replaceState: notInAContext,\n  getGraph: notInAContext,\n  subscribeToTransactions: notInAContext,\n  addTransactionMetadata: notInAContext\n});\nlet stateReplacerIsBeingExecuted = false;\n\nfunction startNextTreeIfNeeded(store) {\n  if (stateReplacerIsBeingExecuted) {\n    throw new Error('An atom update was triggered within the execution of a state updater function. State updater functions provided to Recoil must be pure functions.');\n  }\n\n  const storeState = store.getState();\n\n  if (storeState.nextTree === null) {\n    if (Recoil_gkx_1('recoil_memory_managament_2020') && Recoil_gkx_1('recoil_release_on_cascading_update_killswitch_2021')) {\n      // If this is a cascading update (that is, rendering due to one state change\n      // invokes a second state change), we won't have cleaned up retainables yet\n      // because this normally happens after notifying components. Do it before\n      // proceeding with the cascading update so that it remains predictable:\n      if (storeState.commitDepth > 0) {\n        releaseScheduledRetainablesNow$1(store);\n      }\n    }\n\n    const version = storeState.currentTree.version;\n    const nextVersion = getNextTreeStateVersion$2();\n    storeState.nextTree = { ...storeState.currentTree,\n      version: nextVersion,\n      stateID: nextVersion,\n      dirtyAtoms: new Set(),\n      transactionMetadata: {}\n    };\n    storeState.graphsByVersion.set(nextVersion, cloneGraph$1(Recoil_nullthrows(storeState.graphsByVersion.get(version))));\n  }\n}\n\nconst AppContext = react.createContext({\n  current: defaultStore\n});\n\nconst useStoreRef = () => useContext(AppContext);\n\nconst MutableSourceContext = react.createContext(null); // TODO T2710559282599660\n\nfunction useRecoilMutableSource() {\n  const mutableSource = useContext(MutableSourceContext);\n\n  if (mutableSource == null) {\n    Recoil_expectationViolation('Attempted to use a Recoil hook outside of a <RecoilRoot>. ' + '<RecoilRoot> must be an ancestor of any component that uses ' + 'Recoil hooks.');\n  }\n\n  return mutableSource;\n}\n\nfunction notifyComponents(store, storeState, treeState) {\n  const dependentNodes = getDownstreamNodes$2(store, treeState, treeState.dirtyAtoms);\n\n  for (const key of dependentNodes) {\n    const comps = storeState.nodeToComponentSubscriptions.get(key);\n\n    if (comps) {\n      for (const [_subID, [_debugName, callback]] of comps) {\n        callback(treeState);\n      }\n    }\n  }\n}\n\nfunction sendEndOfBatchNotifications(store) {\n  const storeState = store.getState();\n  const treeState = storeState.currentTree; // Inform transaction subscribers of the transaction:\n\n  const dirtyAtoms = treeState.dirtyAtoms;\n\n  if (dirtyAtoms.size) {\n    // Execute Node-specific subscribers before global subscribers\n    for (const [key, subscriptions] of storeState.nodeTransactionSubscriptions) {\n      if (dirtyAtoms.has(key)) {\n        for (const [_, subscription] of subscriptions) {\n          subscription(store);\n        }\n      }\n    }\n\n    for (const [_, subscription] of storeState.transactionSubscriptions) {\n      subscription(store);\n    }\n\n    if (!Recoil_gkx_1('recoil_early_rendering_2021') || storeState.suspendedComponentResolvers.size) {\n      // Notifying components is needed to wake from suspense, even when using\n      // early rendering.\n      notifyComponents(store, storeState, treeState); // Wake all suspended components so the right one(s) can try to re-render.\n      // We need to wake up components not just when some asynchronous selector\n      // resolved, but also when changing synchronous values because this may cause\n      // a selector to change from asynchronous to synchronous, in which case there\n      // would be no follow-up asynchronous resolution to wake us up.\n      // TODO OPTIMIZATION Only wake up related downstream components\n\n      storeState.suspendedComponentResolvers.forEach(cb => cb());\n      storeState.suspendedComponentResolvers.clear();\n    }\n  } // Special behavior ONLY invoked by useInterface.\n  // FIXME delete queuedComponentCallbacks_DEPRECATED when deleting useInterface.\n\n\n  storeState.queuedComponentCallbacks_DEPRECATED.forEach(cb => cb(treeState));\n  storeState.queuedComponentCallbacks_DEPRECATED.splice(0, storeState.queuedComponentCallbacks_DEPRECATED.length);\n}\n\nfunction endBatch(storeRef) {\n  const storeState = storeRef.current.getState();\n  storeState.commitDepth++;\n\n  try {\n    const {\n      nextTree\n    } = storeState; // Ignore commits that are not because of Recoil transactions -- namely,\n    // because something above RecoilRoot re-rendered:\n\n    if (nextTree === null) {\n      return;\n    } // nextTree is now committed -- note that copying and reset occurs when\n    // a transaction begins, in startNextTreeIfNeeded:\n\n\n    storeState.previousTree = storeState.currentTree;\n    storeState.currentTree = nextTree;\n    storeState.nextTree = null;\n    sendEndOfBatchNotifications(storeRef.current);\n\n    if (storeState.previousTree != null) {\n      storeState.graphsByVersion.delete(storeState.previousTree.version);\n    } else {\n      Recoil_recoverableViolation('Ended batch with no previous state, which is unexpected', 'recoil');\n    }\n\n    storeState.previousTree = null;\n\n    if (Recoil_gkx_1('recoil_memory_managament_2020')) {\n      releaseScheduledRetainablesNow$1(storeRef.current);\n    }\n  } finally {\n    storeState.commitDepth--;\n  }\n}\n/*\n * The purpose of the Batcher is to observe when React batches end so that\n * Recoil state changes can be batched. Whenever Recoil state changes, we call\n * setState on the batcher. Then we wait for that change to be committed, which\n * signifies the end of the batch. That's when we respond to the Recoil change.\n */\n\n\nfunction Batcher({\n  setNotifyBatcherOfChange\n}) {\n  const storeRef = useStoreRef();\n  const [_, setState] = useState([]);\n  setNotifyBatcherOfChange(() => setState({}));\n  useEffect(() => {\n    // enqueueExecution runs this function immediately; it is only used to\n    // manipulate the order of useEffects during tests, since React seems to\n    // call useEffect in an unpredictable order sometimes.\n    Recoil_Queue.enqueueExecution('Batcher', () => {\n      endBatch(storeRef);\n    });\n  }); // If an asynchronous selector resolves after the Batcher is unmounted,\n  // notifyBatcherOfChange will still be called. An error gets thrown whenever\n  // setState is called after a component is already unmounted, so this sets\n  // notifyBatcherOfChange to be a no-op.\n\n  useEffect(() => {\n    return () => {\n      setNotifyBatcherOfChange(() => {});\n    };\n  }, [setNotifyBatcherOfChange]);\n  return null;\n}\n\nif (process.env.NODE_ENV !== \"production\") {\n  if (typeof window !== 'undefined' && !window.$recoilDebugStates) {\n    window.$recoilDebugStates = [];\n  }\n} // When removing this deprecated function, remove stateBySettingRecoilValue\n// which will no longer be needed.\n\n\nfunction initialStoreState_DEPRECATED(store, initializeState) {\n  const initial = makeEmptyStoreState$2();\n  initializeState({\n    // $FlowFixMe[escaped-generic]\n    set: (atom, value) => {\n      const state = initial.currentTree;\n      const writes = setNodeValue$2(store, state, atom.key, value);\n      const writtenNodes = new Set(writes.keys());\n      const nonvalidatedAtoms = state.nonvalidatedAtoms.clone();\n\n      for (const n of writtenNodes) {\n        nonvalidatedAtoms.delete(n);\n      }\n\n      initial.currentTree = { ...state,\n        dirtyAtoms: Recoil_unionSets(state.dirtyAtoms, writtenNodes),\n        atomValues: applyAtomValueWrites$1(state.atomValues, writes),\n        // NB: PLEASE un-export applyAtomValueWrites when deleting this code\n        nonvalidatedAtoms\n      };\n    },\n    setUnvalidatedAtomValues: atomValues => {\n      // FIXME replace this with a mutative loop\n      atomValues.forEach((v, k) => {\n        initial.currentTree = setUnvalidatedAtomValue_DEPRECATED$1(initial.currentTree, k, v);\n      });\n    }\n  });\n  return initial;\n}\n\nfunction initialStoreState(initializeState) {\n  const snapshot = freshSnapshot$1().map(initializeState);\n  return snapshot.getStore_INTERNAL().getState();\n}\n\nlet nextID = 0;\n\nfunction RecoilRoot_INTERNAL({\n  initializeState_DEPRECATED,\n  initializeState,\n  store_INTERNAL: storeProp,\n  // For use with React \"context bridging\"\n  children\n}) {\n  var _createMutableSource;\n\n  // prettier-ignore\n  // @fb-only: useEffect(() => {\n  // @fb-only: if (gkx('recoil_usage_logging')) {\n  // @fb-only: try {\n  // @fb-only: RecoilUsageLogFalcoEvent.log(() => ({\n  // @fb-only: type: RecoilusagelogEvent.RECOIL_ROOT_MOUNTED,\n  // @fb-only: path: URI.getRequestURI().getPath(),\n  // @fb-only: }));\n  // @fb-only: } catch {\n  // @fb-only: recoverableViolation(\n  // @fb-only: 'Error when logging Recoil Usage event',\n  // @fb-only: 'recoil',\n  // @fb-only: );\n  // @fb-only: }\n  // @fb-only: }\n  // @fb-only: }, []);\n  let storeState; // eslint-disable-line prefer-const\n\n  const getGraph = version => {\n    const graphs = storeState.current.graphsByVersion;\n\n    if (graphs.has(version)) {\n      return Recoil_nullthrows(graphs.get(version));\n    }\n\n    const newGraph = graph$3();\n    graphs.set(version, newGraph);\n    return newGraph;\n  };\n\n  const subscribeToTransactions = (callback, key) => {\n    if (key == null) {\n      // Global transaction subscriptions\n      const {\n        transactionSubscriptions\n      } = storeRef.current.getState();\n      const id = nextID++;\n      transactionSubscriptions.set(id, callback);\n      return {\n        release: () => {\n          transactionSubscriptions.delete(id);\n        }\n      };\n    } else {\n      // Node-specific transaction subscriptions:\n      const {\n        nodeTransactionSubscriptions\n      } = storeRef.current.getState();\n\n      if (!nodeTransactionSubscriptions.has(key)) {\n        nodeTransactionSubscriptions.set(key, new Map());\n      }\n\n      const id = nextID++;\n      Recoil_nullthrows(nodeTransactionSubscriptions.get(key)).set(id, callback);\n      return {\n        release: () => {\n          const subs = nodeTransactionSubscriptions.get(key);\n\n          if (subs) {\n            subs.delete(id);\n\n            if (subs.size === 0) {\n              nodeTransactionSubscriptions.delete(key);\n            }\n          }\n        }\n      };\n    }\n  };\n\n  const addTransactionMetadata = metadata => {\n    startNextTreeIfNeeded(storeRef.current);\n\n    for (const k of Object.keys(metadata)) {\n      Recoil_nullthrows(storeRef.current.getState().nextTree).transactionMetadata[k] = metadata[k];\n    }\n  };\n\n  const replaceState = replacer => {\n    const storeState = storeRef.current.getState();\n    startNextTreeIfNeeded(storeRef.current); // Use replacer to get the next state:\n\n    const nextTree = Recoil_nullthrows(storeState.nextTree);\n    let replaced;\n\n    try {\n      stateReplacerIsBeingExecuted = true;\n      replaced = replacer(nextTree);\n    } finally {\n      stateReplacerIsBeingExecuted = false;\n    }\n\n    if (replaced === nextTree) {\n      return;\n    }\n\n    if (process.env.NODE_ENV !== \"production\") {\n      if (typeof window !== 'undefined') {\n        window.$recoilDebugStates.push(replaced); // TODO this shouldn't happen here because it's not batched\n      }\n    } // Save changes to nextTree and schedule a React update:\n\n\n    storeState.nextTree = replaced;\n\n    if (Recoil_gkx_1('recoil_early_rendering_2021')) {\n      notifyComponents(store, storeState, replaced);\n    }\n\n    Recoil_nullthrows(notifyBatcherOfChange.current)();\n  };\n\n  const notifyBatcherOfChange = useRef(null);\n  const setNotifyBatcherOfChange = useCallback(x => {\n    notifyBatcherOfChange.current = x;\n  }, [notifyBatcherOfChange]); // FIXME T2710559282599660\n\n  const createMutableSource = (_createMutableSource = react.createMutableSource) !== null && _createMutableSource !== void 0 ? _createMutableSource : // flowlint-line unclear-type:off\n  react.unstable_createMutableSource; // flowlint-line unclear-type:off\n\n  const store = storeProp !== null && storeProp !== void 0 ? storeProp : {\n    getState: () => storeState.current,\n    replaceState,\n    getGraph,\n    subscribeToTransactions,\n    addTransactionMetadata\n  };\n  const storeRef = useRef(store);\n  storeState = useRef(initializeState_DEPRECATED != null ? initialStoreState_DEPRECATED(store, initializeState_DEPRECATED) : initializeState != null ? initialStoreState(initializeState) : makeEmptyStoreState$2());\n  const mutableSource = useMemo(() => createMutableSource ? createMutableSource(storeState, () => storeState.current.currentTree.version) : null, [createMutableSource, storeState]); // Cleanup when the <RecoilRoot> is unmounted\n\n  useEffect(() => () => {\n    for (const atomKey of storeRef.current.getState().knownAtoms) {\n      cleanUpNode$2(storeRef.current, atomKey);\n    }\n  }, []);\n  return /*#__PURE__*/react.createElement(AppContext.Provider, {\n    value: storeRef\n  }, /*#__PURE__*/react.createElement(MutableSourceContext.Provider, {\n    value: mutableSource\n  }, /*#__PURE__*/react.createElement(Batcher, {\n    setNotifyBatcherOfChange: setNotifyBatcherOfChange\n  }), children));\n}\n\nfunction RecoilRoot(props) {\n  const {\n    override,\n    ...propsExceptOverride\n  } = props;\n  const ancestorStoreRef = useStoreRef();\n\n  if (override === false && ancestorStoreRef.current !== defaultStore) {\n    // If ancestorStoreRef.current !== defaultStore, it means that this\n    // RecoilRoot is not nested within another.\n    return props.children;\n  }\n\n  return /*#__PURE__*/react.createElement(RecoilRoot_INTERNAL, propsExceptOverride);\n}\n\nvar Recoil_RecoilRoot_react = {\n  useStoreRef,\n  useRecoilMutableSource,\n  RecoilRoot,\n  notifyComponents_FOR_TESTING: notifyComponents,\n  sendEndOfBatchNotifications_FOR_TESTING: sendEndOfBatchNotifications\n};\n\nconst {\n  loadableWithValue: loadableWithValue$1\n} = Recoil_Loadable;\n\nconst {\n  DEFAULT_VALUE: DEFAULT_VALUE$2,\n  getNode: getNode$3\n} = Recoil_Node;\n\nconst {\n  copyTreeState: copyTreeState$1,\n  getRecoilValueAsLoadable: getRecoilValueAsLoadable$2,\n  invalidateDownstreams: invalidateDownstreams$1,\n  writeLoadableToTreeState: writeLoadableToTreeState$1\n} = Recoil_RecoilValueInterface;\n\nfunction isAtom(recoilValue) {\n  return getNode$3(recoilValue.key).nodeType === 'atom';\n}\n\nclass TransactionInterfaceImpl {\n  constructor(store, treeState) {\n    _defineProperty(this, \"_store\", void 0);\n\n    _defineProperty(this, \"_treeState\", void 0);\n\n    _defineProperty(this, \"_changes\", void 0);\n\n    _defineProperty(this, \"get\", recoilValue => {\n      if (this._changes.has(recoilValue.key)) {\n        // $FlowFixMe[incompatible-return]\n        return this._changes.get(recoilValue.key);\n      }\n\n      if (!isAtom(recoilValue)) {\n        throw new Error('Reading selectors within atomicUpdate is not supported');\n      }\n\n      const loadable = getRecoilValueAsLoadable$2(this._store, recoilValue, this._treeState);\n\n      if (loadable.state === 'hasValue') {\n        return loadable.contents;\n      } else if (loadable.state === 'hasError') {\n        throw loadable.contents;\n      } else {\n        throw new Error(`Expected Recoil atom ${recoilValue.key} to have a value, but it is in a loading state.`);\n      }\n    });\n\n    _defineProperty(this, \"set\", (recoilState, valueOrUpdater) => {\n      if (!isAtom(recoilState)) {\n        throw new Error('Setting selectors within atomicUpdate is not supported');\n      }\n\n      if (typeof valueOrUpdater === 'function') {\n        const current = this.get(recoilState);\n\n        this._changes.set(recoilState.key, valueOrUpdater(current)); // flowlint-line unclear-type:off\n\n      } else {\n        this._changes.set(recoilState.key, valueOrUpdater);\n      }\n    });\n\n    _defineProperty(this, \"reset\", recoilState => {\n      this.set(recoilState, DEFAULT_VALUE$2);\n    });\n\n    this._store = store;\n    this._treeState = treeState;\n    this._changes = new Map();\n  } // Allow destructing\n  // eslint-disable-next-line fb-www/extra-arrow-initializer\n\n\n  newTreeState_INTERNAL() {\n    if (this._changes.size === 0) {\n      return this._treeState;\n    }\n\n    const newState = copyTreeState$1(this._treeState);\n\n    for (const [k, v] of this._changes) {\n      writeLoadableToTreeState$1(newState, k, loadableWithValue$1(v));\n    }\n\n    invalidateDownstreams$1(this._store, newState);\n    return newState;\n  }\n\n}\n\nfunction atomicUpdater(store) {\n  return fn => {\n    store.replaceState(treeState => {\n      const changeset = new TransactionInterfaceImpl(store, treeState);\n      fn(changeset);\n      return changeset.newTreeState_INTERNAL();\n    });\n  };\n}\n\nvar Recoil_AtomicUpdates = {\n  atomicUpdater\n};\n\nvar Recoil_AtomicUpdates_1 = Recoil_AtomicUpdates.atomicUpdater;\n\nvar Recoil_AtomicUpdates$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  atomicUpdater: Recoil_AtomicUpdates_1\n});\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n/**\n * Returns a map containing all of the keys + values from the original map where\n * the given callback returned true.\n */\n\nfunction filterMap(map, callback) {\n  const result = new Map();\n\n  for (const [key, value] of map) {\n    if (callback(value, key)) {\n      result.set(key, value);\n    }\n  }\n\n  return result;\n}\n\nvar Recoil_filterMap = filterMap;\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n/**\n * Returns a set containing all of the values from the original set where\n * the given callback returned true.\n */\n\nfunction filterSet(set, callback) {\n  const result = new Set();\n\n  for (const value of set) {\n    if (callback(value)) {\n      result.add(value);\n    }\n  }\n\n  return result;\n}\n\nvar Recoil_filterSet = filterSet;\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nfunction invariant(condition, message) {\n  if (!condition) {\n    throw new Error(message);\n  }\n}\n\nvar invariant_1 = invariant;\n\n// @oss-only\n\n\nvar Recoil_invariant = invariant_1;\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nfunction mergeMaps(...maps) {\n  const result = new Map();\n\n  for (let i = 0; i < maps.length; i++) {\n    const iterator = maps[i].keys();\n    let nextKey;\n\n    while (!(nextKey = iterator.next()).done) {\n      // $FlowFixMe[incompatible-call] - map/iterator knows nothing about flow types\n      result.set(nextKey.value, maps[i].get(nextKey.value));\n    }\n  }\n  /* $FlowFixMe[incompatible-return] (>=0.66.0 site=www,mobile) This comment\n   * suppresses an error found when Flow v0.66 was deployed. To see the error\n   * delete this comment and run Flow. */\n\n\n  return result;\n}\n\nvar Recoil_mergeMaps = mergeMaps;\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nfunction shallowArrayEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  for (let i = 0, l = a.length; i < l; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nvar Recoil_shallowArrayEqual = shallowArrayEqual;\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * MIT License\n *\n * Copyright (c) 2014-2019 Georg Tavonius\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nconst UNKNOWN_FUNCTION = '<unknown>';\n/**\n * This parses the different stack traces and puts them into one format\n * This borrows heavily from TraceKit (https://github.com/csnover/TraceKit)\n */\n\nfunction stackTraceParser(stackString) {\n  const lines = stackString.split('\\n');\n  return lines.reduce((stack, line) => {\n    const parseResult = parseChrome(line) || parseWinjs(line) || parseGecko(line) || parseNode(line) || parseJSC(line);\n\n    if (parseResult) {\n      stack.push(parseResult);\n    }\n\n    return stack;\n  }, []);\n}\n\nconst chromeRe = /^\\s*at (.*?) ?\\(((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|\\/|[a-z]:\\\\|\\\\\\\\).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i;\nconst chromeEvalRe = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/;\n\nfunction parseChrome(line) {\n  const parts = chromeRe.exec(line);\n\n  if (!parts) {\n    return null;\n  }\n\n  const isNative = parts[2] && parts[2].indexOf('native') === 0; // start of line\n\n  const isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line\n\n  const submatch = chromeEvalRe.exec(parts[2]);\n\n  if (isEval && submatch != null) {\n    // throw out eval line/column and use top-most line/column number\n    parts[2] = submatch[1]; // url\n\n    parts[3] = submatch[2]; // line\n\n    parts[4] = submatch[3]; // column\n  }\n\n  return {\n    file: !isNative ? parts[2] : null,\n    methodName: parts[1] || UNKNOWN_FUNCTION,\n    arguments: isNative ? [parts[2]] : [],\n    lineNumber: parts[3] ? +parts[3] : null,\n    column: parts[4] ? +parts[4] : null\n  };\n}\n\nconst winjsRe = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\n\nfunction parseWinjs(line) {\n  const parts = winjsRe.exec(line);\n\n  if (!parts) {\n    return null;\n  }\n\n  return {\n    file: parts[2],\n    methodName: parts[1] || UNKNOWN_FUNCTION,\n    arguments: [],\n    lineNumber: +parts[3],\n    column: parts[4] ? +parts[4] : null\n  };\n}\n\nconst geckoRe = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)((?:file|https?|blob|chrome|webpack|resource|\\[native).*?|[^@]*bundle)(?::(\\d+))?(?::(\\d+))?\\s*$/i;\nconst geckoEvalRe = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i;\n\nfunction parseGecko(line) {\n  const parts = geckoRe.exec(line);\n\n  if (!parts) {\n    return null;\n  }\n\n  const isEval = parts[3] && parts[3].indexOf(' > eval') > -1;\n  const submatch = geckoEvalRe.exec(parts[3]);\n\n  if (isEval && submatch != null) {\n    // throw out eval line/column and use top-most line number\n    parts[3] = submatch[1];\n    parts[4] = submatch[2];\n    parts[5] = null; // no column when eval\n  }\n\n  return {\n    file: parts[3],\n    methodName: parts[1] || UNKNOWN_FUNCTION,\n    arguments: parts[2] ? parts[2].split(',') : [],\n    lineNumber: parts[4] ? +parts[4] : null,\n    column: parts[5] ? +parts[5] : null\n  };\n}\n\nconst javaScriptCoreRe = /^\\s*(?:([^@]*)(?:\\((.*?)\\))?@)?(\\S.*?):(\\d+)(?::(\\d+))?\\s*$/i;\n\nfunction parseJSC(line) {\n  const parts = javaScriptCoreRe.exec(line);\n\n  if (!parts) {\n    return null;\n  }\n\n  return {\n    file: parts[3],\n    methodName: parts[1] || UNKNOWN_FUNCTION,\n    arguments: [],\n    lineNumber: +parts[4],\n    column: parts[5] ? +parts[5] : null\n  };\n}\n\nconst nodeRe = /^\\s*at (?:((?:\\[object object\\])?[^\\\\/]+(?: \\[as \\S+\\])?) )?\\(?(.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\n\nfunction parseNode(line) {\n  const parts = nodeRe.exec(line);\n\n  if (!parts) {\n    return null;\n  }\n\n  return {\n    file: parts[2],\n    methodName: parts[1] || UNKNOWN_FUNCTION,\n    arguments: [],\n    lineNumber: +parts[3],\n    column: parts[4] ? +parts[4] : null\n  };\n}\n\nvar Recoil_stackTraceParser = stackTraceParser;\n\nconst {\n  useRef: useRef$1\n} = react;\n\nfunction useComponentName() {\n  const nameRef = useRef$1();\n\n  if (process.env.NODE_ENV !== \"production\") {\n    if (Recoil_gkx_1('recoil_infer_component_names')) {\n      var _nameRef$current;\n\n      if (nameRef.current === undefined) {\n        // There is no blessed way to determine the calling React component from\n        // within a hook. This hack uses the fact that hooks must start with 'use'\n        // and that hooks are either called by React Components or other hooks. It\n        // follows therefore, that to find the calling component, you simply need\n        // to look down the stack and find the first function which doesn't start\n        // with 'use'. We are only enabling this in dev for now, since once the\n        // codebase is minified, the naming assumptions no longer hold true.\n        const frames = Recoil_stackTraceParser(new Error().stack);\n\n        for (const {\n          methodName\n        } of frames) {\n          // I observed cases where the frame was of the form 'Object.useXXX'\n          // hence why I'm searching for hooks following a word boundary\n          if (!methodName.match(/\\buse[^\\b]+$/)) {\n            return nameRef.current = methodName;\n          }\n        }\n\n        nameRef.current = null;\n      }\n\n      return (_nameRef$current = nameRef.current) !== null && _nameRef$current !== void 0 ? _nameRef$current : '<unable to determine component name>';\n    }\n  } // @fb-only: return \"<component name only available when both in dev mode and when passing GK 'recoil_infer_component_names'>\";\n\n\n  return '<component name not available>'; // @oss-only\n}\n\nvar Recoil_useComponentName = useComponentName;\n\nconst {\n  atomicUpdater: atomicUpdater$1\n} = Recoil_AtomicUpdates$1;\n\nconst {\n  batchUpdates: batchUpdates$2\n} = Recoil_Batching;\n\nconst {\n  DEFAULT_VALUE: DEFAULT_VALUE$3,\n  getNode: getNode$4,\n  nodes: nodes$1\n} = Recoil_Node;\n\nconst {\n  useRecoilMutableSource: useRecoilMutableSource$1,\n  useStoreRef: useStoreRef$1\n} = Recoil_RecoilRoot_react;\n\nconst {\n  isRecoilValue: isRecoilValue$2\n} = Recoil_RecoilValue$1;\n\nconst {\n  AbstractRecoilValue: AbstractRecoilValue$3,\n  getRecoilValueAsLoadable: getRecoilValueAsLoadable$3,\n  setRecoilValue: setRecoilValue$2,\n  setRecoilValueLoadable: setRecoilValueLoadable$1,\n  setUnvalidatedRecoilValue: setUnvalidatedRecoilValue$2,\n  subscribeToRecoilValue: subscribeToRecoilValue$1\n} = Recoil_RecoilValueInterface;\n\nconst {\n  updateRetainCount: updateRetainCount$2\n} = Recoil_Retention;\n\nconst {\n  RetentionZone: RetentionZone$3\n} = Recoil_RetentionZone;\n\nconst {\n  Snapshot: Snapshot$1,\n  cloneSnapshot: cloneSnapshot$1\n} = Recoil_Snapshot$1;\n\nconst {\n  setByAddingToSet: setByAddingToSet$2\n} = Recoil_CopyOnWrite;\n\n\n\nconst {\n  isSSR: isSSR$2\n} = Recoil_Environment;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst {\n  mutableSourceExists: mutableSourceExists$2,\n  useMutableSource: useMutableSource$1\n} = Recoil_mutableSource;\n\n\n\n\n\n\n\n\n\nconst {\n  useCallback: useCallback$1,\n  useEffect: useEffect$1,\n  useMemo: useMemo$1,\n  useRef: useRef$2,\n  useState: useState$1\n} = react; // Components that aren't mounted after suspending for this long will be assumed\n// to be discarded and their resources released.\n\n\nconst SUSPENSE_TIMEOUT_MS = 120000;\n\nfunction handleLoadable(loadable, recoilValue, storeRef) {\n  // We can't just throw the promise we are waiting on to Suspense.  If the\n  // upstream dependencies change it may produce a state in which the component\n  // can render, but it would still be suspended on a Promise that may never resolve.\n  if (loadable.state === 'hasValue') {\n    return loadable.contents;\n  } else if (loadable.state === 'loading') {\n    const promise = new Promise(resolve => {\n      storeRef.current.getState().suspendedComponentResolvers.add(resolve);\n    }); // $FlowFixMe Flow(prop-missing) for integrating with tools that inspect thrown promises @fb-only\n    // @fb-only: promise.displayName = `Recoil State: ${recoilValue.key}`;\n\n    throw promise;\n  } else if (loadable.state === 'hasError') {\n    throw loadable.contents;\n  } else {\n    const err = new Error(`Invalid value of loadable atom \"${recoilValue.key}\"`);\n\n    throw err;\n  }\n}\n\nfunction validateRecoilValue(recoilValue, hookName) {\n  if (!isRecoilValue$2(recoilValue)) {\n    throw new Error(`Invalid argument to ${hookName}: expected an atom or selector but got ${String(recoilValue)}`);\n  }\n}\n\n/**\n * Various things are broken with useRecoilInterface, particularly concurrent mode\n * and memory management. They will not be fixed.\n * */\nfunction useRecoilInterface_DEPRECATED() {\n  const storeRef = useStoreRef$1();\n  const [_, forceUpdate] = useState$1([]);\n  const recoilValuesUsed = useRef$2(new Set());\n  recoilValuesUsed.current = new Set(); // Track the RecoilValues used just during this render\n\n  const previousSubscriptions = useRef$2(new Set());\n  const subscriptions = useRef$2(new Map());\n  const unsubscribeFrom = useCallback$1(key => {\n    const sub = subscriptions.current.get(key);\n\n    if (sub) {\n      sub.release();\n      subscriptions.current.delete(key);\n    }\n  }, [subscriptions]);\n  const componentName = Recoil_useComponentName();\n  useEffect$1(() => {\n    const store = storeRef.current;\n\n    function updateState(_state, key) {\n      if (!subscriptions.current.has(key)) {\n        return;\n      }\n\n      forceUpdate([]);\n    }\n\n    Recoil_differenceSets(recoilValuesUsed.current, previousSubscriptions.current).forEach(key => {\n      if (subscriptions.current.has(key)) {\n        Recoil_expectationViolation(`Double subscription to RecoilValue \"${key}\"`);\n        return;\n      }\n\n      const sub = subscribeToRecoilValue$1(store, new AbstractRecoilValue$3(key), state => {\n        updateState(state, key);\n      }, componentName);\n      subscriptions.current.set(key, sub);\n      /**\n       * Since we're subscribing in an effect we need to update to the latest\n       * value of the atom since it may have changed since we rendered. We can\n       * go ahead and do that now, unless we're in the middle of a batch --\n       * in which case we should do it at the end of the batch, due to the\n       * following edge case: Suppose an atom is updated in another useEffect\n       * of this same component. Then the following sequence of events occur:\n       * 1. Atom is updated and subs fired (but we may not be subscribed\n       *    yet depending on order of effects, so we miss this) Updated value\n       *    is now in nextTree, but not currentTree.\n       * 2. This effect happens. We subscribe and update.\n       * 3. From the update we re-render and read currentTree, with old value.\n       * 4. Batcher's effect sets currentTree to nextTree.\n       * In this sequence we miss the update. To avoid that, add the update\n       * to queuedComponentCallback if a batch is in progress.\n       */\n      // FIXME delete queuedComponentCallbacks_DEPRECATED when deleting useInterface.\n\n      const state = store.getState();\n\n      if (state.nextTree) {\n        store.getState().queuedComponentCallbacks_DEPRECATED.push(() => {\n          updateState(store.getState(), key);\n        });\n      } else {\n        updateState(store.getState(), key);\n      }\n    });\n    Recoil_differenceSets(previousSubscriptions.current, recoilValuesUsed.current).forEach(key => {\n      unsubscribeFrom(key);\n    });\n    previousSubscriptions.current = recoilValuesUsed.current;\n  });\n  useEffect$1(() => {\n    const subs = subscriptions.current;\n    return () => subs.forEach((_, key) => unsubscribeFrom(key));\n  }, [unsubscribeFrom]);\n  return useMemo$1(() => {\n    function useSetRecoilState(recoilState) {\n      if (process.env.NODE_ENV !== \"production\") {\n        // $FlowFixMe[escaped-generic]\n        validateRecoilValue(recoilState, 'useSetRecoilState');\n      }\n\n      return newValueOrUpdater => {\n        setRecoilValue$2(storeRef.current, recoilState, newValueOrUpdater);\n      };\n    }\n\n    function useResetRecoilState(recoilState) {\n      if (process.env.NODE_ENV !== \"production\") {\n        // $FlowFixMe[escaped-generic]\n        validateRecoilValue(recoilState, 'useResetRecoilState');\n      }\n\n      return () => setRecoilValue$2(storeRef.current, recoilState, DEFAULT_VALUE$3);\n    }\n\n    function useRecoilValueLoadable(recoilValue) {\n      var _storeState$nextTree;\n\n      if (process.env.NODE_ENV !== \"production\") {\n        // $FlowFixMe[escaped-generic]\n        validateRecoilValue(recoilValue, 'useRecoilValueLoadable');\n      }\n\n      if (!recoilValuesUsed.current.has(recoilValue.key)) {\n        recoilValuesUsed.current = setByAddingToSet$2(recoilValuesUsed.current, recoilValue.key);\n      } // TODO Restore optimization to memoize lookup\n\n\n      const storeState = storeRef.current.getState();\n      return getRecoilValueAsLoadable$3(storeRef.current, recoilValue, Recoil_gkx_1('recoil_early_rendering_2021') ? (_storeState$nextTree = storeState.nextTree) !== null && _storeState$nextTree !== void 0 ? _storeState$nextTree : storeState.currentTree : storeState.currentTree);\n    }\n\n    function useRecoilValue(recoilValue) {\n      if (process.env.NODE_ENV !== \"production\") {\n        // $FlowFixMe[escaped-generic]\n        validateRecoilValue(recoilValue, 'useRecoilValue');\n      }\n\n      const loadable = useRecoilValueLoadable(recoilValue);\n      return handleLoadable(loadable, recoilValue, storeRef);\n    }\n\n    function useRecoilState(recoilState) {\n      if (process.env.NODE_ENV !== \"production\") {\n        // $FlowFixMe[escaped-generic]\n        validateRecoilValue(recoilState, 'useRecoilState');\n      }\n\n      return [useRecoilValue(recoilState), useSetRecoilState(recoilState)];\n    }\n\n    function useRecoilStateLoadable(recoilState) {\n      if (process.env.NODE_ENV !== \"production\") {\n        // $FlowFixMe[escaped-generic]\n        validateRecoilValue(recoilState, 'useRecoilStateLoadable');\n      }\n\n      return [useRecoilValueLoadable(recoilState), useSetRecoilState(recoilState)];\n    }\n\n    return {\n      getRecoilValue: useRecoilValue,\n      getRecoilValueLoadable: useRecoilValueLoadable,\n      getRecoilState: useRecoilState,\n      getRecoilStateLoadable: useRecoilStateLoadable,\n      getSetRecoilState: useSetRecoilState,\n      getResetRecoilState: useResetRecoilState\n    };\n  }, [recoilValuesUsed, storeRef]);\n}\n\nconst recoilComponentGetRecoilValueCount_FOR_TESTING = {\n  current: 0\n};\n\nfunction useRecoilValueLoadable_MUTABLESOURCE(recoilValue) {\n  if (process.env.NODE_ENV !== \"production\") {\n    // $FlowFixMe[escaped-generic]\n    validateRecoilValue(recoilValue, 'useRecoilValueLoadable');\n  }\n\n  const storeRef = useStoreRef$1();\n  const getLoadable = useCallback$1(() => {\n    var _storeState$nextTree2;\n\n    const store = storeRef.current;\n    const storeState = store.getState();\n    const treeState = Recoil_gkx_1('recoil_early_rendering_2021') ? (_storeState$nextTree2 = storeState.nextTree) !== null && _storeState$nextTree2 !== void 0 ? _storeState$nextTree2 : storeState.currentTree : storeState.currentTree;\n    return getRecoilValueAsLoadable$3(store, recoilValue, treeState);\n  }, [storeRef, recoilValue]);\n  const getLoadableWithTesting = useCallback$1(() => {\n    if (process.env.NODE_ENV !== \"production\") {\n      recoilComponentGetRecoilValueCount_FOR_TESTING.current++;\n    }\n\n    return getLoadable();\n  }, [getLoadable]);\n  const componentName = Recoil_useComponentName();\n  const subscribe = useCallback$1((_storeState, callback) => {\n    const store = storeRef.current;\n    const subscription = subscribeToRecoilValue$1(store, recoilValue, () => {\n      if (!Recoil_gkx_1('recoil_suppress_rerender_in_callback')) {\n        return callback();\n      } // Only re-render if the value has changed.\n      // This will evaluate the atom/selector now as well as when the\n      // component renders, but that may help with prefetching.\n\n\n      const newLoadable = getLoadable();\n\n      if (!prevLoadableRef.current.is(newLoadable)) {\n        callback();\n      } // If the component is suspended then the effect setting prevLoadableRef\n      // will not run.  So, set the previous value here when its subscription\n      // is fired to wake it up.  We can't just rely on this, though, because\n      // this only executes when an atom/selector is dirty and the atom/selector\n      // passed to the hook can dynamically change.\n\n\n      prevLoadableRef.current = newLoadable;\n    }, componentName);\n    return subscription.release;\n  }, [storeRef, recoilValue, componentName, getLoadable]);\n  const source = useRecoilMutableSource$1();\n  const loadable = useMutableSource$1(source, getLoadableWithTesting, subscribe);\n  const prevLoadableRef = useRef$2(loadable);\n  useEffect$1(() => {\n    prevLoadableRef.current = loadable;\n  });\n  return loadable;\n}\n\nfunction useRecoilValueLoadable_LEGACY(recoilValue) {\n  if (process.env.NODE_ENV !== \"production\") {\n    // $FlowFixMe[escaped-generic]\n    validateRecoilValue(recoilValue, 'useRecoilValueLoadable');\n  }\n\n  const storeRef = useStoreRef$1();\n  const [_, forceUpdate] = useState$1([]);\n  const componentName = Recoil_useComponentName();\n  useEffect$1(() => {\n    const store = storeRef.current;\n    const storeState = store.getState();\n    const subscription = subscribeToRecoilValue$1(store, recoilValue, _state => {\n      var _prevLoadableRef$curr;\n\n      if (!Recoil_gkx_1('recoil_suppress_rerender_in_callback')) {\n        return forceUpdate([]);\n      }\n\n      const newLoadable = getRecoilValueAsLoadable$3(store, recoilValue, store.getState().currentTree);\n\n      if (!((_prevLoadableRef$curr = prevLoadableRef.current) === null || _prevLoadableRef$curr === void 0 ? void 0 : _prevLoadableRef$curr.is(newLoadable))) {\n        forceUpdate(newLoadable);\n      }\n\n      prevLoadableRef.current = newLoadable;\n    }, componentName);\n    /**\n     * Since we're subscribing in an effect we need to update to the latest\n     * value of the atom since it may have changed since we rendered. We can\n     * go ahead and do that now, unless we're in the middle of a batch --\n     * in which case we should do it at the end of the batch, due to the\n     * following edge case: Suppose an atom is updated in another useEffect\n     * of this same component. Then the following sequence of events occur:\n     * 1. Atom is updated and subs fired (but we may not be subscribed\n     *    yet depending on order of effects, so we miss this) Updated value\n     *    is now in nextTree, but not currentTree.\n     * 2. This effect happens. We subscribe and update.\n     * 3. From the update we re-render and read currentTree, with old value.\n     * 4. Batcher's effect sets currentTree to nextTree.\n     * In this sequence we miss the update. To avoid that, add the update\n     * to queuedComponentCallback if a batch is in progress.\n     */\n\n    if (storeState.nextTree) {\n      store.getState().queuedComponentCallbacks_DEPRECATED.push(() => {\n        prevLoadableRef.current = null;\n        forceUpdate([]);\n      });\n    } else {\n      var _prevLoadableRef$curr2;\n\n      if (!Recoil_gkx_1('recoil_suppress_rerender_in_callback')) {\n        return forceUpdate([]);\n      }\n\n      const newLoadable = getRecoilValueAsLoadable$3(store, recoilValue, store.getState().currentTree);\n\n      if (!((_prevLoadableRef$curr2 = prevLoadableRef.current) === null || _prevLoadableRef$curr2 === void 0 ? void 0 : _prevLoadableRef$curr2.is(newLoadable))) {\n        forceUpdate(newLoadable);\n      }\n\n      prevLoadableRef.current = newLoadable;\n    }\n\n    return subscription.release;\n  }, [componentName, recoilValue, storeRef]);\n  const loadable = getRecoilValueAsLoadable$3(storeRef.current, recoilValue);\n  const prevLoadableRef = useRef$2(loadable);\n  useEffect$1(() => {\n    prevLoadableRef.current = loadable;\n  });\n  return loadable;\n}\n/**\n  Like useRecoilValue(), but either returns the value if available or\n  just undefined if not available for any reason, such as pending or error.\n*/\n\n\nfunction useRecoilValueLoadable(recoilValue) {\n  if (Recoil_gkx_1('recoil_memory_managament_2020')) {\n    // eslint-disable-next-line fb-www/react-hooks\n    useRetain(recoilValue);\n  }\n\n  if (mutableSourceExists$2()) {\n    // eslint-disable-next-line fb-www/react-hooks\n    return useRecoilValueLoadable_MUTABLESOURCE(recoilValue);\n  } else {\n    // eslint-disable-next-line fb-www/react-hooks\n    return useRecoilValueLoadable_LEGACY(recoilValue);\n  }\n}\n/**\n  Returns the value represented by the RecoilValue.\n  If the value is pending, it will throw a Promise to suspend the component,\n  if the value is an error it will throw it for the nearest React error boundary.\n  This will also subscribe the component for any updates in the value.\n  */\n\n\nfunction useRecoilValue(recoilValue) {\n  if (process.env.NODE_ENV !== \"production\") {\n    // $FlowFixMe[escaped-generic]\n    validateRecoilValue(recoilValue, 'useRecoilValue');\n  }\n\n  const storeRef = useStoreRef$1();\n  const loadable = useRecoilValueLoadable(recoilValue);\n  return handleLoadable(loadable, recoilValue, storeRef);\n}\n/**\n  Returns a function that allows the value of a RecoilState to be updated, but does\n  not subscribe the component to changes to that RecoilState.\n*/\n\n\nfunction useSetRecoilState(recoilState) {\n  if (process.env.NODE_ENV !== \"production\") {\n    // $FlowFixMe[escaped-generic]\n    validateRecoilValue(recoilState, 'useSetRecoilState');\n  }\n\n  const storeRef = useStoreRef$1();\n  return useCallback$1(newValueOrUpdater => {\n    setRecoilValue$2(storeRef.current, recoilState, newValueOrUpdater);\n  }, [storeRef, recoilState]);\n}\n/**\n  Returns a function that will reset the value of a RecoilState to its default\n*/\n\n\nfunction useResetRecoilState(recoilState) {\n  if (process.env.NODE_ENV !== \"production\") {\n    // $FlowFixMe[escaped-generic]\n    validateRecoilValue(recoilState, 'useResetRecoilState');\n  }\n\n  const storeRef = useStoreRef$1();\n  return useCallback$1(() => {\n    setRecoilValue$2(storeRef.current, recoilState, DEFAULT_VALUE$3);\n  }, [storeRef, recoilState]);\n}\n/**\n  Equivalent to useState(). Allows the value of the RecoilState to be read and written.\n  Subsequent updates to the RecoilState will cause the component to re-render. If the\n  RecoilState is pending, this will suspend the component and initiate the\n  retrieval of the value. If evaluating the RecoilState resulted in an error, this will\n  throw the error so that the nearest React error boundary can catch it.\n*/\n\n\nfunction useRecoilState(recoilState) {\n  if (process.env.NODE_ENV !== \"production\") {\n    // $FlowFixMe[escaped-generic]\n    validateRecoilValue(recoilState, 'useRecoilState');\n  }\n\n  return [useRecoilValue(recoilState), useSetRecoilState(recoilState)];\n}\n/**\n  Like useRecoilState(), but does not cause Suspense or React error handling. Returns\n  an object that indicates whether the RecoilState is available, pending, or\n  unavailable due to an error.\n*/\n\n\nfunction useRecoilStateLoadable(recoilState) {\n  if (process.env.NODE_ENV !== \"production\") {\n    // $FlowFixMe[escaped-generic]\n    validateRecoilValue(recoilState, 'useRecoilStateLoadable');\n  }\n\n  return [useRecoilValueLoadable(recoilState), useSetRecoilState(recoilState)];\n}\n\nfunction useTransactionSubscription(callback) {\n  const storeRef = useStoreRef$1();\n  useEffect$1(() => {\n    const sub = storeRef.current.subscribeToTransactions(callback);\n    return sub.release;\n  }, [callback, storeRef]);\n}\n\nfunction externallyVisibleAtomValuesInState(state) {\n  const atomValues = state.atomValues.toMap();\n  const persistedAtomContentsValues = Recoil_mapMap(Recoil_filterMap(atomValues, (v, k) => {\n    const node = getNode$4(k);\n    const persistence = node.persistence_UNSTABLE;\n    return persistence != null && persistence.type !== 'none' && v.state === 'hasValue';\n  }), v => v.contents); // Merge in nonvalidated atoms; we may not have defs for them but they will\n  // all have persistence on or they wouldn't be there in the first place.\n\n  return Recoil_mergeMaps(state.nonvalidatedAtoms.toMap(), persistedAtomContentsValues);\n}\n\n/**\n  Calls the given callback after any atoms have been modified and the consequent\n  component re-renders have been committed. This is intended for persisting\n  the values of the atoms to storage. The stored values can then be restored\n  using the useSetUnvalidatedAtomValues hook.\n\n  The callback receives the following info:\n\n  atomValues: The current value of every atom that is both persistable (persistence\n              type not set to 'none') and whose value is available (not in an\n              error or loading state).\n\n  previousAtomValues: The value of every persistable and available atom before\n               the transaction began.\n\n  atomInfo: A map containing the persistence settings for each atom. Every key\n            that exists in atomValues will also exist in atomInfo.\n\n  modifiedAtoms: The set of atoms that were written to during the transaction.\n\n  transactionMetadata: Arbitrary information that was added via the\n          useSetUnvalidatedAtomValues hook. Useful for ignoring the useSetUnvalidatedAtomValues\n          transaction, to avoid loops.\n*/\nfunction useTransactionObservation_DEPRECATED(callback) {\n  useTransactionSubscription(useCallback$1(store => {\n    let previousTree = store.getState().previousTree;\n    const currentTree = store.getState().currentTree;\n\n    if (!previousTree) {\n      Recoil_recoverableViolation('Transaction subscribers notified without a previous tree being present -- this is a bug in Recoil');\n      previousTree = store.getState().currentTree; // attempt to trundle on\n    }\n\n    const atomValues = externallyVisibleAtomValuesInState(currentTree);\n    const previousAtomValues = externallyVisibleAtomValuesInState(previousTree);\n    const atomInfo = Recoil_mapMap(nodes$1, node => {\n      var _node$persistence_UNS, _node$persistence_UNS2, _node$persistence_UNS3, _node$persistence_UNS4;\n\n      return {\n        persistence_UNSTABLE: {\n          type: (_node$persistence_UNS = (_node$persistence_UNS2 = node.persistence_UNSTABLE) === null || _node$persistence_UNS2 === void 0 ? void 0 : _node$persistence_UNS2.type) !== null && _node$persistence_UNS !== void 0 ? _node$persistence_UNS : 'none',\n          backButton: (_node$persistence_UNS3 = (_node$persistence_UNS4 = node.persistence_UNSTABLE) === null || _node$persistence_UNS4 === void 0 ? void 0 : _node$persistence_UNS4.backButton) !== null && _node$persistence_UNS3 !== void 0 ? _node$persistence_UNS3 : false\n        }\n      };\n    }); // Filter on existance in atomValues so that externally-visible rules\n    // are also applied to modified atoms (specifically exclude selectors):\n\n    const modifiedAtoms = Recoil_filterSet(currentTree.dirtyAtoms, k => atomValues.has(k) || previousAtomValues.has(k));\n    callback({\n      atomValues,\n      previousAtomValues,\n      atomInfo,\n      modifiedAtoms,\n      transactionMetadata: { ...currentTree.transactionMetadata\n      }\n    });\n  }, [callback]));\n}\n\nfunction useRecoilTransactionObserver(callback) {\n  useTransactionSubscription(useCallback$1(store => {\n    const snapshot = cloneSnapshot$1(store, 'current');\n    const previousSnapshot = cloneSnapshot$1(store, 'previous');\n    callback({\n      snapshot,\n      previousSnapshot\n    });\n  }, [callback]));\n}\n\nfunction usePrevious(value) {\n  const ref = useRef$2();\n  useEffect$1(() => {\n    ref.current = value;\n  });\n  return ref.current;\n} // Return a snapshot of the current state and subscribe to all state changes\n\n\nfunction useRecoilSnapshot() {\n  const storeRef = useStoreRef$1();\n  const [snapshot, setSnapshot] = useState$1(() => cloneSnapshot$1(storeRef.current));\n  const previousSnapshot = usePrevious(snapshot);\n  const timeoutID = useRef$2();\n  useEffect$1(() => {\n    if (timeoutID.current && !isSSR$2) {\n      window.clearTimeout(timeoutID.current);\n    }\n\n    return snapshot.retain();\n  }, [snapshot]);\n  useTransactionSubscription(useCallback$1(store => setSnapshot(cloneSnapshot$1(store)), []));\n\n  if (previousSnapshot !== snapshot && !isSSR$2) {\n    if (timeoutID.current) {\n      previousSnapshot === null || previousSnapshot === void 0 ? void 0 : previousSnapshot.release_INTERNAL();\n      window.clearTimeout(timeoutID.current);\n    }\n\n    snapshot.retain();\n    timeoutID.current = window.setTimeout(() => {\n      snapshot.release_INTERNAL();\n      timeoutID.current = null;\n    }, SUSPENSE_TIMEOUT_MS);\n  }\n\n  return snapshot;\n}\n\nfunction useGotoRecoilSnapshot() {\n  const storeRef = useStoreRef$1();\n  return useCallback$1(snapshot => {\n    var _storeState$nextTree3;\n\n    const storeState = storeRef.current.getState();\n    const prev = (_storeState$nextTree3 = storeState.nextTree) !== null && _storeState$nextTree3 !== void 0 ? _storeState$nextTree3 : storeState.currentTree;\n    const next = snapshot.getStore_INTERNAL().getState().currentTree;\n    batchUpdates$2(() => {\n      const keysToUpdate = new Set();\n\n      for (const keys of [prev.atomValues.keys(), next.atomValues.keys()]) {\n        for (const key of keys) {\n          var _prev$atomValues$get, _next$atomValues$get;\n\n          if (((_prev$atomValues$get = prev.atomValues.get(key)) === null || _prev$atomValues$get === void 0 ? void 0 : _prev$atomValues$get.contents) !== ((_next$atomValues$get = next.atomValues.get(key)) === null || _next$atomValues$get === void 0 ? void 0 : _next$atomValues$get.contents) && getNode$4(key).shouldRestoreFromSnapshots) {\n            keysToUpdate.add(key);\n          }\n        }\n      }\n\n      keysToUpdate.forEach(key => {\n        setRecoilValueLoadable$1(storeRef.current, new AbstractRecoilValue$3(key), next.atomValues.has(key) ? Recoil_nullthrows(next.atomValues.get(key)) : DEFAULT_VALUE$3);\n      });\n      storeRef.current.replaceState(state => {\n        return { ...state,\n          stateID: snapshot.getID_INTERNAL()\n        };\n      });\n    });\n  }, [storeRef]);\n}\n\nfunction useSetUnvalidatedAtomValues() {\n  const storeRef = useStoreRef$1();\n  return (values, transactionMetadata = {}) => {\n    batchUpdates$2(() => {\n      storeRef.current.addTransactionMetadata(transactionMetadata);\n      values.forEach((value, key) => setUnvalidatedRecoilValue$2(storeRef.current, new AbstractRecoilValue$3(key), value));\n    });\n  };\n}\n\nclass Sentinel {}\n\nconst SENTINEL = new Sentinel();\n\nfunction useRecoilCallback(fn, deps) {\n  const storeRef = useStoreRef$1();\n  const gotoSnapshot = useGotoRecoilSnapshot();\n  return useCallback$1((...args) => {\n    function set(recoilState, newValueOrUpdater) {\n      setRecoilValue$2(storeRef.current, recoilState, newValueOrUpdater);\n    }\n\n    function reset(recoilState) {\n      setRecoilValue$2(storeRef.current, recoilState, DEFAULT_VALUE$3);\n    } // Use currentTree for the snapshot to show the currently committed state\n\n\n    const snapshot = cloneSnapshot$1(storeRef.current); // FIXME massive gains from doing this lazily\n\n    const atomicUpdate = atomicUpdater$1(storeRef.current);\n    let ret = SENTINEL;\n    batchUpdates$2(() => {\n      const errMsg = 'useRecoilCallback expects a function that returns a function: ' + 'it accepts a function of the type (RecoilInterface) => T = R ' + 'and returns a callback function T => R, where RecoilInterface is an ' + 'object {snapshot, set, ...} and T and R are the argument and return ' + 'types of the callback you want to create.  Please see the docs ' + 'at recoiljs.org for details.';\n\n      if (typeof fn !== 'function') {\n        throw new Error(errMsg);\n      } // flowlint-next-line unclear-type:off\n\n\n      const cb = fn({\n        set,\n        reset,\n        snapshot,\n        gotoSnapshot,\n        transact_UNSTABLE: atomicUpdate\n      });\n\n      if (typeof cb !== 'function') {\n        throw new Error(errMsg);\n      }\n\n      ret = cb(...args);\n    });\n    !!(ret instanceof Sentinel) ? process.env.NODE_ENV !== \"production\" ? Recoil_invariant(false, 'batchUpdates should return immediately') : Recoil_invariant(false) : void 0;\n    return ret;\n  }, deps != null ? [...deps, storeRef] : undefined // eslint-disable-line fb-www/react-hooks-deps\n  );\n} // I don't see a way to avoid the any type here because we want to accept readable\n// and writable values with any type parameter, but normally with writable ones\n// RecoilState<SomeT> is not a subtype of RecoilState<mixed>.\n\n\n// flowlint-line unclear-type:off\nfunction useRetain(toRetain) {\n  if (!Recoil_gkx_1('recoil_memory_managament_2020')) {\n    return;\n  } // eslint-disable-next-line fb-www/react-hooks\n\n\n  return useRetain_ACTUAL(toRetain);\n}\n\nfunction useRetain_ACTUAL(toRetain) {\n  const array = Array.isArray(toRetain) ? toRetain : [toRetain];\n  const retainables = array.map(a => a instanceof RetentionZone$3 ? a : a.key);\n  const storeRef = useStoreRef$1();\n  useEffect$1(() => {\n    if (!Recoil_gkx_1('recoil_memory_managament_2020')) {\n      return;\n    }\n\n    const store = storeRef.current;\n\n    if (timeoutID.current && !isSSR$2) {\n      // Already performed a temporary retain on render, simply cancel the release\n      // of that temporary retain.\n      window.clearTimeout(timeoutID.current);\n      timeoutID.current = null;\n    } else {\n      for (const r of retainables) {\n        updateRetainCount$2(store, r, 1);\n      }\n    }\n\n    return () => {\n      for (const r of retainables) {\n        updateRetainCount$2(store, r, -1);\n      }\n    }; // eslint-disable-next-line fb-www/react-hooks-deps\n  }, [storeRef, ...retainables]); // We want to retain if the component suspends. This is terrible but the Suspense\n  // API affords us no better option. If we suspend and never commit after some\n  // seconds, then release. The 'actual' retain/release in the effect above\n  // cancels this.\n\n  const timeoutID = useRef$2();\n  const previousRetainables = usePrevious(retainables);\n\n  if (!isSSR$2 && (previousRetainables === undefined || !Recoil_shallowArrayEqual(previousRetainables, retainables))) {\n    const store = storeRef.current;\n\n    for (const r of retainables) {\n      updateRetainCount$2(store, r, 1);\n    }\n\n    if (previousRetainables) {\n      for (const r of previousRetainables) {\n        updateRetainCount$2(store, r, -1);\n      }\n    }\n\n    if (timeoutID.current) {\n      window.clearTimeout(timeoutID.current);\n    }\n\n    timeoutID.current = window.setTimeout(() => {\n      timeoutID.current = null;\n\n      for (const r of retainables) {\n        updateRetainCount$2(store, r, -1);\n      }\n    }, SUSPENSE_TIMEOUT_MS);\n  }\n}\n\nfunction useRecoilTransaction(fn, deps) {\n  const storeRef = useStoreRef$1();\n  return useMemo$1(() => (...args) => {\n    const atomicUpdate = atomicUpdater$1(storeRef.current);\n    atomicUpdate(transactionInterface => {\n      fn(transactionInterface)(...args);\n    });\n  }, deps != null ? [...deps, storeRef] : undefined // eslint-disable-line fb-www/react-hooks-deps\n  );\n}\n\nvar Recoil_Hooks = {\n  recoilComponentGetRecoilValueCount_FOR_TESTING,\n  useGotoRecoilSnapshot,\n  useRecoilCallback,\n  useRecoilInterface: useRecoilInterface_DEPRECATED,\n  useRecoilSnapshot,\n  useRecoilState,\n  useRecoilStateLoadable,\n  useRecoilTransaction,\n  useRecoilTransactionObserver,\n  useRecoilValue,\n  useRecoilValueLoadable,\n  useRetain,\n  useResetRecoilState,\n  useSetRecoilState,\n  useSetUnvalidatedAtomValues,\n  useTransactionObservation_DEPRECATED,\n  useTransactionSubscription_DEPRECATED: useTransactionSubscription\n};\n\nconst {\n  peekNodeInfo: peekNodeInfo$2\n} = Recoil_FunctionalCore;\n\nconst {\n  useStoreRef: useStoreRef$2\n} = Recoil_RecoilRoot_react;\n\nfunction useGetRecoilValueInfo() {\n  const storeRef = useStoreRef$2();\n  return ({\n    key\n  }) => peekNodeInfo$2(storeRef.current, storeRef.current.getState().currentTree, key);\n}\n\nvar Recoil_useGetRecoilValueInfo = useGetRecoilValueInfo;\n\nconst {\n  RecoilRoot: RecoilRoot$1,\n  useStoreRef: useStoreRef$3\n} = Recoil_RecoilRoot_react;\n\n\n\nconst {\n  useMemo: useMemo$2\n} = react;\n\nfunction useRecoilBridgeAcrossReactRoots() {\n  const store = useStoreRef$3().current;\n  return useMemo$2(() => {\n    function RecoilBridge({\n      children\n    }) {\n      return /*#__PURE__*/react.createElement(RecoilRoot$1, {\n        store_INTERNAL: store\n      }, children);\n    }\n\n    return RecoilBridge;\n  }, [store]);\n}\n\nvar Recoil_useRecoilBridgeAcrossReactRoots = useRecoilBridgeAcrossReactRoots;\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nfunction isNode(object) {\n  var _ownerDocument, _doc$defaultView;\n\n  if (typeof window === 'undefined') {\n    return false;\n  }\n\n  const doc = object != null ? (_ownerDocument = object.ownerDocument) !== null && _ownerDocument !== void 0 ? _ownerDocument : object : document;\n  const defaultView = (_doc$defaultView = doc.defaultView) !== null && _doc$defaultView !== void 0 ? _doc$defaultView : window;\n  return !!(object != null && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));\n}\n\nvar Recoil_isNode = isNode;\n\nconst {\n  isReactNative: isReactNative$1,\n  isSSR: isSSR$3\n} = Recoil_Environment;\n\n\n\n\n\nfunction shouldNotBeFrozen(value) {\n  // Primitives and functions:\n  if (value === null || typeof value !== 'object') {\n    return true;\n  } // React elements:\n\n\n  switch (typeof value.$$typeof) {\n    case 'symbol':\n      return true;\n\n    case 'number':\n      return true;\n  } // Immutable structures:\n\n\n  if (value['@@__IMMUTABLE_ITERABLE__@@'] != null || value['@@__IMMUTABLE_KEYED__@@'] != null || value['@@__IMMUTABLE_INDEXED__@@'] != null || value['@@__IMMUTABLE_ORDERED__@@'] != null || value['@@__IMMUTABLE_RECORD__@@'] != null) {\n    return true;\n  } // DOM nodes:\n\n\n  if (Recoil_isNode(value)) {\n    return true;\n  }\n\n  if (Recoil_isPromise(value)) {\n    return true;\n  }\n\n  if (value instanceof Error) {\n    return true;\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return true;\n  } // Some environments, just as Jest, don't work with the instanceof check\n\n\n  if (!isSSR$3 && !isReactNative$1 && ( // $FlowFixMe(site=recoil) Window does not have a FlowType definition https://github.com/facebook/flow/issues/6709\n  value === window || value instanceof Window)) {\n    return true;\n  }\n\n  return false;\n} // Recursively freeze a value to enforce it is read-only.\n// This may also have minimal performance improvements for enumerating\n// objects (based on browser implementations, of course)\n\n\nfunction deepFreezeValue(value) {\n  if (typeof value !== 'object' || shouldNotBeFrozen(value)) {\n    return;\n  }\n\n  Object.freeze(value); // Make all properties read-only\n\n  for (const key in value) {\n    // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n    if (Object.prototype.hasOwnProperty.call(value, key)) {\n      const prop = value[key]; // Prevent infinite recurssion for circular references.\n\n      if (typeof prop === 'object' && prop != null && !Object.isFrozen(prop)) {\n        deepFreezeValue(prop);\n      }\n    }\n  }\n\n  Object.seal(value); // This also makes existing properties non-configurable.\n}\n\nvar Recoil_deepFreezeValue = deepFreezeValue;\n\nconst TIME_WARNING_THRESHOLD_MS = 15;\n\nfunction stringify(x, opt, key) {\n  // A optimization to avoid the more expensive JSON.stringify() for simple strings\n  // This may lose protection for u2028 and u2029, though.\n  if (typeof x === 'string' && !x.includes('\"') && !x.includes('\\\\')) {\n    return `\"${x}\"`;\n  } // Handle primitive types\n\n\n  switch (typeof x) {\n    case 'undefined':\n      return '';\n    // JSON.stringify(undefined) returns undefined, but we always want to return a string\n\n    case 'boolean':\n      return x ? 'true' : 'false';\n\n    case 'number':\n    case 'symbol':\n      // case 'bigint': // BigInt is not supported in www\n      return String(x);\n\n    case 'string':\n      // Add surrounding quotes and escape internal quotes\n      return JSON.stringify(x);\n\n    case 'function':\n      if ((opt === null || opt === void 0 ? void 0 : opt.allowFunctions) !== true) {\n        throw new Error('Attempt to serialize function in a Recoil cache key');\n      }\n\n      return `__FUNCTION(${x.name})__`;\n  }\n\n  if (x === null) {\n    return 'null';\n  } // Fallback case for unknown types\n\n\n  if (typeof x !== 'object') {\n    var _JSON$stringify;\n\n    return (_JSON$stringify = JSON.stringify(x)) !== null && _JSON$stringify !== void 0 ? _JSON$stringify : '';\n  } // Deal with all promises as equivalent for now.\n\n\n  if (Recoil_isPromise(x)) {\n    return '__PROMISE__';\n  } // Arrays handle recursive stringification\n\n\n  if (Array.isArray(x)) {\n    return `[${x.map((v, i) => stringify(v, opt, i.toString()))}]`;\n  } // If an object defines a toJSON() method, then use that to override the\n  // serialization.  This matches the behavior of JSON.stringify().\n  // Pass the key for compatibility.\n  // Immutable.js collections define this method to allow us to serialize them.\n\n\n  if (typeof x.toJSON === 'function') {\n    // flowlint-next-line unclear-type: off\n    return stringify(x.toJSON(key), opt, key);\n  } // For built-in Maps, sort the keys in a stable order instead of the\n  // default insertion order.  Support non-string keys.\n\n\n  if (x instanceof Map) {\n    const obj = {};\n\n    for (const [k, v] of x) {\n      // Stringify will escape any nested quotes\n      obj[typeof k === 'string' ? k : stringify(k, opt)] = v;\n    }\n\n    return stringify(obj, opt, key);\n  } // For built-in Sets, sort the keys in a stable order instead of the\n  // default insertion order.\n\n\n  if (x instanceof Set) {\n    return stringify(Array.from(x).sort((a, b) => stringify(a, opt).localeCompare(stringify(b, opt))), opt, key);\n  } // Anything else that is iterable serialize as an Array.\n\n\n  if (Symbol !== undefined && x[Symbol.iterator] != null && typeof x[Symbol.iterator] === 'function') {\n    // flowlint-next-line unclear-type: off\n    return stringify(Array.from(x), opt, key);\n  } // For all other Objects, sort the keys in a stable order.\n\n\n  return `{${Object.keys(x).filter(key => x[key] !== undefined).sort() // stringify the key to add quotes and escape any nested slashes or quotes.\n  .map(key => `${stringify(key, opt)}:${stringify(x[key], opt, key)}`).join(',')}}`;\n} // Utility similar to JSON.stringify() except:\n// * Serialize built-in Sets as an Array\n// * Serialize built-in Maps as an Object.  Supports non-string keys.\n// * Serialize other iterables as arrays\n// * Sort the keys of Objects and Maps to have a stable order based on string conversion.\n//    This overrides their default insertion order.\n// * Still uses toJSON() of any object to override serialization\n// * Support Symbols (though don't guarantee uniqueness)\n// * We could support BigInt, but Flow doesn't seem to like it.\n// See Recoil_stableStringify-test.js for examples\n\n\nfunction stableStringify(x, opt = {\n  allowFunctions: false\n}) {\n  if (process.env.NODE_ENV !== \"production\") {\n    if (typeof window !== 'undefined') {\n      const startTime = window.performance ? window.performance.now() : 0;\n      const str = stringify(x, opt);\n      const endTime = window.performance ? window.performance.now() : 0;\n\n      if (endTime - startTime > TIME_WARNING_THRESHOLD_MS) {\n        /* eslint-disable fb-www/no-console */\n        console.groupCollapsed(`Recoil: Spent ${endTime - startTime}ms computing a cache key`);\n        console.warn(x, str);\n        console.groupEnd();\n        /* eslint-enable fb-www/no-console */\n      }\n\n      return str;\n    }\n  }\n\n  return stringify(x, opt);\n}\n\nvar Recoil_stableStringify = stableStringify;\n\nclass TreeCache {\n  constructor(options) {\n    var _options$onHit, _options$onSet, _options$mapNodeValue;\n\n    _defineProperty(this, \"_numLeafs\", void 0);\n\n    _defineProperty(this, \"_root\", void 0);\n\n    _defineProperty(this, \"_onHit\", void 0);\n\n    _defineProperty(this, \"_onSet\", void 0);\n\n    _defineProperty(this, \"_mapNodeValue\", void 0);\n\n    this._numLeafs = 0;\n    this._root = null;\n    this._onHit = (_options$onHit = options === null || options === void 0 ? void 0 : options.onHit) !== null && _options$onHit !== void 0 ? _options$onHit : () => {};\n    this._onSet = (_options$onSet = options === null || options === void 0 ? void 0 : options.onSet) !== null && _options$onSet !== void 0 ? _options$onSet : () => {};\n    this._mapNodeValue = (_options$mapNodeValue = options === null || options === void 0 ? void 0 : options.mapNodeValue) !== null && _options$mapNodeValue !== void 0 ? _options$mapNodeValue : val => val;\n  }\n\n  size() {\n    return this._numLeafs;\n  } // TODO: nodeCount(): number\n\n\n  root() {\n    return this._root;\n  }\n\n  get(getNodeValue, handlers) {\n    var _this$getLeafNode;\n\n    return (_this$getLeafNode = this.getLeafNode(getNodeValue, handlers)) === null || _this$getLeafNode === void 0 ? void 0 : _this$getLeafNode.value;\n  }\n\n  getLeafNode(getNodeValue, handlers) {\n    return findLeaf(this.root(), nodeKey => this._mapNodeValue(getNodeValue(nodeKey)), {\n      onNodeVisit: node => {\n        handlers === null || handlers === void 0 ? void 0 : handlers.onNodeVisit(node);\n\n        if (node.type === 'leaf') {\n          this._onHit(node);\n        }\n      }\n    });\n  }\n\n  set(route, value, handlers) {\n    let leafNode;\n    const newRoot = addLeaf(this.root(), route.map(([nodeKey, nodeValue]) => [nodeKey, this._mapNodeValue(nodeValue)]), null, value, null, {\n      onNodeVisit: node => {\n        handlers === null || handlers === void 0 ? void 0 : handlers.onNodeVisit(node);\n\n        if (node.type === 'leaf') {\n          leafNode = node;\n        }\n      }\n    });\n\n    if (!this.root()) {\n      this._root = newRoot;\n    }\n\n    this._numLeafs++;\n\n    this._onSet(Recoil_nullthrows(leafNode));\n  }\n\n  delete(node) {\n    if (!this.root()) {\n      return false;\n    }\n\n    const root = Recoil_nullthrows(this.root());\n    const existsInTree = pruneNodeFromTree(root, node, node.parent);\n\n    if (!existsInTree) {\n      return false;\n    }\n\n    if (node === root || root.type === 'branch' && !root.branches.size) {\n      this._root = null;\n      this._numLeafs = 0;\n      return true;\n    }\n\n    this._numLeafs -= countDownstreamLeaves(node);\n    return true;\n  }\n\n  clear() {\n    this._numLeafs = 0;\n    this._root = null;\n  }\n\n}\n\nconst findLeaf = (root, getNodeValue, handlers) => {\n  var _handlers$onNodeVisit;\n\n  if (root == null) {\n    return undefined;\n  }\n\n  handlers === null || handlers === void 0 ? void 0 : (_handlers$onNodeVisit = handlers.onNodeVisit) === null || _handlers$onNodeVisit === void 0 ? void 0 : _handlers$onNodeVisit.call(handlers, root);\n\n  if (root.type === 'leaf') {\n    return root;\n  }\n\n  const nodeValue = getNodeValue(root.nodeKey);\n  return findLeaf(root.branches.get(nodeValue), getNodeValue, handlers);\n};\n\nconst addLeaf = (root, route, parent, value, branchKey, handlers) => {\n  var _handlers$onNodeVisit2;\n\n  let node;\n\n  if (root == null) {\n    if (route.length === 0) {\n      node = {\n        type: 'leaf',\n        value,\n        parent,\n        branchKey\n      };\n    } else {\n      const [path, ...rest] = route;\n      const [nodeKey, nodeValue] = path;\n      node = {\n        type: 'branch',\n        nodeKey,\n        parent,\n        branches: new Map(),\n        branchKey\n      };\n      node.branches.set(nodeValue, addLeaf(null, rest, node, value, nodeValue, handlers));\n    }\n  } else {\n    node = root;\n\n    if (route.length) {\n      const [path, ...rest] = route;\n      const [nodeKey, nodeValue] = path;\n      !(root.type === 'branch' && root.nodeKey === nodeKey) ? process.env.NODE_ENV !== \"production\" ? Recoil_invariant(false, 'Existing cache must have a branch midway through the route with matching node key') : Recoil_invariant(false) : void 0;\n      root.branches.set(nodeValue, addLeaf(root.branches.get(nodeValue), rest, root, value, nodeValue, handlers));\n    }\n  }\n\n  handlers === null || handlers === void 0 ? void 0 : (_handlers$onNodeVisit2 = handlers.onNodeVisit) === null || _handlers$onNodeVisit2 === void 0 ? void 0 : _handlers$onNodeVisit2.call(handlers, node);\n  return node;\n};\n\nconst pruneNodeFromTree = (root, node, parent) => {\n  if (!parent) {\n    return root === node;\n  }\n\n  parent.branches.delete(node.branchKey);\n  return pruneUpstreamBranches(root, parent, parent.parent);\n};\n\nconst pruneUpstreamBranches = (root, branchNode, parent) => {\n  if (!parent) {\n    return root === branchNode;\n  }\n\n  if (branchNode.branches.size === 0) {\n    parent.branches.delete(branchNode.branchKey);\n  }\n\n  return pruneUpstreamBranches(root, parent, parent.parent);\n};\n\nconst countDownstreamLeaves = node => node.type === 'leaf' ? 1 : Array.from(node.branches.values()).reduce((sum, currNode) => sum + countDownstreamLeaves(currNode), 0);\n\nvar Recoil_TreeCache = {\n  TreeCache\n};\n\nvar Recoil_TreeCache_1 = Recoil_TreeCache.TreeCache;\n\nvar Recoil_TreeCache$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  TreeCache: Recoil_TreeCache_1\n});\n\nclass LRUCache {\n  constructor(options) {\n    var _options$mapKey;\n\n    _defineProperty(this, \"_maxSize\", void 0);\n\n    _defineProperty(this, \"_size\", void 0);\n\n    _defineProperty(this, \"_head\", void 0);\n\n    _defineProperty(this, \"_tail\", void 0);\n\n    _defineProperty(this, \"_map\", void 0);\n\n    _defineProperty(this, \"_keyMapper\", void 0);\n\n    this._maxSize = options.maxSize;\n    this._size = 0;\n    this._head = null;\n    this._tail = null;\n    this._map = new Map();\n    this._keyMapper = (_options$mapKey = options.mapKey) !== null && _options$mapKey !== void 0 ? _options$mapKey : v => v;\n  }\n\n  head() {\n    return this._head;\n  }\n\n  tail() {\n    return this._tail;\n  }\n\n  size() {\n    return this._size;\n  }\n\n  maxSize() {\n    return this._maxSize;\n  }\n\n  has(key) {\n    return this._map.has(this._keyMapper(key));\n  }\n\n  get(key) {\n    const mappedKey = this._keyMapper(key);\n\n    const node = this._map.get(mappedKey);\n\n    if (!node) {\n      return undefined;\n    }\n\n    this.set(key, node.value);\n    return node.value;\n  }\n\n  set(key, val) {\n    const mappedKey = this._keyMapper(key);\n\n    const existingNode = this._map.get(mappedKey);\n\n    if (existingNode) {\n      this.delete(key);\n    }\n\n    const head = this.head();\n    const node = {\n      key,\n      right: head,\n      left: null,\n      value: val\n    };\n\n    if (head) {\n      head.left = node;\n    } else {\n      this._tail = node;\n    }\n\n    this._map.set(mappedKey, node);\n\n    this._head = node;\n    this._size++;\n\n    this._maybeDeleteLRU();\n  }\n\n  _maybeDeleteLRU() {\n    if (this.size() > this.maxSize()) {\n      this.deleteLru();\n    }\n  }\n\n  deleteLru() {\n    const tail = this.tail();\n\n    if (tail) {\n      this.delete(tail.key);\n    }\n  }\n\n  delete(key) {\n    const mappedKey = this._keyMapper(key);\n\n    if (!this._size || !this._map.has(mappedKey)) {\n      return;\n    }\n\n    const node = Recoil_nullthrows(this._map.get(mappedKey));\n    const right = node.right;\n    const left = node.left;\n\n    if (right) {\n      right.left = node.left;\n    }\n\n    if (left) {\n      left.right = node.right;\n    }\n\n    if (node === this.head()) {\n      this._head = right;\n    }\n\n    if (node === this.tail()) {\n      this._tail = left;\n    }\n\n    this._map.delete(mappedKey);\n\n    this._size--;\n  }\n\n  clear() {\n    this._size = 0;\n    this._head = null;\n    this._tail = null;\n    this._map = new Map();\n  }\n\n}\n\nvar Recoil_LRUCache = {\n  LRUCache\n};\n\nvar Recoil_LRUCache_1 = Recoil_LRUCache.LRUCache;\n\nvar Recoil_LRUCache$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  LRUCache: Recoil_LRUCache_1\n});\n\nconst {\n  LRUCache: LRUCache$1\n} = Recoil_LRUCache$1;\n\nconst {\n  TreeCache: TreeCache$1\n} = Recoil_TreeCache$1;\n\nfunction treeCacheLRU(maxSize, mapNodeValue = v => v) {\n  const lruCache = new LRUCache$1({\n    maxSize\n  });\n  const cache = new TreeCache$1({\n    mapNodeValue,\n    onHit: node => {\n      lruCache.set(node, true);\n    },\n    onSet: node => {\n      const lruNode = lruCache.tail();\n      lruCache.set(node, true);\n\n      if (lruNode && cache.size() > maxSize) {\n        cache.delete(lruNode.key);\n      }\n    }\n  }); // $FlowFixMe[method-unbinding]\n\n  return cache;\n}\n\nvar Recoil_treeCacheLRU = treeCacheLRU;\n\nconst {\n  TreeCache: TreeCache$2\n} = Recoil_TreeCache$1;\n\n\n\nconst defaultPolicy = {\n  equality: 'reference',\n  eviction: 'keep-all',\n  maxSize: Infinity\n};\n\nfunction treeCacheFromPolicy({\n  equality = defaultPolicy.equality,\n  eviction = defaultPolicy.eviction,\n  maxSize = defaultPolicy.maxSize\n} = defaultPolicy) {\n  const valueMapper = getValueMapper(equality);\n  const treeCache = getTreeCache(eviction, maxSize, valueMapper);\n  return treeCache;\n}\n\nfunction getValueMapper(equality) {\n  switch (equality) {\n    case 'reference':\n      return val => val;\n\n    case 'value':\n      return val => Recoil_stableStringify(val);\n  }\n\n  throw new Error(`Unrecognized equality policy ${equality}`);\n}\n\nfunction getTreeCache(eviction, maxSize, mapNodeValue) {\n  switch (eviction) {\n    case 'keep-all':\n      // $FlowFixMe[method-unbinding]\n      return new TreeCache$2({\n        mapNodeValue\n      });\n\n    case 'lru':\n      return Recoil_treeCacheLRU(Recoil_nullthrows(maxSize), mapNodeValue);\n\n    case 'most-recent':\n      return Recoil_treeCacheLRU(1, mapNodeValue);\n  }\n\n  throw new Error(`Unrecognized eviction policy ${eviction}`);\n}\n\nvar Recoil_treeCacheFromPolicy = treeCacheFromPolicy;\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+recoil\n * \n * @format\n *\n * This is a stub for some integration into FB internal stuff\n */\nfunction startPerfBlock(_id) {\n  return () => null;\n}\n\nvar Recoil_PerformanceTimings = {\n  startPerfBlock\n};\n\nconst {\n  CANCELED: CANCELED$2,\n  Canceled: Canceled$1,\n  loadableWithError: loadableWithError$1,\n  loadableWithPromise: loadableWithPromise$1,\n  loadableWithValue: loadableWithValue$2\n} = Recoil_Loadable;\n\n\n\nconst {\n  getNodeLoadable: getNodeLoadable$2,\n  peekNodeLoadable: peekNodeLoadable$1,\n  setNodeValue: setNodeValue$3\n} = Recoil_FunctionalCore;\n\nconst {\n  saveDependencyMapToStore: saveDependencyMapToStore$1\n} = Recoil_Graph;\n\nconst {\n  DEFAULT_VALUE: DEFAULT_VALUE$4,\n  RecoilValueNotReady: RecoilValueNotReady$2,\n  getConfigDeletionHandler: getConfigDeletionHandler$1,\n  registerNode: registerNode$1\n} = Recoil_Node;\n\nconst {\n  isRecoilValue: isRecoilValue$3\n} = Recoil_RecoilValue$1;\n\nconst {\n  AbstractRecoilValue: AbstractRecoilValue$4\n} = Recoil_RecoilValue$1;\n\nconst {\n  setRecoilValueLoadable: setRecoilValueLoadable$2\n} = Recoil_RecoilValueInterface;\n\nconst {\n  retainedByOptionWithDefault: retainedByOptionWithDefault$1\n} = Recoil_Retention;\n\nconst {\n  cloneSnapshot: cloneSnapshot$2\n} = Recoil_Snapshot$1;\n\n\n\n\n\n\n\n\n\n\n\nconst {\n  startPerfBlock: startPerfBlock$1\n} = Recoil_PerformanceTimings;\n\n\n\nconst dependencyStack = []; // for detecting circular dependencies.\n\nconst waitingStores = new Map();\n/* eslint-disable no-redeclare */\n\nconst getNewExecutionId = (() => {\n  let executionId = 0;\n  return () => executionId++;\n})();\n\nfunction getInitialExecutionInfo() {\n  return {\n    depValuesDiscoveredSoFarDuringAsyncWork: null,\n    latestLoadable: null,\n    latestExecutionId: null,\n    stateVersion: null\n  };\n}\n\nfunction selector(options) {\n  const {\n    key,\n    get,\n    cachePolicy_UNSTABLE: cachePolicy\n  } = options;\n  const set = options.set != null ? options.set : undefined; // flow\n\n  const cache = Recoil_treeCacheFromPolicy(cachePolicy !== null && cachePolicy !== void 0 ? cachePolicy : {\n    equality: 'reference',\n    eviction: 'keep-all'\n  });\n  const retainedBy = retainedByOptionWithDefault$1(options.retainedBy_UNSTABLE);\n  const executionInfoMap = new Map();\n  let liveStoresCount = 0;\n\n  function selectorIsLive() {\n    return !Recoil_gkx_1('recoil_memory_managament_2020') || liveStoresCount > 0;\n  }\n\n  function getExecutionInfo(store) {\n    if (!executionInfoMap.has(store)) {\n      executionInfoMap.set(store, getInitialExecutionInfo());\n    }\n\n    return Recoil_nullthrows(executionInfoMap.get(store));\n  }\n\n  function selectorInit(store) {\n    liveStoresCount++;\n    store.getState().knownSelectors.add(key); // FIXME remove knownSelectors?\n\n    return () => {\n      liveStoresCount--;\n      store.getState().knownSelectors.delete(key);\n      executionInfoMap.delete(store);\n    };\n  }\n\n  function selectorShouldDeleteConfigOnRelease() {\n    return getConfigDeletionHandler$1(key) !== undefined && !selectorIsLive();\n  }\n\n  function notifyStoreWhenAsyncSettles(store, loadable, executionId) {\n    if (loadable.state === 'loading') {\n      let stores = waitingStores.get(executionId);\n\n      if (stores == null) {\n        waitingStores.set(executionId, stores = new Set());\n      }\n\n      stores.add(store);\n    }\n  }\n\n  function notifyStoresOfSettledAsync(newLoadable, executionId) {\n    const stores = waitingStores.get(executionId);\n\n    if (stores !== undefined) {\n      for (const store of stores) {\n        setRecoilValueLoadable$2(store, new AbstractRecoilValue$4(key), newLoadable);\n      }\n\n      waitingStores.delete(executionId);\n    }\n  }\n\n  function getCachedNodeLoadable(store, state, key) {\n    const isKeyPointingToSelector = store.getState().knownSelectors.has(key);\n    /**\n     * It's important that we don't bypass calling getNodeLoadable for atoms\n     * as getNodeLoadable has side effects in state\n     */\n\n    if (isKeyPointingToSelector && state.atomValues.has(key)) {\n      return Recoil_nullthrows(state.atomValues.get(key));\n    }\n\n    const loadable = getNodeLoadable$2(store, state, key);\n\n    if (loadable.state !== 'loading' && isKeyPointingToSelector) {\n      state.atomValues.set(key, loadable);\n    }\n\n    return loadable;\n  }\n  /**\n   * This function attaches a then() and a catch() to a promise that was\n   * returned from a selector's get() (either explicitly or implicitly by\n   * running a function that uses the \"async\" keyword). If a selector's get()\n   * returns a promise, we have two possibilities:\n   *\n   * 1. The promise will resolve, in which case it will have completely finished\n   *    executing without any remaining pending dependencies. No more retries\n   *    are needed and we can proceed with updating the cache and notifying\n   *    subscribers (if it is the latest execution, otherwise only the cache\n   *    will be updated and subscriptions will not be fired). This is the case\n   *    handled by the attached then() handler.\n   *\n   * 2. The promise will throw because it either has an error or it came across\n   *    an async dependency that has not yet resolved, in which case we will\n   *    call wrapDepdencyPromise(), whose responsibility is to handle dependency\n   *    promises. This case is handled by the attached catch() handler.\n   *\n   * Both branches will eventually resolve to the final result of the selector\n   * (or an error if a real error occurred).\n   *\n   * The execution will run to completion even if it is stale, and its value\n   * will be cached. But stale executions will not update global state or update\n   * executionInfo as that is the responsibility of the 'latest' execution.\n   *\n   * Note this function should not be passed a promise that was thrown--AKA a\n   * dependency promise. Dependency promises should be passed to\n   * wrapPendingDependencyPromise()).\n   */\n\n\n  function wrapPendingPromise(store, promise, state, depValues, executionId) {\n    return promise.then(value => {\n      if (!selectorIsLive()) {\n        // The selector was released since the request began; ignore the response.\n        clearExecutionInfo(store, executionId);\n        return CANCELED$2;\n      }\n\n      const loadable = loadableWithValue$2(value);\n      maybeFreezeValue(value);\n      setCache(state, depValuesToDepRoute(depValues), loadable);\n      setDepsInStore(store, state, new Set(depValues.keys()), executionId);\n      setLoadableInStoreToNotifyDeps(store, loadable, executionId);\n      return {\n        __value: value,\n        __key: key\n      };\n    }).catch(errorOrPromise => {\n      if (!selectorIsLive()) {\n        // The selector was released since the request began; ignore the response.\n        clearExecutionInfo(store, executionId);\n        return CANCELED$2;\n      }\n\n      if (isLatestExecution(store, executionId)) {\n        updateExecutionInfoDepValues(depValues, store, executionId);\n      }\n\n      if (Recoil_isPromise(errorOrPromise)) {\n        return wrapPendingDependencyPromise(store, errorOrPromise, state, depValues, executionId);\n      }\n\n      const loadable = loadableWithError$1(errorOrPromise);\n      maybeFreezeValue(errorOrPromise);\n      setCache(state, depValuesToDepRoute(depValues), loadable);\n      setDepsInStore(store, state, new Set(depValues.keys()), executionId);\n      setLoadableInStoreToNotifyDeps(store, loadable, executionId);\n      throw errorOrPromise;\n    });\n  }\n  /**\n   * This function attaches a then() and a catch() to a promise that was\n   * thrown from a selector's get(). If a selector's get() throws a promise,\n   * we have two possibilities:\n   *\n   * 1. The promise will resolve, meaning one of our selector's dependencies is\n   *    now available and we should \"retry\" our get() by running it again. This\n   *    is the case handled by the attached then() handler.\n   *\n   * 2. The promise will throw because something went wrong with the dependency\n   *    promise (in other words a real error occurred). This case is handled by\n   *    the attached catch() handler. If the dependency promise throws, it is\n   *    _always_ a real error and not another dependency promise (any dependency\n   *    promises would have been handled upstream).\n   *\n   * The then() branch will eventually resolve to the final result of the\n   * selector (or an error if a real error occurs), and the catch() will always\n   * resolve to an error because the dependency promise is a promise that was\n   * wrapped upstream, meaning it will only resolve to its real value or to a\n   * real error.\n   *\n   * The execution will run to completion even if it is stale, and its value\n   * will be cached. But stale executions will not update global state or update\n   * executionInfo as that is the responsibility of the 'latest' execution.\n   *\n   * Note this function should not be passed a promise that was returned from\n   * get(). The intention is that this function is only passed promises that\n   * were thrown due to a pending dependency. Promises returned by get() should\n   * be passed to wrapPendingPromise() instead.\n   */\n\n\n  function wrapPendingDependencyPromise(store, promise, state, existingDeps, executionId) {\n    return promise.then(resolvedDep => {\n      if (!selectorIsLive()) {\n        // The selector was released since the request began; ignore the response.\n        clearExecutionInfo(store, executionId);\n        return CANCELED$2;\n      }\n\n      if (resolvedDep instanceof Canceled$1) {\n        Recoil_recoverableViolation('Selector was released while it had dependencies');\n        return CANCELED$2;\n      }\n\n      const {\n        __key: resolvedDepKey,\n        __value: depValue\n      } = resolvedDep !== null && resolvedDep !== void 0 ? resolvedDep : {};\n      /**\n       * We need to bypass the selector dep cache if the resolved dep was a\n       * user-thrown promise because the selector dep cache will contain the\n       * stale values of dependencies, causing an infinite evaluation loop.\n       */\n\n      let bypassSelectorDepCacheOnReevaluation = true;\n\n      if (resolvedDepKey != null) {\n        /**\n         * Note for async atoms, this means we are changing the atom's value\n         * in the store for the given version. This should be alright because\n         * the version of state is now stale and a new version will have\n         * already been triggered by the atom being resolved (see this logic\n         * in Recoil_atom.js)\n         */\n        state.atomValues.set(resolvedDepKey, loadableWithValue$2(depValue));\n        /**\n         * We've added the resolved dependency to the selector dep cache, so\n         * there's no need to bypass the cache\n         */\n\n        bypassSelectorDepCacheOnReevaluation = false;\n      }\n      /**\n       * Optimization: Now that the dependency has resolved, let's try hitting\n       * the cache in case the dep resolved to a value we have previously seen.\n       *\n       * TODO:\n       * Note this optimization is not perfect because it only prevents re-executions\n       * _after_ the point where an async dependency is found. Any code leading\n       * up to the async dependency may have run unnecessarily. The ideal case\n       * would be to wait for the async dependency to resolve first, check the\n       * cache, and prevent _any_ execution of the selector if the resulting\n       * value of the dependency leads to a path that is found in the cache.\n       * The ideal case is more difficult to implement as it would require that\n       * we capture and wait for the the async dependency right after checking\n       * the cache. The current approach takes advantage of the fact that running\n       * the selector already has a code path that lets use exit early when\n       * an async dep resolves.\n       */\n\n\n      const cachedLoadable = getValFromCacheAndUpdatedDownstreamDeps(store, state);\n\n      if (cachedLoadable && cachedLoadable.state === 'hasValue') {\n        setExecutionInfo(cachedLoadable, store);\n        return {\n          __value: cachedLoadable.contents,\n          __key: key\n        };\n      }\n\n      const [loadable, depValues] = evaluateSelectorGetter(store, state, executionId, bypassSelectorDepCacheOnReevaluation);\n\n      if (isLatestExecution(store, executionId)) {\n        updateExecutionInfoDepValues(depValues, store, executionId);\n      }\n\n      maybeFreezeLoadableContents(loadable);\n\n      if (loadable.state !== 'loading') {\n        setCache(state, depValuesToDepRoute(depValues), loadable);\n        setDepsInStore(store, state, new Set(depValues.keys()), executionId);\n        setLoadableInStoreToNotifyDeps(store, loadable, executionId);\n      }\n\n      if (loadable.state === 'hasError') {\n        throw loadable.contents;\n      }\n\n      if (loadable.state === 'hasValue') {\n        return {\n          __value: loadable.contents,\n          __key: key\n        };\n      }\n      /**\n       * Returning promise here without wrapping as the wrapepr logic was\n       * already done when we called evaluateSelectorGetter() to get this\n       * loadable\n       */\n\n\n      return loadable.contents;\n    }).catch(error => {\n      if (!selectorIsLive()) {\n        // The selector was released since the request began; ignore the response.\n        clearExecutionInfo(store, executionId);\n        return CANCELED$2;\n      }\n\n      const loadable = loadableWithError$1(error);\n      maybeFreezeValue(error);\n      setCache(state, depValuesToDepRoute(existingDeps), loadableWithError$1(error));\n      setDepsInStore(store, state, new Set(existingDeps.keys()), executionId);\n      setLoadableInStoreToNotifyDeps(store, loadable, executionId);\n      throw error;\n    });\n  }\n\n  function setLoadableInStoreToNotifyDeps(store, loadable, executionId) {\n    if (isLatestExecution(store, executionId)) {\n      setExecutionInfo(loadable, store);\n      notifyStoresOfSettledAsync(loadable, executionId);\n    }\n  }\n\n  function setDepsInStore(store, state, deps, executionId) {\n    var _store$getState, _store$getState$curre, _store$getState2, _store$getState2$next;\n\n    if (isLatestExecution(store, executionId) || state.version === ((_store$getState = store.getState()) === null || _store$getState === void 0 ? void 0 : (_store$getState$curre = _store$getState.currentTree) === null || _store$getState$curre === void 0 ? void 0 : _store$getState$curre.version) || state.version === ((_store$getState2 = store.getState()) === null || _store$getState2 === void 0 ? void 0 : (_store$getState2$next = _store$getState2.nextTree) === null || _store$getState2$next === void 0 ? void 0 : _store$getState2$next.version)) {\n      var _store$getState$nextT, _store$getState3, _store$getState3$next;\n\n      saveDependencyMapToStore$1(new Map([[key, deps]]), store, (_store$getState$nextT = (_store$getState3 = store.getState()) === null || _store$getState3 === void 0 ? void 0 : (_store$getState3$next = _store$getState3.nextTree) === null || _store$getState3$next === void 0 ? void 0 : _store$getState3$next.version) !== null && _store$getState$nextT !== void 0 ? _store$getState$nextT : store.getState().currentTree.version);\n    }\n  }\n\n  function setNewDepInStore(store, state, deps, newDepKey, executionId) {\n    deps.add(newDepKey);\n    setDepsInStore(store, state, deps, executionId);\n  }\n\n  function evaluateSelectorGetter(store, state, executionId, bypassSelectorDepCache = false) {\n    const endPerfBlock = startPerfBlock$1(key); // TODO T63965866: use execution ID here\n\n    let result;\n    let resultIsError = false;\n    let loadable;\n    const depValues = new Map();\n    /**\n     * Starting a fresh set of deps that we'll be using to update state. We're\n     * starting a new set versus adding it in existing state deps because\n     * the version of state that we update deps for may be a more recent version\n     * than the version the selector was called with. This is because the latest\n     * execution will update the deps of the current/latest version of state (\n     * this is safe to do because the fact that the selector is the latest\n     * execution means the deps we discover below are our best guess at the\n     * deps for the current/latest state in the store)\n     */\n\n    const deps = new Set();\n    setDepsInStore(store, state, deps, executionId);\n\n    function getRecoilValue(recoilValue) {\n      const {\n        key: depKey\n      } = recoilValue;\n      setNewDepInStore(store, state, deps, depKey, executionId);\n      const depLoadable = bypassSelectorDepCache ? getNodeLoadable$2(store, state, depKey) : getCachedNodeLoadable(store, state, depKey);\n      maybeFreezeLoadableContents(depLoadable);\n      depValues.set(depKey, depLoadable);\n\n      if (depLoadable.state === 'hasValue') {\n        return depLoadable.contents;\n      }\n\n      throw depLoadable.contents;\n    }\n\n    let gateCallback = false;\n\n    const getCallback = fn => {\n      return (...args) => {\n        if (!gateCallback) {\n          throw new Error('getCallback() should only be called asynchronously after the selector is evalutated.  It can be used for selectors to return objects with callbacks that can obtain the current Recoil state without a subscription.');\n        }\n\n        const snapshot = cloneSnapshot$2(store);\n        const cb = fn({\n          snapshot\n        });\n\n        if (typeof cb !== 'function') {\n          throw new Error('getCallback() expects a function that returns a function.');\n        }\n\n        return cb(...args);\n      };\n    };\n\n    try {\n      result = get({\n        get: getRecoilValue,\n        getCallback\n      });\n      result = isRecoilValue$3(result) ? getRecoilValue(result) : result;\n      gateCallback = true;\n\n      if (Recoil_isPromise(result)) {\n        result = wrapPendingPromise(store, result, state, depValues, executionId).finally(endPerfBlock);\n      } else {\n        endPerfBlock();\n      }\n    } catch (errorOrDepPromise) {\n      result = errorOrDepPromise;\n\n      if (Recoil_isPromise(result)) {\n        result = wrapPendingDependencyPromise(store, result, state, depValues, executionId).finally(endPerfBlock);\n      } else {\n        resultIsError = true;\n        endPerfBlock();\n      }\n    }\n\n    if (resultIsError) {\n      loadable = loadableWithError$1(result);\n    } else if (Recoil_isPromise(result)) {\n      loadable = loadableWithPromise$1(result);\n    } else {\n      loadable = loadableWithValue$2(result);\n    }\n\n    maybeFreezeLoadableContents(loadable);\n    return [loadable, depValues];\n  }\n\n  function getValFromCacheAndUpdatedDownstreamDeps(store, state) {\n    const depsAfterCacheDone = new Set();\n    const executionInfo = getExecutionInfo(store);\n    const cachedVal = cache.get(nodeKey => {\n      !(typeof nodeKey === 'string') ? process.env.NODE_ENV !== \"production\" ? Recoil_invariant(false, 'Cache nodeKey is type string') : Recoil_invariant(false) : void 0;\n      const loadable = getCachedNodeLoadable(store, state, nodeKey);\n      return loadable.contents;\n    }, {\n      onNodeVisit: node => {\n        if (node.type === 'branch' && node.nodeKey !== key && typeof node.nodeKey === 'string') {\n          depsAfterCacheDone.add(node.nodeKey);\n        }\n      }\n    });\n    /**\n     * Ensure store contains correct dependencies if we hit the cache so that\n     * the store deps and cache are in sync for a given state. This is important\n     * because store deps are normally updated when new executions are created,\n     * but cache hits don't trigger new executions but they still _may_ signifiy\n     * a change in deps in the store if the store deps for this state are empty\n     * or stale.\n     */\n\n    if (cachedVal) {\n      setDepsInStore(store, state, depsAfterCacheDone, executionInfo.latestExecutionId);\n    }\n\n    return cachedVal;\n  }\n  /**\n   * FIXME: dep keys should take into account the state of the loadable to\n   * prevent the edge case where a loadable with an error and a loadable with\n   * an error as a value are treated as the same thing incorrectly. For example\n   * these two should be treated differently:\n   *\n   * selector({key: '', get: () => new Error('hi')});\n   * selector({key: '', get () => {throw new Error('hi')}});\n   *\n   * With current implementation they are treated the same\n   */\n\n\n  function depValuesToDepRoute(depValues) {\n    return Array.from(depValues.entries()).map(([key, valLoadable]) => [key, valLoadable.contents]);\n  }\n\n  function getValFromRunningNewExecutionAndUpdatedDeps(store, state) {\n    const newExecutionId = getNewExecutionId();\n    const [loadable, newDepValues] = evaluateSelectorGetter(store, state, newExecutionId);\n    setExecutionInfo(loadable, store, newDepValues, newExecutionId, state);\n    maybeSetCacheWithLoadable(state, depValuesToDepRoute(newDepValues), loadable);\n    notifyStoreWhenAsyncSettles(store, loadable, newExecutionId);\n    return loadable;\n  }\n  /**\n   * Given a tree state, this function returns the \"selector result\", which is\n   * defined as a size-2 tuple of [DependencyMap, Loadable<T>].\n   *\n   * The selector's get() function will only be re-evaluated if _both_ of the\n   * following statements are true:\n   *\n   * 1. The current dep values from the given state produced a cache key that\n   *    was not found in the cache.\n   * 2. There is no currently running async execution OR there is an\n   *    async execution that is running, but after comparing the dep values in\n   *    the given state with the dep values that the execution has discovered so\n   *    far we find that at least one dep value has changed, in which case we\n   *    start a new execution (the previously running execution will continue to\n   *    run to completion, but only the new execution will be deemed the\n   *    'latest' execution, meaning it will be the only execution that will\n   *    update global state when it is finished. Any non-latest executions will\n   *    run to completion and update the selector cache but not global state).\n   */\n\n\n  function getSelectorValAndUpdatedDeps(store, state) {\n    const cachedVal = getValFromCacheAndUpdatedDownstreamDeps(store, state);\n\n    if (cachedVal != null) {\n      setExecutionInfo(cachedVal, store);\n      return cachedVal;\n    }\n\n    const inProgressExecutionInfo = getExecutionInfoOfInProgressExecution(store, state); // FIXME: this won't work with custom caching b/c it uses separate cache\n\n    if (inProgressExecutionInfo) {\n      const executionInfo = inProgressExecutionInfo;\n      notifyStoreWhenAsyncSettles(store, Recoil_nullthrows(executionInfo.latestLoadable), Recoil_nullthrows(executionInfo.latestExecutionId)); // FIXME: check after the fact to see if we made the right choice by waiting\n\n      return Recoil_nullthrows(executionInfo.latestLoadable);\n    }\n\n    return getValFromRunningNewExecutionAndUpdatedDeps(store, state);\n  }\n  /**\n   * Searches execution info across all stores to see if there is an in-progress\n   * execution whose dependency values match the values of the requesting store.\n   */\n\n\n  function getExecutionInfoOfInProgressExecution(store, state) {\n    var _Array$from$find;\n\n    const [, executionInfo] = (_Array$from$find = Array.from(executionInfoMap.entries()).find(([, executionInfo]) => {\n      return executionInfo.latestLoadable != null && executionInfo.latestExecutionId != null && !haveAsyncDepsChanged(store, state);\n    })) !== null && _Array$from$find !== void 0 ? _Array$from$find : [];\n    return executionInfo;\n  }\n\n  const mapOfCheckedVersions = new Map();\n\n  function haveAsyncDepsChanged(store, state) {\n    var _executionInfo$depVal, _mapOfCheckedVersions;\n\n    const executionInfo = getExecutionInfo(store);\n    const oldDepValues = (_executionInfo$depVal = executionInfo.depValuesDiscoveredSoFarDuringAsyncWork) !== null && _executionInfo$depVal !== void 0 ? _executionInfo$depVal : new Map();\n    const cachedDepValuesCheckedForThisVersion = Array(((_mapOfCheckedVersions = mapOfCheckedVersions.get(state.version)) !== null && _mapOfCheckedVersions !== void 0 ? _mapOfCheckedVersions : new Map()).entries());\n    const isCachedVersionSame = mapOfCheckedVersions.has(state.version) && cachedDepValuesCheckedForThisVersion.length === oldDepValues.size && cachedDepValuesCheckedForThisVersion.every(([nodeKey, nodeVal]) => {\n      return oldDepValues.get(nodeKey) === nodeVal;\n    });\n\n    if (oldDepValues == null || state.version === executionInfo.stateVersion || isCachedVersionSame) {\n      return false;\n    }\n\n    mapOfCheckedVersions.set(state.version, new Map(oldDepValues));\n    return Array.from(oldDepValues).some(([nodeKey, oldVal]) => {\n      const loadable = getCachedNodeLoadable(store, state, nodeKey);\n      return loadable.contents !== oldVal.contents &&\n      /**\n       * FIXME: in the condition below we're making the assumption that a\n       * dependency that goes from loading to having a value is always because\n       * the dependency resolved to that value, so we don't count it as a dep\n       * change as the normal retry loop will handle retrying in response to a\n       * resolved async dep. This is an incorrect assumption for the edge case\n       * where there is an async selector that is loading, and while it is\n       * loading one of its dependencies changes, triggering a new execution,\n       * and that new execution produces a value synchronously (we don't make\n       * that assumption for asynchronous work b/c it's guaranteed that a\n       * loadable that goes from 'loading' to 'loading' in a new loadable is\n       * a dep change).\n       */\n      !(oldVal.state === 'loading' && loadable.state !== 'loading');\n    });\n  }\n  /**\n   * This function will update the selector's execution info when the selector\n   * has either finished running an execution or has started a new execution. If\n   * the given loadable is in a 'loading' state, the intention is that a new\n   * execution has started. Otherwise, the intention is that an execution has\n   * just finished.\n   */\n\n\n  function setExecutionInfo(loadable, store, depValues, newExecutionId, state) {\n    const executionInfo = getExecutionInfo(store);\n\n    if (loadable.state === 'loading') {\n      executionInfo.depValuesDiscoveredSoFarDuringAsyncWork = depValues;\n      executionInfo.latestExecutionId = newExecutionId;\n      executionInfo.latestLoadable = loadable;\n      executionInfo.stateVersion = state === null || state === void 0 ? void 0 : state.version;\n    } else {\n      executionInfo.depValuesDiscoveredSoFarDuringAsyncWork = null;\n      executionInfo.latestExecutionId = null;\n      executionInfo.latestLoadable = null;\n      executionInfo.stateVersion = null;\n    }\n  }\n  /**\n   * Conditionally updates the cache with a given loadable.\n   *\n   * We only cache loadables that are not loading because our cache keys are\n   * based on dep values, which are in an unfinished state for loadables that\n   * have a 'loading' state (new deps may be discovered while the selector\n   * runs its async code). We never want to cache partial dependencies b/c it\n   * could lead to errors, such as prematurely returning the result based on a\n   * partial list of deps-- we need the full list of deps to ensure that we\n   * are returning the correct result from cache.\n   */\n\n\n  function maybeSetCacheWithLoadable(state, depRoute, loadable) {\n    if (loadable.state !== 'loading') {\n      setCache(state, depRoute, loadable);\n    }\n  }\n\n  function updateExecutionInfoDepValues(depValues, store, executionId) {\n    const executionInfo = getExecutionInfo(store);\n\n    if (isLatestExecution(store, executionId)) {\n      executionInfo.depValuesDiscoveredSoFarDuringAsyncWork = depValues;\n    }\n  }\n\n  function clearExecutionInfo(store, executionId) {\n    if (isLatestExecution(store, executionId)) {\n      executionInfoMap.delete(store);\n    }\n  }\n\n  function isLatestExecution(store, executionId) {\n    const executionInfo = getExecutionInfo(store);\n    return executionId === executionInfo.latestExecutionId;\n  }\n\n  function maybeFreezeLoadableContents(loadable) {\n    if (loadable.state !== 'loading') {\n      maybeFreezeValue(loadable.contents);\n    }\n  }\n\n  function maybeFreezeValue(val) {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (Boolean(options.dangerouslyAllowMutability) === false) {\n        Recoil_deepFreezeValue(val);\n      }\n    }\n  }\n\n  function setCache(state, cacheRoute, loadable) {\n    state.atomValues.set(key, loadable);\n    cache.set(cacheRoute, loadable);\n  }\n\n  function detectCircularDependencies(fn) {\n    if (dependencyStack.includes(key)) {\n      const message = `Recoil selector has circular dependencies: ${dependencyStack.slice(dependencyStack.indexOf(key)).join(' \\u2192 ')}`;\n      return loadableWithError$1(new Error(message));\n    }\n\n    dependencyStack.push(key);\n\n    try {\n      return fn();\n    } finally {\n      dependencyStack.pop();\n    }\n  }\n\n  function selectorPeek(store, state) {\n    const cacheVal = cache.get(nodeKey => {\n      !(typeof nodeKey === 'string') ? process.env.NODE_ENV !== \"production\" ? Recoil_invariant(false, 'Cache nodeKey is type string') : Recoil_invariant(false) : void 0;\n      const peek = peekNodeLoadable$1(store, state, nodeKey);\n      return peek === null || peek === void 0 ? void 0 : peek.contents;\n    });\n    return cacheVal;\n  }\n\n  function selectorGet(store, state) {\n    return detectCircularDependencies(() => getSelectorValAndUpdatedDeps(store, state));\n  }\n\n  function invalidateSelector(state) {\n    state.atomValues.delete(key);\n  }\n\n  if (set != null) {\n    /**\n     * ES5 strict mode prohibits defining non-top-level function declarations,\n     * so don't use function declaration syntax here\n     */\n    const selectorSet = (store, state, newValue) => {\n      let syncSelectorSetFinished = false;\n      const writes = new Map();\n\n      function getRecoilValue({\n        key\n      }) {\n        if (syncSelectorSetFinished) {\n          throw new Error('Recoil: Async selector sets are not currently supported.');\n        }\n\n        const loadable = getCachedNodeLoadable(store, state, key);\n        maybeFreezeLoadableContents(loadable);\n\n        if (loadable.state === 'hasValue') {\n          return loadable.contents;\n        } else if (loadable.state === 'loading') {\n          throw new RecoilValueNotReady$2(key);\n        } else {\n          throw loadable.contents;\n        }\n      }\n\n      function setRecoilState(recoilState, valueOrUpdater) {\n        if (syncSelectorSetFinished) {\n          throw new Error('Recoil: Async selector sets are not currently supported.');\n        }\n\n        const newValue = typeof valueOrUpdater === 'function' ? // cast to any because we can't restrict type S from being a function itself without losing support for opaque types\n        // flowlint-next-line unclear-type:off\n        valueOrUpdater(getRecoilValue(recoilState)) : valueOrUpdater;\n        const upstreamWrites = setNodeValue$3(store, state, recoilState.key, newValue);\n        upstreamWrites.forEach((v, k) => writes.set(k, v));\n      }\n\n      function resetRecoilState(recoilState) {\n        setRecoilState(recoilState, DEFAULT_VALUE$4);\n      }\n\n      const ret = set({\n        set: setRecoilState,\n        get: getRecoilValue,\n        reset: resetRecoilState\n      }, newValue); // set should be a void method, but if the user makes it `async`, then it\n      // will return a Promise, which we don't currently support.\n\n      if (ret !== undefined) {\n        throw Recoil_isPromise(ret) ? new Error('Recoil: Async selector sets are not currently supported.') : new Error('Recoil: selector set should be a void function.');\n      }\n\n      syncSelectorSetFinished = true;\n      return writes;\n    };\n\n    return registerNode$1({\n      key,\n      nodeType: 'selector',\n      peek: selectorPeek,\n      get: selectorGet,\n      set: selectorSet,\n      init: selectorInit,\n      invalidate: invalidateSelector,\n      shouldDeleteConfigOnRelease: selectorShouldDeleteConfigOnRelease,\n      dangerouslyAllowMutability: options.dangerouslyAllowMutability,\n      shouldRestoreFromSnapshots: false,\n      retainedBy\n    });\n  } else {\n    return registerNode$1({\n      key,\n      nodeType: 'selector',\n      peek: selectorPeek,\n      get: selectorGet,\n      init: selectorInit,\n      invalidate: invalidateSelector,\n      shouldDeleteConfigOnRelease: selectorShouldDeleteConfigOnRelease,\n      dangerouslyAllowMutability: options.dangerouslyAllowMutability,\n      shouldRestoreFromSnapshots: false,\n      retainedBy\n    });\n  }\n}\n/* eslint-enable no-redeclare */\n\n\nvar Recoil_selector = selector;\n\n// @fb-only: const {scopedAtom} = require('Recoil_ScopedAtom');\nconst {\n  loadableWithError: loadableWithError$2,\n  loadableWithPromise: loadableWithPromise$2,\n  loadableWithValue: loadableWithValue$3\n} = Recoil_Loadable;\n\nconst {\n  DEFAULT_VALUE: DEFAULT_VALUE$5,\n  DefaultValue: DefaultValue$2,\n  getConfigDeletionHandler: getConfigDeletionHandler$2,\n  registerNode: registerNode$2,\n  setConfigDeletionHandler: setConfigDeletionHandler$1\n} = Recoil_Node;\n\nconst {\n  isRecoilValue: isRecoilValue$4\n} = Recoil_RecoilValue$1;\n\nconst {\n  markRecoilValueModified: markRecoilValueModified$1,\n  setRecoilValue: setRecoilValue$3,\n  setRecoilValueLoadable: setRecoilValueLoadable$3\n} = Recoil_RecoilValueInterface;\n\nconst {\n  retainedByOptionWithDefault: retainedByOptionWithDefault$2\n} = Recoil_Retention;\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction baseAtom(options) {\n  const {\n    key,\n    persistence_UNSTABLE: persistence\n  } = options;\n  const retainedBy = retainedByOptionWithDefault$2(options.retainedBy_UNSTABLE);\n  let liveStoresCount = 0;\n  let defaultLoadable = Recoil_isPromise(options.default) ? loadableWithPromise$2(options.default.then(value => {\n    defaultLoadable = loadableWithValue$3(value); // TODO Temporary disable Flow due to pending selector_NEW refactor\n\n    const promiseInfo = {\n      __key: key,\n      __value: value\n    };\n    return promiseInfo;\n  }).catch(error => {\n    defaultLoadable = loadableWithError$2(error);\n    throw error;\n  })) : loadableWithValue$3(options.default);\n  let cachedAnswerForUnvalidatedValue = undefined; // Cleanup handlers for this atom\n  // Rely on stable reference equality of the store to use it as a key per <RecoilRoot>\n\n  const cleanupEffectsByStore = new Map();\n\n  function wrapPendingPromise(store, promise) {\n    const wrappedPromise = promise.then(value => {\n      var _store$getState$nextT, _state$atomValues$get;\n\n      const state = (_store$getState$nextT = store.getState().nextTree) !== null && _store$getState$nextT !== void 0 ? _store$getState$nextT : store.getState().currentTree;\n\n      if (((_state$atomValues$get = state.atomValues.get(key)) === null || _state$atomValues$get === void 0 ? void 0 : _state$atomValues$get.contents) === wrappedPromise) {\n        setRecoilValue$3(store, node, value);\n      }\n\n      return {\n        __key: key,\n        __value: value\n      };\n    }).catch(error => {\n      var _store$getState$nextT2, _state$atomValues$get2;\n\n      const state = (_store$getState$nextT2 = store.getState().nextTree) !== null && _store$getState$nextT2 !== void 0 ? _store$getState$nextT2 : store.getState().currentTree;\n\n      if (((_state$atomValues$get2 = state.atomValues.get(key)) === null || _state$atomValues$get2 === void 0 ? void 0 : _state$atomValues$get2.contents) === wrappedPromise) {\n        setRecoilValueLoadable$3(store, node, loadableWithError$2(error));\n      }\n\n      throw error;\n    });\n    return wrappedPromise;\n  }\n\n  function initAtom(store, initState, trigger) {\n    liveStoresCount++;\n    const alreadyKnown = store.getState().knownAtoms.has(key);\n    store.getState().knownAtoms.add(key); // Setup async defaults to notify subscribers when they resolve\n\n    if (defaultLoadable.state === 'loading') {\n      const notifyDefaultSubscribers = () => {\n        var _store$getState$nextT3;\n\n        const state = (_store$getState$nextT3 = store.getState().nextTree) !== null && _store$getState$nextT3 !== void 0 ? _store$getState$nextT3 : store.getState().currentTree;\n\n        if (!state.atomValues.has(key)) {\n          markRecoilValueModified$1(store, node);\n        }\n      };\n\n      defaultLoadable.contents.then(notifyDefaultSubscribers).catch(notifyDefaultSubscribers);\n    } // Run Atom Effects\n    // This state is scoped by Store, since this is in the initAtom() closure\n\n\n    let initValue = DEFAULT_VALUE$5;\n    let pendingSetSelf = null;\n\n    if (options.effects_UNSTABLE != null && !alreadyKnown) {\n      let duringInit = true;\n\n      const setSelf = effect => valueOrUpdater => {\n        if (duringInit) {\n          const currentValue = initValue instanceof DefaultValue$2 || Recoil_isPromise(initValue) ? defaultLoadable.state === 'hasValue' ? defaultLoadable.contents : DEFAULT_VALUE$5 : initValue;\n          initValue = typeof valueOrUpdater === 'function' ? // cast to any because we can't restrict T from being a function without losing support for opaque types\n          valueOrUpdater(currentValue) // flowlint-line unclear-type:off\n          : valueOrUpdater; // Avoid calling onSet() when setSelf() initializes with a Promise\n\n          if (Recoil_isPromise(initValue)) {\n            initValue = initValue.then(value => {\n              pendingSetSelf = {\n                effect,\n                value\n              };\n              return value;\n            });\n          }\n        } else {\n          if (Recoil_isPromise(valueOrUpdater)) {\n            throw new Error('Setting atoms to async values is not implemented.');\n          }\n\n          if (typeof valueOrUpdater !== 'function') {\n            pendingSetSelf = {\n              effect,\n              value: valueOrUpdater\n            };\n          }\n\n          setRecoilValue$3(store, node, typeof valueOrUpdater === 'function' ? currentValue => {\n            const newValue = // cast to any because we can't restrict T from being a function without losing support for opaque types\n            valueOrUpdater(currentValue); // flowlint-line unclear-type:off\n\n            pendingSetSelf = {\n              effect,\n              value: newValue\n            };\n            return newValue;\n          } : valueOrUpdater);\n        }\n      };\n\n      const resetSelf = effect => () => setSelf(effect)(DEFAULT_VALUE$5);\n\n      const onSet = effect => handler => {\n        store.subscribeToTransactions(currentStore => {\n          var _currentTree$atomValu;\n\n          // eslint-disable-next-line prefer-const\n          let {\n            currentTree,\n            previousTree\n          } = currentStore.getState();\n\n          if (!previousTree) {\n            Recoil_recoverableViolation('Transaction subscribers notified without a next tree being present -- this is a bug in Recoil');\n            previousTree = currentTree; // attempt to trundle on\n          }\n\n          const newLoadable = (_currentTree$atomValu = currentTree.atomValues.get(key)) !== null && _currentTree$atomValu !== void 0 ? _currentTree$atomValu : defaultLoadable;\n\n          if (newLoadable.state === 'hasValue') {\n            var _previousTree$atomVal, _pendingSetSelf, _pendingSetSelf2, _pendingSetSelf3;\n\n            const newValue = newLoadable.contents;\n            const oldLoadable = (_previousTree$atomVal = previousTree.atomValues.get(key)) !== null && _previousTree$atomVal !== void 0 ? _previousTree$atomVal : defaultLoadable;\n            const oldValue = oldLoadable.state === 'hasValue' ? oldLoadable.contents : DEFAULT_VALUE$5; // TODO This isn't actually valid, use as a placeholder for now.\n            // Ignore atom value changes that were set via setSelf() in the same effect.\n            // We will still properly call the handler if there was a subsequent\n            // set from something other than an atom effect which was batched\n            // with the `setSelf()` call.  However, we may incorrectly ignore\n            // the handler if the subsequent batched call happens to set the\n            // atom to the exact same value as the `setSelf()`.   But, in that\n            // case, it was kind of a noop, so the semantics are debatable..\n\n            if (((_pendingSetSelf = pendingSetSelf) === null || _pendingSetSelf === void 0 ? void 0 : _pendingSetSelf.effect) !== effect || ((_pendingSetSelf2 = pendingSetSelf) === null || _pendingSetSelf2 === void 0 ? void 0 : _pendingSetSelf2.value) !== newValue) {\n              handler(newValue, oldValue);\n            } else if (((_pendingSetSelf3 = pendingSetSelf) === null || _pendingSetSelf3 === void 0 ? void 0 : _pendingSetSelf3.effect) === effect) {\n              pendingSetSelf = null;\n            }\n          }\n        }, key);\n      };\n\n      for (const effect of (_options$effects_UNST = options.effects_UNSTABLE) !== null && _options$effects_UNST !== void 0 ? _options$effects_UNST : []) {\n        var _options$effects_UNST;\n\n        const cleanup = effect({\n          node,\n          trigger,\n          setSelf: setSelf(effect),\n          resetSelf: resetSelf(effect),\n          onSet: onSet(effect)\n        });\n\n        if (cleanup != null) {\n          var _cleanupEffectsByStor;\n\n          cleanupEffectsByStore.set(store, [...((_cleanupEffectsByStor = cleanupEffectsByStore.get(store)) !== null && _cleanupEffectsByStor !== void 0 ? _cleanupEffectsByStor : []), cleanup]);\n        }\n      }\n\n      duringInit = false;\n    } // Mutate initial state in place since we know there are no other subscribers\n    // since we are the ones initializing on first use.\n\n\n    if (!(initValue instanceof DefaultValue$2)) {\n      var _store$getState$nextT4;\n\n      const initLoadable = Recoil_isPromise(initValue) ? loadableWithPromise$2(wrapPendingPromise(store, initValue)) : loadableWithValue$3(initValue);\n      initState.atomValues.set(key, initLoadable); // If there is a pending transaction, then also mutate the next state tree.\n      // This could happen if the atom was first initialized in an action that\n      // also updated some other atom's state.\n\n      (_store$getState$nextT4 = store.getState().nextTree) === null || _store$getState$nextT4 === void 0 ? void 0 : _store$getState$nextT4.atomValues.set(key, initLoadable);\n    }\n\n    return () => {\n      var _cleanupEffectsByStor2;\n\n      liveStoresCount--;\n      (_cleanupEffectsByStor2 = cleanupEffectsByStore.get(store)) === null || _cleanupEffectsByStor2 === void 0 ? void 0 : _cleanupEffectsByStor2.forEach(cleanup => cleanup());\n      cleanupEffectsByStore.delete(store);\n      store.getState().knownAtoms.delete(key); // FIXME remove knownAtoms?\n    };\n  }\n\n  function peekAtom(_store, state) {\n    var _ref, _state$atomValues$get3, _cachedAnswerForUnval;\n\n    return (_ref = (_state$atomValues$get3 = state.atomValues.get(key)) !== null && _state$atomValues$get3 !== void 0 ? _state$atomValues$get3 : (_cachedAnswerForUnval = cachedAnswerForUnvalidatedValue) === null || _cachedAnswerForUnval === void 0 ? void 0 : _cachedAnswerForUnval[1]) !== null && _ref !== void 0 ? _ref : defaultLoadable;\n  }\n\n  function getAtom(_store, state) {\n    if (state.atomValues.has(key)) {\n      // Atom value is stored in state:\n      return Recoil_nullthrows(state.atomValues.get(key));\n    } else if (state.nonvalidatedAtoms.has(key)) {\n      // Atom value is stored but needs validation before use.\n      // We might have already validated it and have a cached validated value:\n      if (cachedAnswerForUnvalidatedValue != null) {\n        return cachedAnswerForUnvalidatedValue;\n      }\n\n      if (persistence == null) {\n        Recoil_expectationViolation(`Tried to restore a persisted value for atom ${key} but it has no persistence settings.`);\n        return defaultLoadable;\n      }\n\n      const nonvalidatedValue = state.nonvalidatedAtoms.get(key);\n      const validatorResult = persistence.validator(nonvalidatedValue, DEFAULT_VALUE$5);\n      const validatedValueLoadable = validatorResult instanceof DefaultValue$2 ? defaultLoadable : loadableWithValue$3(validatorResult);\n      cachedAnswerForUnvalidatedValue = validatedValueLoadable;\n      return cachedAnswerForUnvalidatedValue;\n    } else {\n      return defaultLoadable;\n    }\n  }\n\n  function invalidateAtom() {\n    cachedAnswerForUnvalidatedValue = undefined;\n  }\n\n  function setAtom(_store, state, newValue) {\n    // Bail out if we're being set to the existing value, or if we're being\n    // reset but have no stored value (validated or unvalidated) to reset from:\n    if (state.atomValues.has(key)) {\n      const existing = Recoil_nullthrows(state.atomValues.get(key));\n\n      if (existing.state === 'hasValue' && newValue === existing.contents) {\n        return new Map();\n      }\n    } else if (!state.nonvalidatedAtoms.has(key) && newValue instanceof DefaultValue$2) {\n      return new Map();\n    }\n\n    if (process.env.NODE_ENV !== \"production\") {\n      if (options.dangerouslyAllowMutability !== true) {\n        Recoil_deepFreezeValue(newValue);\n      }\n    }\n\n    cachedAnswerForUnvalidatedValue = undefined; // can be released now if it was previously in use\n\n    return new Map().set(key, loadableWithValue$3(newValue));\n  }\n\n  function shouldDeleteConfigOnReleaseAtom() {\n    return getConfigDeletionHandler$2(key) !== undefined && liveStoresCount <= 0;\n  }\n\n  const node = registerNode$2({\n    key,\n    nodeType: 'atom',\n    peek: peekAtom,\n    get: getAtom,\n    set: setAtom,\n    init: initAtom,\n    invalidate: invalidateAtom,\n    shouldDeleteConfigOnRelease: shouldDeleteConfigOnReleaseAtom,\n    dangerouslyAllowMutability: options.dangerouslyAllowMutability,\n    persistence_UNSTABLE: options.persistence_UNSTABLE ? {\n      type: options.persistence_UNSTABLE.type,\n      backButton: options.persistence_UNSTABLE.backButton\n    } : undefined,\n    shouldRestoreFromSnapshots: true,\n    retainedBy\n  });\n  return node;\n} // prettier-ignore\n\n\nfunction atom(options) {\n  const {\n    default: optionsDefault,\n    // @fb-only: scopeRules_APPEND_ONLY_READ_THE_DOCS,\n    ...restOptions\n  } = options;\n\n  if (isRecoilValue$4(optionsDefault) // Continue to use atomWithFallback for promise defaults for scoped atoms\n  // for now, since scoped atoms don't support async defaults\n  // @fb-only: || (isPromise(optionsDefault) && scopeRules_APPEND_ONLY_READ_THE_DOCS)\n  ) {\n      return atomWithFallback({ ...restOptions,\n        default: optionsDefault // @fb-only: scopeRules_APPEND_ONLY_READ_THE_DOCS,\n\n      }); // @fb-only: } else if (scopeRules_APPEND_ONLY_READ_THE_DOCS && !isPromise(optionsDefault)) {\n      // @fb-only: return scopedAtom<T>({\n      // @fb-only: ...restOptions,\n      // @fb-only: default: optionsDefault,\n      // @fb-only: scopeRules_APPEND_ONLY_READ_THE_DOCS,\n      // @fb-only: });\n    } else {\n    return baseAtom({ ...restOptions,\n      default: optionsDefault\n    });\n  }\n}\n\nfunction atomWithFallback(options) {\n  const base = atom({ ...options,\n    default: DEFAULT_VALUE$5,\n    persistence_UNSTABLE: options.persistence_UNSTABLE === undefined ? undefined : { ...options.persistence_UNSTABLE,\n      validator: storedValue => storedValue instanceof DefaultValue$2 ? storedValue : Recoil_nullthrows(options.persistence_UNSTABLE).validator(storedValue, DEFAULT_VALUE$5)\n    },\n    // TODO Hack for now.\n    // flowlint-next-line unclear-type: off\n    effects_UNSTABLE: options.effects_UNSTABLE\n  });\n  const sel = Recoil_selector({\n    key: `${options.key}__withFallback`,\n    get: ({\n      get\n    }) => {\n      const baseValue = get(base);\n      return baseValue instanceof DefaultValue$2 ? options.default : baseValue;\n    },\n    set: ({\n      set\n    }, newValue) => set(base, newValue),\n    dangerouslyAllowMutability: options.dangerouslyAllowMutability\n  });\n  setConfigDeletionHandler$1(sel.key, getConfigDeletionHandler$2(options.key));\n  return sel;\n}\n\nvar Recoil_atom = atom;\n\n/**\n * (c) Facebook, Inc. and its affiliates. Confidential and proprietary.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nclass MapCache {\n  constructor(options) {\n    var _options$mapKey;\n\n    _defineProperty(this, \"_map\", void 0);\n\n    _defineProperty(this, \"_keyMapper\", void 0);\n\n    this._map = new Map();\n    this._keyMapper = (_options$mapKey = options === null || options === void 0 ? void 0 : options.mapKey) !== null && _options$mapKey !== void 0 ? _options$mapKey : v => v;\n  }\n\n  size() {\n    return this._map.size;\n  }\n\n  has(key) {\n    return this._map.has(this._keyMapper(key));\n  }\n\n  get(key) {\n    return this._map.get(this._keyMapper(key));\n  }\n\n  set(key, val) {\n    this._map.set(this._keyMapper(key), val);\n  }\n\n  delete(key) {\n    this._map.delete(this._keyMapper(key));\n  }\n\n  clear() {\n    this._map.clear();\n  }\n\n}\n\nvar Recoil_MapCache = {\n  MapCache\n};\n\nvar Recoil_MapCache_1 = Recoil_MapCache.MapCache;\n\nvar Recoil_MapCache$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  MapCache: Recoil_MapCache_1\n});\n\nconst {\n  LRUCache: LRUCache$2\n} = Recoil_LRUCache$1;\n\nconst {\n  MapCache: MapCache$1\n} = Recoil_MapCache$1;\n\nconst defaultPolicy$1 = {\n  equality: 'reference',\n  eviction: 'none',\n  maxSize: Infinity\n};\n\nfunction cacheFromPolicy({\n  equality = defaultPolicy$1.equality,\n  eviction = defaultPolicy$1.eviction,\n  maxSize = defaultPolicy$1.maxSize\n} = defaultPolicy$1) {\n  const valueMapper = getValueMapper$1(equality);\n  const cache = getCache(eviction, maxSize, valueMapper);\n  return cache;\n}\n\nfunction getValueMapper$1(equality) {\n  switch (equality) {\n    case 'reference':\n      return val => val;\n\n    case 'value':\n      return val => Recoil_stableStringify(val);\n  }\n\n  throw new Error(`Unrecognized equality policy ${equality}`);\n}\n\nfunction getCache(eviction, maxSize, mapKey) {\n  switch (eviction) {\n    case 'keep-all':\n      // $FlowFixMe[method-unbinding]\n      return new MapCache$1({\n        mapKey\n      });\n\n    case 'lru':\n      // $FlowFixMe[method-unbinding]\n      return new LRUCache$2({\n        mapKey,\n        maxSize: Recoil_nullthrows(maxSize)\n      });\n\n    case 'most-recent':\n      // $FlowFixMe[method-unbinding]\n      return new LRUCache$2({\n        mapKey,\n        maxSize: 1\n      });\n  }\n\n  throw new Error(`Unrecognized eviction policy ${eviction}`);\n}\n\nvar Recoil_cacheFromPolicy = cacheFromPolicy;\n\nconst {\n  setConfigDeletionHandler: setConfigDeletionHandler$2\n} = Recoil_Node;\n/*\nA function which returns an atom based on the input parameter.\n\nEach unique parameter returns a unique atom. E.g.,\n\n  const f = atomFamily(...);\n  f({a: 1}) => an atom\n  f({a: 2}) => a different atom\n\nThis allows components to persist local, private state using atoms.  Each\ninstance of the component may have a different key, which it uses as the\nparameter for a family of atoms; in this way, each component will have\nits own atom not shared by other instances.  These state keys may be composed\ninto children's state keys as well.\n*/\n\n\nfunction atomFamily(options) {\n  var _options$cachePolicyF, _options$cachePolicyF2;\n\n  const atomCache = Recoil_cacheFromPolicy({\n    equality: (_options$cachePolicyF = (_options$cachePolicyF2 = options.cachePolicyForParams_UNSTABLE) === null || _options$cachePolicyF2 === void 0 ? void 0 : _options$cachePolicyF2.equality) !== null && _options$cachePolicyF !== void 0 ? _options$cachePolicyF : 'value',\n    eviction: 'keep-all'\n  }); // Simple atomFamily implementation to cache individual atoms based\n  // on the parameter value equality.\n\n  return params => {\n    var _stableStringify;\n\n    const cachedAtom = atomCache.get(params);\n\n    if (cachedAtom != null) {\n      return cachedAtom;\n    }\n\n    const {\n      cachePolicyForParams_UNSTABLE,\n      ...atomOptions\n    } = options;\n    const newAtom = Recoil_atom({ ...atomOptions,\n      key: `${options.key}__${(_stableStringify = Recoil_stableStringify(params)) !== null && _stableStringify !== void 0 ? _stableStringify : 'void'}`,\n      default: typeof options.default === 'function' ? // The default was parameterized\n      // Flow doesn't know that T isn't a function, so we need to case to any\n      options.default(params) // flowlint-line unclear-type:off\n      : // Default may be a static value, promise, or RecoilValue\n      options.default,\n      retainedBy_UNSTABLE: typeof options.retainedBy_UNSTABLE === 'function' ? options.retainedBy_UNSTABLE(params) : options.retainedBy_UNSTABLE,\n      effects_UNSTABLE: typeof options.effects_UNSTABLE === 'function' ? options.effects_UNSTABLE(params) : options.effects_UNSTABLE // prettier-ignore\n      // @fb-only: scopeRules_APPEND_ONLY_READ_THE_DOCS: mapScopeRules(\n      // @fb-only: options.scopeRules_APPEND_ONLY_READ_THE_DOCS,\n      // @fb-only: params,\n      // @fb-only: ),\n\n    });\n    atomCache.set(params, newAtom);\n    setConfigDeletionHandler$2(newAtom.key, () => {\n      atomCache.delete(params);\n    });\n    return newAtom;\n  };\n}\n\nvar Recoil_atomFamily = atomFamily;\n\nconst {\n  setConfigDeletionHandler: setConfigDeletionHandler$3\n} = Recoil_Node;\n\n\n\n // Keep in mind the parameter needs to be serializable as a cahche key\n// using Recoil_stableStringify\n\n\n// Add a unique index to each selector in case the cache implementation allows\n// duplicate keys based on equivalent stringified parameters\nlet nextIndex = 0;\n/* eslint-disable no-redeclare */\n\n// Return a function that returns members of a family of selectors of the same type\n// E.g.,\n//\n// const s = selectorFamily(...);\n// s({a: 1}) => a selector\n// s({a: 2}) => a different selector\n//\n// By default, the selectors are distinguished by distinct values of the\n// parameter based on value equality, not reference equality.  This allows using\n// object literals or other equivalent objects at callsites to not create\n// duplicate cache entries.  This behavior may be overridden with the\n// cacheImplementationForParams option.\nfunction selectorFamily(options) {\n  var _options$cachePolicyF, _options$cachePolicyF2;\n\n  const selectorCache = Recoil_cacheFromPolicy({\n    equality: (_options$cachePolicyF = (_options$cachePolicyF2 = options.cachePolicyForParams_UNSTABLE) === null || _options$cachePolicyF2 === void 0 ? void 0 : _options$cachePolicyF2.equality) !== null && _options$cachePolicyF !== void 0 ? _options$cachePolicyF : 'value',\n    eviction: 'keep-all'\n  });\n  return params => {\n    var _stableStringify;\n\n    const cachedSelector = selectorCache.get(params);\n\n    if (cachedSelector != null) {\n      return cachedSelector;\n    }\n\n    const myKey = `${options.key}__selectorFamily/${(_stableStringify = Recoil_stableStringify(params, {\n      // It is possible to use functions in parameters if the user uses\n      // a cache with reference equality thanks to the incrementing index.\n      allowFunctions: true\n    })) !== null && _stableStringify !== void 0 ? _stableStringify : 'void'}/${nextIndex++}`; // Append index in case values serialize to the same key string\n\n    const myGet = callbacks => options.get(params)(callbacks);\n\n    const myCachePolicy = options.cachePolicy_UNSTABLE;\n    const retainedBy = typeof options.retainedBy_UNSTABLE === 'function' ? options.retainedBy_UNSTABLE(params) : options.retainedBy_UNSTABLE;\n    let newSelector;\n\n    if (options.set != null) {\n      const set = options.set;\n\n      const mySet = (callbacks, newValue) => set(params)(callbacks, newValue);\n\n      newSelector = Recoil_selector({\n        key: myKey,\n        get: myGet,\n        set: mySet,\n        cachePolicy_UNSTABLE: myCachePolicy,\n        dangerouslyAllowMutability: options.dangerouslyAllowMutability,\n        retainedBy_UNSTABLE: retainedBy\n      });\n    } else {\n      newSelector = Recoil_selector({\n        key: myKey,\n        get: myGet,\n        cachePolicy_UNSTABLE: myCachePolicy,\n        dangerouslyAllowMutability: options.dangerouslyAllowMutability,\n        retainedBy_UNSTABLE: retainedBy\n      });\n    }\n\n    selectorCache.set(params, newSelector);\n    setConfigDeletionHandler$3(newSelector.key, () => {\n      selectorCache.delete(params);\n    });\n    return newSelector;\n  };\n}\n/* eslint-enable no-redeclare */\n\n\nvar Recoil_selectorFamily = selectorFamily;\n\n// flowlint-next-line unclear-type:off\n\n\nconst constantSelector = Recoil_selectorFamily({\n  key: '__constant',\n  get: constant => () => constant,\n  cachePolicyForParams_UNSTABLE: {\n    equality: 'reference'\n  }\n}); // Function that returns a selector which always produces the\n// same constant value.  It may be called multiple times with the\n// same value, based on reference equality, and will provide the\n// same selector.\n\nfunction constSelector(constant) {\n  return constantSelector(constant);\n}\n\nvar Recoil_constSelector = constSelector;\n\n// flowlint-next-line unclear-type:off\n\n\nconst throwingSelector = Recoil_selectorFamily({\n  key: '__error',\n  get: message => () => {\n    throw new Error(message);\n  },\n  cachePolicyForParams_UNSTABLE: {\n    equality: 'reference'\n  }\n}); // Function that returns a selector which always throws an error\n// with the provided message.\n\nfunction errorSelector(message) {\n  return throwingSelector(message);\n}\n\nvar Recoil_errorSelector = errorSelector;\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Wraps another recoil value and prevents writing to it.\n *\n * @emails oncall+recoil\n * \n * @format\n */\n\nfunction readOnlySelector(atom) {\n  // flowlint-next-line unclear-type: off\n  return atom;\n}\n\nvar Recoil_readOnlySelector = readOnlySelector;\n\nconst {\n  loadableWithError: loadableWithError$3,\n  loadableWithPromise: loadableWithPromise$3,\n  loadableWithValue: loadableWithValue$4\n} = Recoil_Loadable;\n\n\n\n /////////////////\n//  TRUTH TABLE\n/////////////////\n// Dependencies        waitForNone         waitForAny        waitForAll       waitForAllSettled\n//  [loading, loading]  [Promise, Promise]  Promise           Promise         Promise\n//  [value, loading]    [value, Promise]    [value, Promise]  Promise         Promise\n//  [value, value]      [value, value]      [value, value]    [value, value]  [value, value]\n//\n//  [error, loading]    [Error, Promise]    [Error, Promise]  Error           Promise\n//  [error, error]      [Error, Error]      [Error, Error]    Error           [error, error]\n//  [value, error]      [value, Error]      [value, Error]    Error           [value, error]\n// Issue parallel requests for all dependencies and return the current\n// status if they have results, have some error, or are still pending.\n\n\nfunction concurrentRequests(getRecoilValue, deps) {\n  const results = Array(deps.length).fill(undefined);\n  const exceptions = Array(deps.length).fill(undefined);\n\n  for (const [i, dep] of deps.entries()) {\n    try {\n      results[i] = getRecoilValue(dep);\n    } catch (e) {\n      // exceptions can either be Promises of pending results or real errors\n      exceptions[i] = e;\n    }\n  }\n\n  return [results, exceptions];\n}\n\nfunction isError(exp) {\n  return exp != null && !Recoil_isPromise(exp);\n}\n\nfunction unwrapDependencies(dependencies) {\n  return Array.isArray(dependencies) ? dependencies : Object.getOwnPropertyNames(dependencies).map(key => dependencies[key]);\n}\n\nfunction getValueFromLoadablePromiseResult(result) {\n  if (result != null && typeof result === 'object' && result.hasOwnProperty('__value')) {\n    return result.__value;\n  }\n\n  return result;\n}\n\nfunction wrapResults(dependencies, results) {\n  return Array.isArray(dependencies) ? results : // Object.getOwnPropertyNames() has consistent key ordering with ES6\n  Object.getOwnPropertyNames(dependencies).reduce((out, key, idx) => ({ ...out,\n    [key]: results[idx]\n  }), {});\n}\n\nfunction wrapLoadables(dependencies, results, exceptions) {\n  const output = exceptions.map((exception, idx) => exception == null ? loadableWithValue$4(results[idx]) : Recoil_isPromise(exception) ? loadableWithPromise$3(exception) : loadableWithError$3(exception));\n  return wrapResults(dependencies, output);\n}\n\nfunction combineAsyncResultsWithSyncResults(syncResults, asyncResults) {\n  return asyncResults.map((result, idx) =>\n  /**\n   * it's important we use === undefined as opposed to == null, because the\n   * resolved value of the async promise could be `null`, in which case we\n   * don't want to use syncResults[idx], which would be undefined. If async\n   * promise resolves to `undefined`, that's ok because `syncResults[idx]`\n   * will also be `undefined`. That's a little hacky, but it works.\n   */\n  result === undefined ? syncResults[idx] : result);\n} // Selector that requests all dependencies in parallel and immediately returns\n// current results without waiting.\n\n\nconst waitForNone = Recoil_selectorFamily({\n  key: '__waitForNone',\n  get: dependencies => ({\n    get\n  }) => {\n    // Issue requests for all dependencies in parallel.\n    const deps = unwrapDependencies(dependencies);\n    const [results, exceptions] = concurrentRequests(get, deps); // Always return the current status of the results; never block.\n\n    return wrapLoadables(dependencies, results, exceptions);\n  },\n  dangerouslyAllowMutability: true\n}); // Selector that requests all dependencies in parallel and waits for at least\n// one to be available before returning results.  It will only error if all\n// dependencies have errors.\n\nconst waitForAny = Recoil_selectorFamily({\n  key: '__waitForAny',\n  get: dependencies => ({\n    get\n  }) => {\n    // Issue requests for all dependencies in parallel.\n    // Exceptions can either be Promises of pending results or real errors\n    const deps = unwrapDependencies(dependencies);\n    const [results, exceptions] = concurrentRequests(get, deps); // If any results are available, value or error, return the current status\n\n    if (exceptions.some(exp => !Recoil_isPromise(exp))) {\n      return wrapLoadables(dependencies, results, exceptions);\n    } // Otherwise, return a promise that will resolve when the next result is\n    // available, whichever one happens to be next.  But, if all pending\n    // dependencies end up with errors, then reject the promise.\n\n\n    return new Promise(resolve => {\n      for (const [i, exp] of exceptions.entries()) {\n        if (Recoil_isPromise(exp)) {\n          exp.then(result => {\n            results[i] = getValueFromLoadablePromiseResult(result);\n            exceptions[i] = undefined;\n            resolve(wrapLoadables(dependencies, results, exceptions));\n          }).catch(error => {\n            exceptions[i] = error;\n            resolve(wrapLoadables(dependencies, results, exceptions));\n          });\n        }\n      }\n    });\n  },\n  dangerouslyAllowMutability: true\n}); // Selector that requests all dependencies in parallel and waits for all to be\n// available before returning a value.  It will error if any dependencies error.\n\nconst waitForAll = Recoil_selectorFamily({\n  key: '__waitForAll',\n  get: dependencies => ({\n    get\n  }) => {\n    // Issue requests for all dependencies in parallel.\n    // Exceptions can either be Promises of pending results or real errors\n    const deps = unwrapDependencies(dependencies);\n    const [results, exceptions] = concurrentRequests(get, deps); // If all results are available, return the results\n\n    if (exceptions.every(exp => exp == null)) {\n      return wrapResults(dependencies, results);\n    } // If we have any errors, throw the first error\n\n\n    const error = exceptions.find(isError);\n\n    if (error != null) {\n      throw error;\n    } // Otherwise, return a promise that will resolve when all results are available\n\n\n    return Promise.all(exceptions).then(exceptionResults => wrapResults(dependencies, combineAsyncResultsWithSyncResults(results, exceptionResults).map(getValueFromLoadablePromiseResult)));\n  },\n  dangerouslyAllowMutability: true\n});\nconst waitForAllSettled = Recoil_selectorFamily({\n  key: '__waitForAllSettled',\n  get: dependencies => ({\n    get\n  }) => {\n    // Issue requests for all dependencies in parallel.\n    // Exceptions can either be Promises of pending results or real errors\n    const deps = unwrapDependencies(dependencies);\n    const [results, exceptions] = concurrentRequests(get, deps); // If all results are available, return the results\n\n    if (exceptions.every(exp => !Recoil_isPromise(exp))) {\n      return wrapLoadables(dependencies, results, exceptions);\n    } // Wait for all results to settle\n\n\n    return Promise.all(exceptions.map((exp, i) => Recoil_isPromise(exp) ? exp.then(result => {\n      results[i] = getValueFromLoadablePromiseResult(result);\n      exceptions[i] = undefined;\n    }).catch(error => {\n      results[i] = undefined;\n      exceptions[i] = error;\n    }) : null)) // Then wrap them as loadables\n    .then(() => wrapLoadables(dependencies, results, exceptions));\n  },\n  dangerouslyAllowMutability: true\n});\nconst noWait = Recoil_selectorFamily({\n  key: '__noWait',\n  get: dependency => ({\n    get\n  }) => {\n    try {\n      return loadableWithValue$4(get(dependency));\n    } catch (exception) {\n      return Recoil_isPromise(exception) ? loadableWithPromise$3(exception) : loadableWithError$3(exception);\n    }\n  },\n  dangerouslyAllowMutability: true\n});\nvar Recoil_WaitFor = {\n  waitForNone,\n  waitForAny,\n  waitForAll,\n  waitForAllSettled,\n  noWait\n};\n\nconst {\n  batchUpdates: batchUpdates$3,\n  setBatcher: setBatcher$1\n} = Recoil_Batching;\n\nconst {\n  DefaultValue: DefaultValue$3\n} = Recoil_Node;\n\nconst {\n  RecoilRoot: RecoilRoot$2\n} = Recoil_RecoilRoot_react;\n\nconst {\n  isRecoilValue: isRecoilValue$5\n} = Recoil_RecoilValue$1;\n\nconst {\n  retentionZone: retentionZone$1\n} = Recoil_RetentionZone;\n\nconst {\n  freshSnapshot: freshSnapshot$2\n} = Recoil_Snapshot$1;\n\nconst {\n  useGotoRecoilSnapshot: useGotoRecoilSnapshot$1,\n  useRecoilCallback: useRecoilCallback$1,\n  useRecoilSnapshot: useRecoilSnapshot$1,\n  useRecoilState: useRecoilState$1,\n  useRecoilStateLoadable: useRecoilStateLoadable$1,\n  useRecoilTransaction: useRecoilTransaction$1,\n  useRecoilTransactionObserver: useRecoilTransactionObserver$1,\n  useRecoilValue: useRecoilValue$1,\n  useRecoilValueLoadable: useRecoilValueLoadable$1,\n  useResetRecoilState: useResetRecoilState$1,\n  useRetain: useRetain$1,\n  useSetRecoilState: useSetRecoilState$1,\n  useSetUnvalidatedAtomValues: useSetUnvalidatedAtomValues$1,\n  useTransactionObservation_DEPRECATED: useTransactionObservation_DEPRECATED$1\n} = Recoil_Hooks;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst {\n  noWait: noWait$1,\n  waitForAll: waitForAll$1,\n  waitForAllSettled: waitForAllSettled$1,\n  waitForAny: waitForAny$1,\n  waitForNone: waitForNone$1\n} = Recoil_WaitFor;\n\nvar Recoil_index = {\n  // Types\n  DefaultValue: DefaultValue$3,\n  // Components\n  RecoilRoot: RecoilRoot$2,\n  useRecoilBridgeAcrossReactRoots_UNSTABLE: Recoil_useRecoilBridgeAcrossReactRoots,\n  // RecoilValues\n  atom: Recoil_atom,\n  selector: Recoil_selector,\n  // Other factories\n  retentionZone: retentionZone$1,\n  // Convenience RecoilValues\n  atomFamily: Recoil_atomFamily,\n  selectorFamily: Recoil_selectorFamily,\n  constSelector: Recoil_constSelector,\n  errorSelector: Recoil_errorSelector,\n  readOnlySelector: Recoil_readOnlySelector,\n  // Hooks that accept RecoilValues\n  useRecoilValue: useRecoilValue$1,\n  useRecoilValueLoadable: useRecoilValueLoadable$1,\n  useRecoilState: useRecoilState$1,\n  useRecoilStateLoadable: useRecoilStateLoadable$1,\n  useSetRecoilState: useSetRecoilState$1,\n  useResetRecoilState: useResetRecoilState$1,\n  useGetRecoilValueInfo_UNSTABLE: Recoil_useGetRecoilValueInfo,\n  useRetain: useRetain$1,\n  // Hooks for complex operations with RecoilValues\n  useRecoilCallback: useRecoilCallback$1,\n  useRecoilTransaction_UNSTABLE: useRecoilTransaction$1,\n  // Hooks for Snapshots\n  useGotoRecoilSnapshot: useGotoRecoilSnapshot$1,\n  useRecoilSnapshot: useRecoilSnapshot$1,\n  useRecoilTransactionObserver_UNSTABLE: useRecoilTransactionObserver$1,\n  useTransactionObservation_UNSTABLE: useTransactionObservation_DEPRECATED$1,\n  useSetUnvalidatedAtomValues_UNSTABLE: useSetUnvalidatedAtomValues$1,\n  // Concurrency Helpers\n  noWait: noWait$1,\n  waitForNone: waitForNone$1,\n  waitForAny: waitForAny$1,\n  waitForAll: waitForAll$1,\n  waitForAllSettled: waitForAllSettled$1,\n  // Other functions\n  isRecoilValue: isRecoilValue$5,\n  // Batching\n  batchUpdates: batchUpdates$3,\n  setBatcher: setBatcher$1,\n  // Snapshot Utils\n  snapshot_UNSTABLE: freshSnapshot$2\n};\nvar Recoil_index_1 = Recoil_index.DefaultValue;\nvar Recoil_index_2 = Recoil_index.RecoilRoot;\nvar Recoil_index_3 = Recoil_index.useRecoilBridgeAcrossReactRoots_UNSTABLE;\nvar Recoil_index_4 = Recoil_index.atom;\nvar Recoil_index_5 = Recoil_index.selector;\nvar Recoil_index_6 = Recoil_index.retentionZone;\nvar Recoil_index_7 = Recoil_index.atomFamily;\nvar Recoil_index_8 = Recoil_index.selectorFamily;\nvar Recoil_index_9 = Recoil_index.constSelector;\nvar Recoil_index_10 = Recoil_index.errorSelector;\nvar Recoil_index_11 = Recoil_index.readOnlySelector;\nvar Recoil_index_12 = Recoil_index.useRecoilValue;\nvar Recoil_index_13 = Recoil_index.useRecoilValueLoadable;\nvar Recoil_index_14 = Recoil_index.useRecoilState;\nvar Recoil_index_15 = Recoil_index.useRecoilStateLoadable;\nvar Recoil_index_16 = Recoil_index.useSetRecoilState;\nvar Recoil_index_17 = Recoil_index.useResetRecoilState;\nvar Recoil_index_18 = Recoil_index.useGetRecoilValueInfo_UNSTABLE;\nvar Recoil_index_19 = Recoil_index.useRetain;\nvar Recoil_index_20 = Recoil_index.useRecoilCallback;\nvar Recoil_index_21 = Recoil_index.useRecoilTransaction_UNSTABLE;\nvar Recoil_index_22 = Recoil_index.useGotoRecoilSnapshot;\nvar Recoil_index_23 = Recoil_index.useRecoilSnapshot;\nvar Recoil_index_24 = Recoil_index.useRecoilTransactionObserver_UNSTABLE;\nvar Recoil_index_25 = Recoil_index.useTransactionObservation_UNSTABLE;\nvar Recoil_index_26 = Recoil_index.useSetUnvalidatedAtomValues_UNSTABLE;\nvar Recoil_index_27 = Recoil_index.noWait;\nvar Recoil_index_28 = Recoil_index.waitForNone;\nvar Recoil_index_29 = Recoil_index.waitForAny;\nvar Recoil_index_30 = Recoil_index.waitForAll;\nvar Recoil_index_31 = Recoil_index.waitForAllSettled;\nvar Recoil_index_32 = Recoil_index.isRecoilValue;\nvar Recoil_index_33 = Recoil_index.batchUpdates;\nvar Recoil_index_34 = Recoil_index.setBatcher;\nvar Recoil_index_35 = Recoil_index.snapshot_UNSTABLE;\n\nexport default Recoil_index;\nexport { Recoil_index_1 as DefaultValue, Recoil_index_2 as RecoilRoot, Recoil_index_4 as atom, Recoil_index_7 as atomFamily, Recoil_index_33 as batchUpdates, Recoil_index_9 as constSelector, Recoil_index_10 as errorSelector, Recoil_index_32 as isRecoilValue, Recoil_index_27 as noWait, Recoil_index_11 as readOnlySelector, Recoil_index_6 as retentionZone, Recoil_index_5 as selector, Recoil_index_8 as selectorFamily, Recoil_index_34 as setBatcher, Recoil_index_35 as snapshot_UNSTABLE, Recoil_index_18 as useGetRecoilValueInfo_UNSTABLE, Recoil_index_22 as useGotoRecoilSnapshot, Recoil_index_3 as useRecoilBridgeAcrossReactRoots_UNSTABLE, Recoil_index_20 as useRecoilCallback, Recoil_index_23 as useRecoilSnapshot, Recoil_index_14 as useRecoilState, Recoil_index_15 as useRecoilStateLoadable, Recoil_index_24 as useRecoilTransactionObserver_UNSTABLE, Recoil_index_21 as useRecoilTransaction_UNSTABLE, Recoil_index_12 as useRecoilValue, Recoil_index_13 as useRecoilValueLoadable, Recoil_index_17 as useResetRecoilState, Recoil_index_19 as useRetain, Recoil_index_16 as useSetRecoilState, Recoil_index_26 as useSetUnvalidatedAtomValues_UNSTABLE, Recoil_index_25 as useTransactionObservation_UNSTABLE, Recoil_index_30 as waitForAll, Recoil_index_31 as waitForAllSettled, Recoil_index_29 as waitForAny, Recoil_index_28 as waitForNone };\n"]},"metadata":{},"sourceType":"module"}