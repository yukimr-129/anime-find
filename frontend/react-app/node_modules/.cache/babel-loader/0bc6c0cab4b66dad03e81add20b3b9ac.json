{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/react-app/src/components/organisms/AnimeCardList.tsx\",\n    _s = $RefreshSig$();\n\nimport { memo, useCallback, useRef } from \"react\";\nimport { Box, Center, Flex, Text, Wrap, WrapItem } from \"@chakra-ui/react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport { useCourFactory } from \"../../customHooks/useCourFactory\";\nimport { Year } from \"../../store/Year\";\nimport AnimeCard from \"../molecules/animeCard/AnimeCard\";\nimport { BeatLoader } from \"react-spinners\";\nimport { HasMore } from \"store/loding/HasMore\";\nimport { useNextAnimes } from \"customHooks/useNextAnimes\";\nimport { LoadPage } from \"store/LoadPage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AnimeCardList = /*#__PURE__*/memo(_c = _s(props => {\n  _s();\n\n  // const { animeLists } = props\n  // const [ isFetching, setIsFetching]  = useState(false);\n  // const [ hasMore, setHasMore ] = useState(true)\n  const year = useRecoilValue(Year);\n  const {\n    select_cour\n  } = useCourFactory();\n  const hasMore = useRecoilValue(HasMore); // const [ apiKeyValue, setApiKeyValue ] = useRecoilState(ApiKeyValue)\n  // const [ animeLists, setAnimeLists ] = useRecoilState(AnimeLists)\n\n  const [loadPage, setLoadPage] = useRecoilState(LoadPage);\n  const {\n    getNextAnimes,\n    animeLists,\n    isLoading\n  } = useNextAnimes(loadPage); // const loadMore = (page: number) => {\n  //     console.log(page);\n  //     console.log(animeLists.length);\n  //     // animeLists.length < 1 && \n  //     getNextAnimes(page)\n  //     // try {\n  //     //     setIsFetching(true);\n  //     //     const filter_season = `${apiKeyValue.year}-${apiKeyValue.cour}`\n  //     //     const getanime = await client.get('/api/annicts/search', {\n  //     //         params: {\n  //     //             filter_season,\n  //     //             page\n  //     //         }\n  //     //     })\n  //     //     const animeDate: AnnictApiType[] = getanime.data.works\n  //     //     console.log(getanime);\n  //     //     if (animeDate.length < 1) {\n  //     //         setHasMore(false);\n  //     //         return;\n  //     //     }\n  //     //     const distinctList = new Set([...animeLists, ...animeDate])\n  //     //     // const rep = Array.from(s)\n  //     //     const list: AnnictApiType[] = [...distinctList]\n  //     //     // console.log(rep);\n  //     //     setAnimeLists([...list])\n  //     //     console.log(animeLists);\n  //     //     console.log(getanime);\n  //     // } catch (error) {\n  //     //     showMessage({title: 'アニメ一覧の取得に失敗しました', status: \"error\"})\n  //     // } finally {\n  //     //     setIsFetching(false);\n  //     // }\n  // }\n  // const [ page, setPage ] = useState(1)\n  // ref対象を監視して表示終わったら、ページ番号を増やす\n\n  const observer = useRef();\n  const lastMovieElementRef = useCallback(node => {\n    if (isLoading) return;\n    observer.current && observer.current.disconnect();\n    observer.current = new IntersectionObserver(entries => {\n      //要素が交差しているかつさらにページを読みこむ場合、ページ番号を増やす\n      if (entries[0].isIntersecting && hasMore) {\n        setLoadPage(prevPage => prevPage + 1);\n      }\n    });\n    node && observer.current.observe(node);\n  }, [hasMore, isLoading]);\n\n  const loder = /*#__PURE__*/_jsxDEV(Center, {\n    children: /*#__PURE__*/_jsxDEV(BeatLoader, {\n      size: 10,\n      color: \"black\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 27\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 19\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      justify: \"center\",\n      align: \"center\",\n      m: \"30px 10px 0\",\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        fontWeight: \"700\",\n        fontSize: \"1.17em\",\n        children: [\"\\u2015 \", year, select_cour, \" \\u2015\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), animeLists ? /*#__PURE__*/_jsxDEV(Flex, {\n      children: [/*#__PURE__*/_jsxDEV(Wrap, {\n        p: {\n          base: 3,\n          md: 4\n        },\n        w: \"100%\",\n        spacing: 5,\n        justify: \"center\",\n        align: \"center\",\n        children: [console.log(animeLists), animeLists.map((animeList, index) => animeLists.length === index + 1 ? /*#__PURE__*/_jsxDEV(WrapItem, {\n          ref: lastMovieElementRef,\n          children: /*#__PURE__*/_jsxDEV(AnimeCard, {\n            animeList: animeList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 37\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 33\n        }, this) : /*#__PURE__*/_jsxDEV(WrapItem, {\n          children: /*#__PURE__*/_jsxDEV(AnimeCard, {\n            animeList: animeList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 37\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 33\n        }, this)), isLoading && /*#__PURE__*/_jsxDEV(Flex, {\n          children: /*#__PURE__*/_jsxDEV(Center, {\n            w: \"100%\",\n            h: \"100%\",\n            children: /*#__PURE__*/_jsxDEV(BeatLoader, {\n              size: 10,\n              color: \"black\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(Flex, {\n        children: /*#__PURE__*/_jsxDEV(Center, {\n          w: \"100%\",\n          h: \"100%\",\n          children: /*#__PURE__*/_jsxDEV(BeatLoader, {\n            size: 10,\n            color: \"black\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 41\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 37\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this) : null]\n  }, void 0, true);\n}, \"milkKtO5p5GdFVLsb0tVb9Jm6ZA=\", false, function () {\n  return [useRecoilValue, useCourFactory, useRecoilValue, useRecoilState, useNextAnimes];\n}));\n_c2 = AnimeCardList;\nexport default AnimeCardList;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AnimeCardList$memo\");\n$RefreshReg$(_c2, \"AnimeCardList\");","map":{"version":3,"sources":["/usr/src/app/react-app/src/components/organisms/AnimeCardList.tsx"],"names":["memo","useCallback","useRef","Box","Center","Flex","Text","Wrap","WrapItem","useRecoilState","useRecoilValue","useCourFactory","Year","AnimeCard","BeatLoader","HasMore","useNextAnimes","LoadPage","AnimeCardList","props","year","select_cour","hasMore","loadPage","setLoadPage","getNextAnimes","animeLists","isLoading","observer","lastMovieElementRef","node","current","disconnect","IntersectionObserver","entries","isIntersecting","prevPage","observe","loder","base","md","console","log","map","animeList","index","length"],"mappings":"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","sourcesContent":["import { memo, useState, useCallback, useRef } from \"react\"\n\nimport { Box, Center, Flex, Text, Wrap, WrapItem } from \"@chakra-ui/react\"\nimport { VFC } from \"react\"\nimport { useRecoilState, useRecoilValue } from \"recoil\"\nimport InfiniteScroll  from \"react-infinite-scroller\"\n\nimport { useCourFactory } from \"../../customHooks/useCourFactory\"\nimport { Year } from \"../../store/Year\"\nimport { AnnictApiType } from \"../../types/api/AnnictApiType\"\nimport AnimeCard from \"../molecules/animeCard/AnimeCard\"\nimport { useAnimeApiSearch } from \"customHooks/useAnimeApiSearch\"\nimport { client } from \"lib/api/client\"\nimport { ApiKeyValue } from \"store/ApiKeyValue\"\nimport { AnimeLists } from \"store/AnimeLists\"\nimport { BeatLoader } from \"react-spinners\"\nimport { HasMore } from \"store/loding/HasMore\"\nimport { useMessage } from \"customHooks/message/useMessage\"\nimport { useNextAnimes } from \"customHooks/useNextAnimes\"\nimport { LoadPage } from \"store/LoadPage\"\n\ntype Props = {\n    animeLists: AnnictApiType[];\n}\n\nconst AnimeCardList: VFC<Props> = memo((props) => {\n    // const { animeLists } = props\n    // const [ isFetching, setIsFetching]  = useState(false);\n    // const [ hasMore, setHasMore ] = useState(true)\n    const year = useRecoilValue(Year)\n    const { select_cour } = useCourFactory()\n    const hasMore = useRecoilValue(HasMore)\n    // const [ apiKeyValue, setApiKeyValue ] = useRecoilState(ApiKeyValue)\n    // const [ animeLists, setAnimeLists ] = useRecoilState(AnimeLists)\n    const [ loadPage, setLoadPage ] = useRecoilState(LoadPage)\n    const { getNextAnimes, animeLists, isLoading } = useNextAnimes(loadPage)\n\n    // const loadMore = (page: number) => {\n    //     console.log(page);\n    //     console.log(animeLists.length);\n    //     // animeLists.length < 1 && \n    //     getNextAnimes(page)\n    //     // try {\n    //     //     setIsFetching(true);\n    //     //     const filter_season = `${apiKeyValue.year}-${apiKeyValue.cour}`\n    //     //     const getanime = await client.get('/api/annicts/search', {\n    //     //         params: {\n    //     //             filter_season,\n    //     //             page\n    //     //         }\n    //     //     })\n    //     //     const animeDate: AnnictApiType[] = getanime.data.works\n    //     //     console.log(getanime);\n            \n    //     //     if (animeDate.length < 1) {\n    //     //         setHasMore(false);\n    //     //         return;\n    //     //     }\n    //     //     const distinctList = new Set([...animeLists, ...animeDate])\n    //     //     // const rep = Array.from(s)\n    //     //     const list: AnnictApiType[] = [...distinctList]\n            \n    //     //     // console.log(rep);\n            \n    //     //     setAnimeLists([...list])\n    //     //     console.log(animeLists);\n    //     //     console.log(getanime);\n    //     // } catch (error) {\n    //     //     showMessage({title: 'アニメ一覧の取得に失敗しました', status: \"error\"})\n    //     // } finally {\n    //     //     setIsFetching(false);\n    //     // }\n        \n    // }\n\n\n    // const [ page, setPage ] = useState(1)\n\n    // ref対象を監視して表示終わったら、ページ番号を増やす\n    const observer: any = useRef()\n    const lastMovieElementRef = useCallback((node) => {\n        if (isLoading) return\n        observer.current && observer.current.disconnect()\n\n        observer.current = new IntersectionObserver((entries) => {\n            //要素が交差しているかつさらにページを読みこむ場合、ページ番号を増やす\n            if(entries[0].isIntersecting && hasMore){\n                setLoadPage((prevPage) => prevPage + 1)\n            }\n        })\n\n        node && observer.current.observe(node)\n\n    }, [hasMore, isLoading])\n\n    const loder = <Center><BeatLoader size={10} color=\"black\" /></Center>\n\n    \n    return (\n        <>\n            <Box justify='center' align='center' m='30px 10px 0'>\n                <Text fontWeight='700' fontSize='1.17em'>\n                    ― {year}{select_cour} ―\n                </Text>\n            </Box>\n            {/* simpleGridに変更⇩ */}\n            {animeLists ? \n            <Flex>\n                <Wrap p={{base: 3, md: 4}} w='100%' spacing={5} justify='center' align='center'>\n                    {/* <InfiniteScroll loadMore={loadMore} hasMore={!isFetching && hasMore} pageStart={0} loader={loder}> */}\n                        {console.log(animeLists)}\n                        {animeLists.map((animeList, index) => (\n                            animeLists.length === index + 1 ? (\n                                <WrapItem key={index} ref={lastMovieElementRef}>\n                                    <AnimeCard animeList={animeList}/>\n                                </WrapItem>\n                            ) : (\n                                <WrapItem key={index}>\n                                    <AnimeCard animeList={animeList}/>\n                                </WrapItem>\n                            )\n                            ))}\n                        {isLoading && \n                                <Flex>\n                                    <Center w='100%' h='100%'>\n                                        <BeatLoader size={10} color=\"black\" />\n                                    </Center>\n\n                                </Flex>\n                        }\n                    {/* </InfiniteScroll> */}\n                </Wrap>\n                {isLoading && \n                                <Flex>\n                                    <Center w='100%' h='100%'>\n                                        <BeatLoader size={10} color=\"black\" />\n                                    </Center>\n\n                                </Flex>\n                        }\n                </Flex>\n                : null }\n        </>\n    )\n})\n\nexport default AnimeCardList"]},"metadata":{},"sourceType":"module"}