{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback, useEffect } from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport { client } from \"lib/api/client\";\nimport { AnimeLists } from \"store/AnimeLists\";\nimport { ApiKeyValue } from \"store/ApiKeyValue\";\nimport { HasMore } from \"store/loding/HasMore\";\nimport { useMessage } from \"./message/useMessage\";\nimport { LoadPage } from \"store/LoadPage\";\nexport const useNextAnimes = page => {\n  _s();\n\n  const [isFetching, setIsFetching] = useState(false);\n  const [isLoading, setIsLoding] = useState(false);\n  const [hasMore, setHasMore] = useRecoilState(HasMore);\n  const [apiKeyValue, setApiKeyValue] = useRecoilState(ApiKeyValue);\n  const [animeLists, setAnimeLists] = useRecoilState(AnimeLists);\n  const [loadPage, setLoadPage] = useRecoilState(LoadPage);\n  const {\n    showMessage\n  } = useMessage(); // const getNextAnimes = useCallback(async(page: number) => {\n  //     try {\n  //         setIsFetching(true);\n  //         const filter_season = `${apiKeyValue.year}-${apiKeyValue.cour}`\n  //         const getanime = await client.get('/api/annicts/search', {\n  //             params: {\n  //                 filter_season,\n  //                 page\n  //             }\n  //         })\n  //         const animeDate: AnnictApiType[] = getanime.data.works\n  //         console.log(getanime);\n  //         if (animeDate.length < 1) {\n  //             setHasMore(false);\n  //             return;\n  //         }\n  //         const distinctList = new Set([...animeLists, ...animeDate])\n  //         // const list: AnnictApiType[] = [...distinctList]\n  //         setAnimeLists([...distinctList])\n  //         console.log(animeLists);\n  //         console.log(getanime);\n  //     } catch (error) {\n  //         showMessage({title: 'アニメ一覧の取得に失敗しました', status: \"error\"})\n  //     } finally {\n  //         setIsFetching(false);\n  //     }    \n  // },[animeLists])\n\n  const getNextAnimes = useCallback(async () => {\n    console.log(page);\n\n    try {\n      setIsFetching(true);\n      setIsLoding(true);\n      const filter_season = `${apiKeyValue.year}-${apiKeyValue.cour}`;\n      const getanime = await client.get('/api/annicts/search', {\n        params: {\n          filter_season,\n          page\n        }\n      });\n      const animeDate = getanime.data.works; // for (const data of animeDate) {\n      //     console.log(data);\n      // }\n      // const data = animeDate.map((data) => {\n      // })\n\n      if (animeDate.length < 1) {\n        setHasMore(false);\n      } //重複データ削除\n\n\n      const listData = [...animeLists, ...animeDate];\n      console.log(listData); // const distinctData = listData.filter((data, index, self) => {\n      //     const ids = self.map(data => data.id)\n      //     if(ids.indexOf(data.id) === index){\n      //         return data;\n      //     }\n      // })\n\n      let map = new Map(listData.map(data => [data.id, data]));\n      const distinctData = [...map.values()];\n      console.log(distinctData);\n      setAnimeLists(distinctData);\n      setIsLoding(false); // console.log(animeLists);\n    } catch (error) {\n      showMessage({\n        title: 'アニメ一覧の取得に失敗しました',\n        status: \"error\"\n      });\n    } finally {\n      setIsFetching(false);\n    }\n  }, [loadPage]);\n  useEffect(() => {\n    let isMounted = true;\n    isMounted && getNextAnimes();\n    return () => {\n      isMounted = false;\n    };\n  }, [loadPage]);\n  return {\n    getNextAnimes,\n    animeLists,\n    isLoading\n  };\n};\n\n_s(useNextAnimes, \"ClDjClcnwpeqKEZMPfgqnKi81Ac=\", false, function () {\n  return [useRecoilState, useRecoilState, useRecoilState, useRecoilState, useMessage];\n});","map":{"version":3,"sources":["/usr/src/app/react-app/src/customHooks/useNextAnimes.ts"],"names":["useState","useCallback","useEffect","useRecoilState","client","AnimeLists","ApiKeyValue","HasMore","useMessage","LoadPage","useNextAnimes","page","isFetching","setIsFetching","isLoading","setIsLoding","hasMore","setHasMore","apiKeyValue","setApiKeyValue","animeLists","setAnimeLists","loadPage","setLoadPage","showMessage","getNextAnimes","console","log","filter_season","year","cour","getanime","get","params","animeDate","data","works","length","listData","map","Map","id","distinctData","values","error","title","status","isMounted"],"mappings":"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","sourcesContent":["import { useState, useCallback, useEffect } from \"react\";\n\nimport { useRecoilState } from \"recoil\";\n\nimport { client } from \"lib/api/client\";\nimport { AnimeLists } from \"store/AnimeLists\";\nimport { ApiKeyValue } from \"store/ApiKeyValue\";\nimport { HasMore } from \"store/loding/HasMore\";\nimport { AnnictApiType } from \"types/api/AnnictApiType\";\nimport { useMessage } from \"./message/useMessage\";\nimport { LoadPage } from \"store/LoadPage\";\n\n\ntype NextAnimes = (page: number) => {\n    getNextAnimes: () => void;\n    // isFetching: boolean;\n    isLoading: boolean;\n    animeLists: AnnictApiType[];\n}\n\nexport const useNextAnimes: NextAnimes = (page: number) => {\n    const [ isFetching, setIsFetching ]  = useState(false);\n    const [ isLoading, setIsLoding ]  = useState(false);\n    const [ hasMore, setHasMore ] = useRecoilState(HasMore)\n    const [ apiKeyValue, setApiKeyValue ] = useRecoilState(ApiKeyValue)\n    const [ animeLists, setAnimeLists ] = useRecoilState(AnimeLists)\n    const [ loadPage, setLoadPage ] = useRecoilState(LoadPage)\n    const { showMessage } = useMessage()\n\n    // const getNextAnimes = useCallback(async(page: number) => {\n    //     try {\n    //         setIsFetching(true);\n    //         const filter_season = `${apiKeyValue.year}-${apiKeyValue.cour}`\n    //         const getanime = await client.get('/api/annicts/search', {\n    //             params: {\n    //                 filter_season,\n    //                 page\n    //             }\n    //         })\n    //         const animeDate: AnnictApiType[] = getanime.data.works\n    //         console.log(getanime);\n            \n    //         if (animeDate.length < 1) {\n    //             setHasMore(false);\n    //             return;\n    //         }\n    //         const distinctList = new Set([...animeLists, ...animeDate])\n    //         // const list: AnnictApiType[] = [...distinctList]\n            \n    //         setAnimeLists([...distinctList])\n    //         console.log(animeLists);\n    //         console.log(getanime);\n    //     } catch (error) {\n    //         showMessage({title: 'アニメ一覧の取得に失敗しました', status: \"error\"})\n    //     } finally {\n    //         setIsFetching(false);\n    //     }    \n    // },[animeLists])\n    const getNextAnimes = useCallback(async() => {\n        console.log(page);\n        \n        try {\n            setIsFetching(true);\n            setIsLoding(true)\n            const filter_season = `${apiKeyValue.year}-${apiKeyValue.cour}`\n            const getanime = await client.get('/api/annicts/search', {\n                params: {\n                    filter_season,\n                    page\n                }\n            })\n            const animeDate: AnnictApiType[] = getanime.data.works\n            // for (const data of animeDate) {\n            //     console.log(data);\n            // }\n            // const data = animeDate.map((data) => {\n\n            // })\n\n            if (animeDate.length < 1) {\n                setHasMore(false);\n            }\n            \n            //重複データ削除\n            const listData = [...animeLists, ...animeDate]\n            console.log(listData);\n            \n            // const distinctData = listData.filter((data, index, self) => {\n            //     const ids = self.map(data => data.id)\n\n            //     if(ids.indexOf(data.id) === index){\n            //         return data;\n            //     }\n            // })\n            \n            let map = new Map(listData.map<[number, AnnictApiType]>(data => [data.id, data]));\n            const distinctData = [...map.values()]\n              \n\n            console.log(distinctData); \n            \n            setAnimeLists(distinctData)\n            setIsLoding(false)\n            // console.log(animeLists);\n        } catch (error) {\n            showMessage({title: 'アニメ一覧の取得に失敗しました', status: \"error\"})\n        } finally {\n            setIsFetching(false);\n        }    \n    },[loadPage])\n\n    useEffect(() => {\n        let isMounted = true\n        isMounted && getNextAnimes()\n        return () => {\n            isMounted = false\n        }\n    }, [loadPage])\n\n    return { getNextAnimes, animeLists, isLoading }\n}\n\n"]},"metadata":{},"sourceType":"module"}