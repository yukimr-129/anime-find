{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\nimport { client } from \"../lib/api/client\";\nimport { ApiKeyValue } from '../store/ApiKeyValue';\nimport { useMessage } from './message/useMessage';\nimport { AnimeLists } from '../store/AnimeLists';\nimport { HasMore } from 'store/loding/HasMore';\nimport { LoadPage } from 'store/LoadPage';\nexport const useAnimeApiSearch = () => {\n  _s();\n\n  const setHasMore = useSetRecoilState(HasMore);\n  const setLoadPage = useSetRecoilState(LoadPage);\n  const setAnimeLists = useSetRecoilState(AnimeLists);\n  const apiKeyValue = useRecoilValue(ApiKeyValue);\n  const {\n    showMessage\n  } = useMessage(); //検索結果最初のリスト取得\n\n  const getAnimes = useCallback(async () => {\n    try {\n      const filter_season = `${apiKeyValue.year}-${apiKeyValue.cour}`;\n      const getanime = await client.get('/annicts/search', {\n        params: {\n          filter_season,\n          page: 1\n        }\n      });\n      const animeDate = getanime.data.works;\n      setAnimeLists(animeDate); //検索でリスト再取得時にInfiniteScrollの値初期化\n\n      setHasMore(true);\n      setLoadPage(1);\n    } catch (error) {\n      showMessage({\n        title: 'アニメ一覧の取得に失敗しました',\n        status: \"error\"\n      });\n    }\n  }, [apiKeyValue]);\n  return {\n    getAnimes\n  };\n};\n\n_s(useAnimeApiSearch, \"mkNF4LuhXwnCINDMEAq0B46F3vM=\", false, function () {\n  return [useSetRecoilState, useSetRecoilState, useSetRecoilState, useRecoilValue, useMessage];\n});","map":{"version":3,"sources":["/usr/src/app/react-app/src/customHooks/useAnimeApiSearch.ts"],"names":["useCallback","useRecoilValue","useSetRecoilState","client","ApiKeyValue","useMessage","AnimeLists","HasMore","LoadPage","useAnimeApiSearch","setHasMore","setLoadPage","setAnimeLists","apiKeyValue","showMessage","getAnimes","filter_season","year","cour","getanime","get","params","page","animeDate","data","works","error","title","status"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAAyBC,cAAzB,EAAyCC,iBAAzC,QAAkE,QAAlE;AAEA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,UAAT,QAA2B,sBAA3B;AAEA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,OAAT,QAAwB,sBAAxB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AAMA,OAAO,MAAMC,iBAAiC,GAAG,MAAM;AAAA;;AACnD,QAAMC,UAAU,GAAGR,iBAAiB,CAACK,OAAD,CAApC;AACA,QAAMI,WAAW,GAAGT,iBAAiB,CAACM,QAAD,CAArC;AACA,QAAMI,aAAa,GAAGV,iBAAiB,CAACI,UAAD,CAAvC;AACA,QAAMO,WAAW,GAAGZ,cAAc,CAACG,WAAD,CAAlC;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAkBT,UAAU,EAAlC,CALmD,CAO/C;;AACA,QAAMU,SAAS,GAAGf,WAAW,CAAC,YAAW;AACrC,QAAI;AACA,YAAMgB,aAAa,GAAI,GAAEH,WAAW,CAACI,IAAK,IAAGJ,WAAW,CAACK,IAAK,EAA9D;AACA,YAAMC,QAAQ,GAAG,MAAMhB,MAAM,CAACiB,GAAP,CAAW,iBAAX,EAA8B;AACjDC,QAAAA,MAAM,EAAE;AACJL,UAAAA,aADI;AAEJM,UAAAA,IAAI,EAAE;AAFF;AADyC,OAA9B,CAAvB;AAOA,YAAMC,SAA0B,GAAGJ,QAAQ,CAACK,IAAT,CAAcC,KAAjD;AAEAb,MAAAA,aAAa,CAACW,SAAD,CAAb,CAXA,CAaA;;AACAb,MAAAA,UAAU,CAAC,IAAD,CAAV;AACAC,MAAAA,WAAW,CAAC,CAAD,CAAX;AACH,KAhBD,CAgBE,OAAOe,KAAP,EAAc;AACZZ,MAAAA,WAAW,CAAC;AAACa,QAAAA,KAAK,EAAE,iBAAR;AAA2BC,QAAAA,MAAM,EAAE;AAAnC,OAAD,CAAX;AACH;AACJ,GApB4B,EAoB1B,CAACf,WAAD,CApB0B,CAA7B;AAsBJ,SAAO;AAAEE,IAAAA;AAAF,GAAP;AACH,CA/BM;;GAAMN,iB;UACUP,iB,EACCA,iB,EACEA,iB,EACFD,c,EACII,U","sourcesContent":["import { useCallback } from 'react'\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from 'recoil'\n\nimport { client } from \"../lib/api/client\"\nimport { ApiKeyValue } from '../store/ApiKeyValue'\nimport { useMessage } from './message/useMessage'\nimport { AnnictApiType } from '../types/api/AnnictApiType'\nimport { AnimeLists } from '../store/AnimeLists'\nimport { HasMore } from 'store/loding/HasMore'\nimport { LoadPage } from 'store/LoadPage'\n\ntype AnimeApiSearch = () => {\n        getAnimes: () => void;\n}\n\nexport const useAnimeApiSearch: AnimeApiSearch = () => {\n    const setHasMore = useSetRecoilState(HasMore)\n    const setLoadPage = useSetRecoilState(LoadPage)\n    const setAnimeLists = useSetRecoilState(AnimeLists)\n    const apiKeyValue = useRecoilValue(ApiKeyValue)\n    const { showMessage } = useMessage()\n        \n        //検索結果最初のリスト取得\n        const getAnimes = useCallback(async() => {\n            try {\n                const filter_season = `${apiKeyValue.year}-${apiKeyValue.cour}`\n                const getanime = await client.get('/annicts/search', {\n                    params: {\n                        filter_season,\n                        page: 1\n                    }\n                })\n                \n                const animeDate: AnnictApiType[] = getanime.data.works \n                               \n                setAnimeLists(animeDate)\n\n                //検索でリスト再取得時にInfiniteScrollの値初期化\n                setHasMore(true)\n                setLoadPage(1)\n            } catch (error) {\n                showMessage({title: 'アニメ一覧の取得に失敗しました', status: \"error\"})\n            } \n        }, [apiKeyValue])\n\n    return { getAnimes }\n}"]},"metadata":{},"sourceType":"module"}