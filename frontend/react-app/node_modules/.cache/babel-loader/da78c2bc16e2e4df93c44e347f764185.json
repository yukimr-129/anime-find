{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from 'react';\nimport { useRecoilState } from 'recoil';\nimport { client } from \"../lib/api/client\";\nimport { ApiKeyValue } from '../store/ApiKeyValue';\nimport { useMessage } from './message/useMessage';\nimport { AnimeLists } from '../store/AnimeLists';\nexport const useAnimeApiSearch = () => {\n  _s();\n\n  const [isFetching, setIsFetching] = useState(false);\n  const [hasMore, setHasMore] = useState(true);\n  const [apiKeyValue, setApiKeyValue] = useRecoilState(ApiKeyValue);\n  const [animeLists, setAnimeLists] = useRecoilState(AnimeLists);\n  const {\n    showMessage\n  } = useMessage(); //初回表示リスト取得\n\n  const getAnimes = useCallback(async (page = 1) => {\n    try {\n      // setIsFetching(true);\n      // console.log(page);\n      const filter_season = `${apiKeyValue.year}-${apiKeyValue.cour}`;\n      console.log(filter_season);\n      const getanime = await client.get('/api/annicts/search', {\n        params: {\n          filter_season,\n          page\n        }\n      });\n      const animeDate = getanime.data.works; // if (animeDate.length < 1) {\n      //     setHasMore(false);\n      //     return;\n      // }\n      // setAnimeLists(animeDate)\n\n      console.log(animeDate);\n      setAnimeLists(animeDate);\n    } catch (error) {\n      showMessage({\n        title: 'アニメ一覧の取得に失敗しました',\n        status: \"error\"\n      });\n    } // finally {\n    //     setIsFetching(false);\n    // }\n\n  }, [animeLists, apiKeyValue]); // 初回レンダリング時、検索時最初のページ取得\n  // useEffect(() => {\n  //     getAnimes() \n  //     console.log(animeLists);\n  // }, [apiKeyValue])\n\n  return {\n    animeLists,\n    hasMore,\n    isFetching,\n    getAnimes\n  };\n};\n\n_s(useAnimeApiSearch, \"CpScyMWbLKRcHnhJ/2iST7X+dU0=\", false, function () {\n  return [useRecoilState, useRecoilState, useMessage];\n});","map":{"version":3,"sources":["/usr/src/app/react-app/src/customHooks/useAnimeApiSearch.ts"],"names":["useCallback","useState","useRecoilState","client","ApiKeyValue","useMessage","AnimeLists","useAnimeApiSearch","isFetching","setIsFetching","hasMore","setHasMore","apiKeyValue","setApiKeyValue","animeLists","setAnimeLists","showMessage","getAnimes","page","filter_season","year","cour","console","log","getanime","get","params","animeDate","data","works","error","title","status"],"mappings":";;AAAA,SAASA,WAAT,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,SAASC,cAAT,QAA+C,QAA/C;AAEA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,UAAT,QAA2B,sBAA3B;AAEA,SAASC,UAAT,QAA2B,qBAA3B;AASA,OAAO,MAAMC,iBAAiC,GAAG,MAAM;AAAA;;AACnD,QAAM,CAAEC,UAAF,EAAcC,aAAd,IAAgCR,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAAES,OAAF,EAAWC,UAAX,IAA0BV,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAAEW,WAAF,EAAeC,cAAf,IAAkCX,cAAc,CAACE,WAAD,CAAtD;AACA,QAAM,CAAEU,UAAF,EAAcC,aAAd,IAAgCb,cAAc,CAACI,UAAD,CAApD;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAkBX,UAAU,EAAlC,CALmD,CAO/C;;AACA,QAAMY,SAAS,GAAGjB,WAAW,CAAC,OAAMkB,IAAY,GAAG,CAArB,KAA2B;AACrD,QAAI;AACA;AACA;AAEA,YAAMC,aAAa,GAAI,GAAEP,WAAW,CAACQ,IAAK,IAAGR,WAAW,CAACS,IAAK,EAA9D;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,aAAZ;AAEA,YAAMK,QAAQ,GAAG,MAAMrB,MAAM,CAACsB,GAAP,CAAW,qBAAX,EAAkC;AACrDC,QAAAA,MAAM,EAAE;AACJP,UAAAA,aADI;AAEJD,UAAAA;AAFI;AAD6C,OAAlC,CAAvB;AAOA,YAAMS,SAA0B,GAAGH,QAAQ,CAACI,IAAT,CAAcC,KAAjD,CAdA,CAeA;AACA;AACA;AACA;AACA;;AACAP,MAAAA,OAAO,CAACC,GAAR,CAAYI,SAAZ;AAEAZ,MAAAA,aAAa,CAACY,SAAD,CAAb;AAEH,KAxBD,CAwBE,OAAOG,KAAP,EAAc;AACZd,MAAAA,WAAW,CAAC;AAACe,QAAAA,KAAK,EAAE,iBAAR;AAA2BC,QAAAA,MAAM,EAAE;AAAnC,OAAD,CAAX;AACH,KA3BoD,CA4BrD;AACA;AACA;;AACH,GA/B4B,EA+B1B,CAAClB,UAAD,EAAaF,WAAb,CA/B0B,CAA7B,CAR+C,CAyC/C;AACA;AACA;AACA;AAEA;;AAEJ,SAAO;AAAEE,IAAAA,UAAF;AAAcJ,IAAAA,OAAd;AAAuBF,IAAAA,UAAvB;AAAmCS,IAAAA;AAAnC,GAAP;AACH,CAjDM;;GAAMV,iB;UAG+BL,c,EACFA,c,EACdG,U","sourcesContent":["import { useCallback, useEffect, useState } from 'react'\nimport { useRecoilState, useRecoilValue } from 'recoil'\n\nimport { client } from \"../lib/api/client\"\nimport { ApiKeyValue } from '../store/ApiKeyValue'\nimport { useMessage } from './message/useMessage'\nimport { AnnictApiType } from '../types/api/AnnictApiType'\nimport { AnimeLists } from '../store/AnimeLists'\n\ntype AnimeApiSearch = () => {\n        animeLists: AnnictApiType[];\n        getAnimes: (page: number) => void;\n        hasMore: boolean;\n        isFetching: boolean;\n}\n\nexport const useAnimeApiSearch: AnimeApiSearch = () => {\n    const [ isFetching, setIsFetching]  = useState(false);\n    const [ hasMore, setHasMore ] = useState(true)\n    const [ apiKeyValue, setApiKeyValue ] = useRecoilState(ApiKeyValue)\n    const [ animeLists, setAnimeLists ] = useRecoilState(AnimeLists)\n    const { showMessage } = useMessage()\n        \n        //初回表示リスト取得\n        const getAnimes = useCallback(async(page: number = 1) => {\n            try {\n                // setIsFetching(true);\n                // console.log(page);\n                \n                const filter_season = `${apiKeyValue.year}-${apiKeyValue.cour}`\n                console.log(filter_season);\n                \n                const getanime = await client.get('/api/annicts/search', {\n                    params: {\n                        filter_season,\n                        page\n                    }\n                })\n                \n                const animeDate: AnnictApiType[] = getanime.data.works\n                // if (animeDate.length < 1) {\n                //     setHasMore(false);\n                //     return;\n                // }\n                // setAnimeLists(animeDate)\n                console.log(animeDate);\n                \n                setAnimeLists(animeDate)\n                \n            } catch (error) {\n                showMessage({title: 'アニメ一覧の取得に失敗しました', status: \"error\"})\n            } \n            // finally {\n            //     setIsFetching(false);\n            // }\n        }, [animeLists, apiKeyValue])\n\n        // 初回レンダリング時、検索時最初のページ取得\n        // useEffect(() => {\n        //     getAnimes() \n        //     console.log(animeLists);\n                   \n        // }, [apiKeyValue])\n\n    return { animeLists, hasMore, isFetching, getAnimes }\n}"]},"metadata":{},"sourceType":"module"}