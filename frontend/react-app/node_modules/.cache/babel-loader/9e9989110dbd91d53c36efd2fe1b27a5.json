{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from 'react';\nimport { useRecoilState } from 'recoil';\nimport { client } from \"../lib/api/client\";\nimport { ApiKeyValue } from '../store/ApiKeyValue';\nimport { useMessage } from './message/useMessage';\nimport { AnimeLists } from '../store/AnimeLists';\nexport const useAnimeApiSearch = () => {\n  _s();\n\n  const [hasMore, setHasMore] = useState(true);\n  const [apiKeyValue, setApiKeyValue] = useRecoilState(ApiKeyValue);\n  const [animeLists, setAnimeLists] = useRecoilState(AnimeLists);\n  const {\n    showMessage\n  } = useMessage();\n  const page = 1;\n  const getAnimes = useCallback(async page => {\n    try {\n      const filter_season = `${apiKeyValue.year}-${apiKeyValue.cour}`;\n      const getanime = await client.get('/api/annicts/search', {\n        params: {\n          filter_season,\n          page\n        }\n      });\n      console.log(getanime);\n      const animeDate = getanime.data.works;\n\n      if (animeDate.length < 1) {\n        setHasMore(false);\n        return;\n      }\n\n      setAnimeLists([...animeLists, ...animeDate]);\n    } catch (error) {\n      showMessage({\n        title: 'アニメ一覧の取得に失敗しました',\n        status: \"error\"\n      });\n    }\n  }, [animeLists]); //初回レンダリング時、検索時最初のページ取得\n  // useEffect(() => {\n  //     getAnimes(page)        \n  // }, [apiKeyValue])\n\n  return {\n    animeLists,\n    getAnimes\n  };\n};\n\n_s(useAnimeApiSearch, \"XNxA4buQHV+/urvZWovhyc+lXng=\", false, function () {\n  return [useRecoilState, useRecoilState, useMessage];\n});","map":{"version":3,"sources":["/usr/src/app/react-app/src/customHooks/useAnimeApiSearch.ts"],"names":["useCallback","useState","useRecoilState","client","ApiKeyValue","useMessage","AnimeLists","useAnimeApiSearch","hasMore","setHasMore","apiKeyValue","setApiKeyValue","animeLists","setAnimeLists","showMessage","page","getAnimes","filter_season","year","cour","getanime","get","params","console","log","animeDate","data","works","length","error","title","status"],"mappings":";;AAAA,SAASA,WAAT,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,SAASC,cAAT,QAA+C,QAA/C;AAEA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,UAAT,QAA2B,sBAA3B;AAEA,SAASC,UAAT,QAA2B,qBAA3B;AAOA,OAAO,MAAMC,iBAAiC,GAAG,MAAM;AAAA;;AACnD,QAAM,CAAEC,OAAF,EAAWC,UAAX,IAA0BR,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAAES,WAAF,EAAeC,cAAf,IAAkCT,cAAc,CAACE,WAAD,CAAtD;AACA,QAAM,CAAEQ,UAAF,EAAcC,aAAd,IAAgCX,cAAc,CAACI,UAAD,CAApD;AACA,QAAM;AAAEQ,IAAAA;AAAF,MAAkBT,UAAU,EAAlC;AACA,QAAMU,IAAI,GAAG,CAAb;AAEI,QAAMC,SAAS,GAAGhB,WAAW,CAAC,MAAMe,IAAN,IAAuB;AACjD,QAAI;AACA,YAAME,aAAa,GAAI,GAAEP,WAAW,CAACQ,IAAK,IAAGR,WAAW,CAACS,IAAK,EAA9D;AACA,YAAMC,QAAQ,GAAG,MAAMjB,MAAM,CAACkB,GAAP,CAAW,qBAAX,EAAkC;AACrDC,QAAAA,MAAM,EAAE;AACJL,UAAAA,aADI;AAEJF,UAAAA;AAFI;AAD6C,OAAlC,CAAvB;AAMAQ,MAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AAEA,YAAMK,SAA0B,GAAGL,QAAQ,CAACM,IAAT,CAAcC,KAAjD;;AACA,UAAIF,SAAS,CAACG,MAAV,GAAmB,CAAvB,EAA0B;AACtBnB,QAAAA,UAAU,CAAC,KAAD,CAAV;AACA;AACH;;AAEDI,MAAAA,aAAa,CAAC,CAAC,GAAGD,UAAJ,EAAgB,GAAGa,SAAnB,CAAD,CAAb;AAEH,KAlBD,CAkBE,OAAOI,KAAP,EAAc;AACZf,MAAAA,WAAW,CAAC;AAACgB,QAAAA,KAAK,EAAE,iBAAR;AAA2BC,QAAAA,MAAM,EAAE;AAAnC,OAAD,CAAX;AACH;AACH,GAtB2B,EAsBzB,CAACnB,UAAD,CAtByB,CAA7B,CAP+C,CA+B/C;AACA;AACA;AACA;;AAEJ,SAAO;AAAEA,IAAAA,UAAF;AAAcI,IAAAA;AAAd,GAAP;AACH,CArCM;;GAAMT,iB;UAE+BL,c,EACFA,c,EACdG,U","sourcesContent":["import { useCallback, useEffect, useState } from 'react'\nimport { useRecoilState, useRecoilValue } from 'recoil'\n\nimport { client } from \"../lib/api/client\"\nimport { ApiKeyValue } from '../store/ApiKeyValue'\nimport { useMessage } from './message/useMessage'\nimport { AnnictApiType } from '../types/api/AnnictApiType'\nimport { AnimeLists } from '../store/AnimeLists'\n\ntype AnimeApiSearch = () => {\n        animeLists: AnnictApiType[];\n        getAnimes: (page: number) => void\n}\n\nexport const useAnimeApiSearch: AnimeApiSearch = () => {\n    const [ hasMore, setHasMore ] = useState(true)\n    const [ apiKeyValue, setApiKeyValue ] = useRecoilState(ApiKeyValue)\n    const [ animeLists, setAnimeLists ] = useRecoilState(AnimeLists)\n    const { showMessage } = useMessage()\n    const page = 1\n        \n        const getAnimes = useCallback(async(page: number) => {\n            try {\n                const filter_season = `${apiKeyValue.year}-${apiKeyValue.cour}`\n                const getanime = await client.get('/api/annicts/search', {\n                    params: {\n                        filter_season,\n                        page\n                    }\n                })\n                console.log(getanime);\n                \n                const animeDate: AnnictApiType[] = getanime.data.works\n                if (animeDate.length < 1) {\n                    setHasMore(false);\n                    return;\n                }\n\n                setAnimeLists([...animeLists, ...animeDate])\n                \n            } catch (error) {\n                showMessage({title: 'アニメ一覧の取得に失敗しました', status: \"error\"})\n            }\n         }, [animeLists])\n\n        //初回レンダリング時、検索時最初のページ取得\n        // useEffect(() => {\n        //     getAnimes(page)        \n        // }, [apiKeyValue])\n\n    return { animeLists, getAnimes }\n}"]},"metadata":{},"sourceType":"module"}