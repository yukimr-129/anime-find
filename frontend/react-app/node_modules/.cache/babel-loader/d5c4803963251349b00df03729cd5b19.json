{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/react-app/src/components/pages/favorites/FavoriteAnime.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nimport { Box, Center, Text, Wrap, WrapItem } from \"@chakra-ui/react\";\nimport { useRecoilState } from \"recoil\";\nimport { FavoriteAnimeLists } from \"store/FavoriteAnimeList\";\nimport { IsFavoriteLike } from \"store/IsFavoriteLike\";\nimport { Loding } from \"store/loding/Loding\";\nimport { DefaultSpiner } from \"util/DefaultSpiner\";\nimport FavoriteAnimeCard from \"./FavoriteAnimeCard\";\nimport { getFavorite } from \"lib/api/favorite/favorite\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst FavoriteAnime = () => {\n  _s();\n\n  const [loding, setLoding] = useRecoilState(Loding);\n  const [favoriteAnimeLists, setFavoriteAnimeList] = useRecoilState(FavoriteAnimeLists);\n  const [isFavoriteLike, setIsFavoriteLike] = useRecoilState(IsFavoriteLike);\n  useEffect(() => {\n    let isMounted = true;\n    setLoding(true);\n\n    const getFavoriteAnime = async () => {\n      try {\n        const res = await getFavorite();\n\n        if (res.status === 200) {\n          setFavoriteAnimeList(res.data);\n          setIsFavoriteLike(true);\n          setLoding(false);\n        } else {\n          console.error('status error');\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    isMounted && getFavoriteAnime();\n    return () => {\n      isMounted = false;\n    };\n  }, [isFavoriteLike]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      w: {\n        base: '90%',\n        md: '70%'\n      },\n      h: \"100%\",\n      bg: \"#ffff\",\n      m: \"100px auto 20px auto\",\n      borderRadius: \"10px\",\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        justify: \"center\",\n        align: \"center\",\n        m: \"30px 10px 0\",\n        children: /*#__PURE__*/_jsxDEV(Text, {\n          fontWeight: \"700\",\n          fontSize: \"1.17em\",\n          pt: \"30px\",\n          children: \"\\u30FC\\u3000\\u304A\\u6C17\\u306B\\u5165\\u308A\\u30A2\\u30CB\\u30E1\\u3000\\u30FC\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), loding ? /*#__PURE__*/_jsxDEV(Center, {\n        p: \"100px 0 100px 0\",\n        children: /*#__PURE__*/_jsxDEV(DefaultSpiner, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(Wrap, {\n        p: {\n          base: 3,\n          md: 4\n        },\n        w: \"100%\",\n        spacing: 5,\n        justify: \"center\",\n        align: \"center\",\n        children: favoriteAnimeLists.map((favoriteAnime, index) => /*#__PURE__*/_jsxDEV(WrapItem, {\n          children: /*#__PURE__*/_jsxDEV(FavoriteAnimeCard, {\n            favoriteAnime: favoriteAnime\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 33\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(FavoriteAnime, \"TDYp8WJ+1x3zafcqOtKBDdZswXc=\", false, function () {\n  return [useRecoilState, useRecoilState, useRecoilState];\n});\n\n_c = FavoriteAnime;\nexport default FavoriteAnime;\n\nvar _c;\n\n$RefreshReg$(_c, \"FavoriteAnime\");","map":{"version":3,"sources":["/usr/src/app/react-app/src/components/pages/favorites/FavoriteAnime.tsx"],"names":["useEffect","Box","Center","Text","Wrap","WrapItem","useRecoilState","FavoriteAnimeLists","IsFavoriteLike","Loding","DefaultSpiner","FavoriteAnimeCard","getFavorite","FavoriteAnime","loding","setLoding","favoriteAnimeLists","setFavoriteAnimeList","isFavoriteLike","setIsFavoriteLike","isMounted","getFavoriteAnime","res","status","data","console","error","base","md","map","favoriteAnime","index"],"mappings":"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","sourcesContent":["import { useEffect, VFC } from \"react\";\n\nimport { Box, Center, Text, Wrap, WrapItem } from \"@chakra-ui/react\";\nimport { log } from \"console\";\nimport Cookies from \"js-cookie\";\nimport { useRecoilState } from \"recoil\";\n\nimport { client } from \"lib/api/client\";\nimport { FavoriteAnimeLists } from \"store/FavoriteAnimeList\";\nimport { IsFavoriteLike } from \"store/IsFavoriteLike\";\nimport { Loding } from \"store/loding/Loding\";\nimport { DefaultSpiner } from \"util/DefaultSpiner\";\nimport FavoriteAnimeCard from \"./FavoriteAnimeCard\";\nimport { getFavorite } from \"lib/api/favorite/favorite\";\n\nconst FavoriteAnime: VFC = () => {\n    const [ loding, setLoding ] = useRecoilState(Loding)\n    const [ favoriteAnimeLists, setFavoriteAnimeList ] = useRecoilState(FavoriteAnimeLists)\n    const [ isFavoriteLike, setIsFavoriteLike ] = useRecoilState(IsFavoriteLike)\n\n    useEffect(() => {\n        let isMounted = true\n        setLoding(true)\n        const getFavoriteAnime = async() => {\n            try {\n                const res = await getFavorite()\n                if(res.status === 200) {\n                    setFavoriteAnimeList(res.data)\n                    setIsFavoriteLike(true)\n                    setLoding(false)\n                } else {\n                    console.error('status error')\n                }\n            } catch (error) {\n                console.error(error)\n            }\n        }\n        isMounted && getFavoriteAnime()\n\n        return () => {\n            isMounted = false\n        }\n    }, [isFavoriteLike])\n\n    return (\n        <>\n            <Box w={{base: '90%', md: '70%'}} h='100%' bg='#ffff' m='100px auto 20px auto' borderRadius='10px'>\n                <Box justify='center' align='center' m='30px 10px 0'>\n                    <Text fontWeight='700' fontSize='1.17em' pt='30px'>\n                        ー　お気に入りアニメ　ー\n                    </Text>\n                </Box>\n                {loding ? (\n                    <Center p='100px 0 100px 0'>\n                        <DefaultSpiner />\n                    </Center>\n                ) : (\n                    <Wrap p={{base: 3, md: 4}} w='100%' spacing={5} justify='center' align='center'>\n                        {favoriteAnimeLists.map((favoriteAnime, index) => (\n                            <WrapItem key={index} >\n                                <FavoriteAnimeCard favoriteAnime={favoriteAnime}/>\n                            </WrapItem>\n                        ))}\n                    </Wrap>\n                )}\n            </Box>\n        </>\n    )\n}\n\nexport default FavoriteAnime"]},"metadata":{},"sourceType":"module"}