{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/react-app/src/components/organisms/AnimeCardList.tsx\",\n    _s = $RefreshSig$();\n\nimport { memo, useCallback, useRef } from \"react\";\nimport { Box, Center, Text, Wrap, WrapItem } from \"@chakra-ui/react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport { useCourFactory } from \"../../customHooks/useCourFactory\";\nimport { Year } from \"../../store/Year\";\nimport AnimeCard from \"../molecules/animeCard/AnimeCard\";\nimport { AnimeLists } from \"store/AnimeLists\";\nimport { BeatLoader } from \"react-spinners\";\nimport { HasMore } from \"store/loding/HasMore\";\nimport { useNextAnimes } from \"customHooks/useNextAnimes\";\nimport { LoadPage } from \"store/LoadPage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AnimeCardList = /*#__PURE__*/memo(_c = _s(props => {\n  _s();\n\n  // const { animeLists } = props\n  // const [ isFetching, setIsFetching]  = useState(false);\n  // const [ hasMore, setHasMore ] = useState(true)\n  const year = useRecoilValue(Year);\n  const {\n    select_cour\n  } = useCourFactory();\n  const hasMore = useRecoilValue(HasMore); // const [ apiKeyValue, setApiKeyValue ] = useRecoilState(ApiKeyValue)\n\n  const [animeLists, setAnimeLists] = useRecoilState(AnimeLists);\n  const [loadPage, setLoadPage] = useRecoilState(LoadPage);\n  const {\n    isLoading\n  } = useNextAnimes(loadPage); // ref対象を監視して表示終わったら、ページ番号を増やす\n\n  const observer = useRef();\n  const lastMovieElementRef = useCallback(node => {\n    if (isLoading) return;\n    observer.current && observer.current.disconnect();\n    observer.current = new IntersectionObserver(entries => {\n      //要素が交差しているかつさらにページを読みこむ場合、ページ番号を増やす\n      if (entries[0].isIntersecting && hasMore) {\n        setLoadPage(prevPage => prevPage + 1);\n      }\n    });\n    node && observer.current.observe(node);\n  }, [hasMore, isLoading]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      justify: \"center\",\n      align: \"center\",\n      m: \"30px 10px 0\",\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        fontWeight: \"700\",\n        fontSize: \"1.17em\",\n        children: [\"\\u2015 \", year, select_cour, \" \\u2015\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), animeLists ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Wrap, {\n        p: {\n          base: 3,\n          md: 4\n        },\n        w: \"100%\",\n        spacing: 5,\n        justify: \"center\",\n        align: \"center\",\n        children: animeLists.map((animeList, index) => animeLists.length === index + 1 ? /*#__PURE__*/_jsxDEV(WrapItem, {\n          ref: lastMovieElementRef,\n          children: /*#__PURE__*/_jsxDEV(AnimeCard, {\n            animeList: animeList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 41\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 37\n        }, this) : /*#__PURE__*/_jsxDEV(WrapItem, {\n          children: /*#__PURE__*/_jsxDEV(AnimeCard, {\n            animeList: animeList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 41\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 37\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(Center, {\n        p: \"5px 0 30px 0\",\n        w: \"100%\",\n        h: \"100\",\n        children: /*#__PURE__*/_jsxDEV(BeatLoader, {\n          size: 10,\n          color: \"black\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true) : null]\n  }, void 0, true);\n}, \"6uWI+5R1s0zxymi7Y4FWuQ1Ad7M=\", false, function () {\n  return [useRecoilValue, useCourFactory, useRecoilValue, useRecoilState, useRecoilState, useNextAnimes];\n}));\n_c2 = AnimeCardList;\nexport default AnimeCardList;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AnimeCardList$memo\");\n$RefreshReg$(_c2, \"AnimeCardList\");","map":{"version":3,"sources":["/usr/src/app/react-app/src/components/organisms/AnimeCardList.tsx"],"names":["memo","useCallback","useRef","Box","Center","Text","Wrap","WrapItem","useRecoilState","useRecoilValue","useCourFactory","Year","AnimeCard","AnimeLists","BeatLoader","HasMore","useNextAnimes","LoadPage","AnimeCardList","props","year","select_cour","hasMore","animeLists","setAnimeLists","loadPage","setLoadPage","isLoading","observer","lastMovieElementRef","node","current","disconnect","IntersectionObserver","entries","isIntersecting","prevPage","observe","base","md","map","animeList","index","length"],"mappings":";;;AAAA,SAASA,IAAT,EAAyBC,WAAzB,EAAsCC,MAAtC,QAAoD,OAApD;AAEA,SAASC,GAAT,EAAcC,MAAd,EAA4BC,IAA5B,EAAkCC,IAAlC,EAAwCC,QAAxC,QAAwD,kBAAxD;AAEA,SAASC,cAAT,EAAyBC,cAAzB,QAA+C,QAA/C;AAEA,SAASC,cAAT,QAA+B,kCAA/B;AACA,SAASC,IAAT,QAAqB,kBAArB;AAEA,OAAOC,SAAP,MAAsB,kCAAtB;AAIA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,UAAT,QAA2B,gBAA3B;AACA,SAASC,OAAT,QAAwB,sBAAxB;AAEA,SAASC,aAAT,QAA8B,2BAA9B;AACA,SAASC,QAAT,QAAyB,gBAAzB;;;AAMA,MAAMC,aAAyB,gBAAGlB,IAAI,SAAEmB,KAAD,IAAW;AAAA;;AAC9C;AACA;AACA;AACA,QAAMC,IAAI,GAAGX,cAAc,CAACE,IAAD,CAA3B;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAkBX,cAAc,EAAtC;AACA,QAAMY,OAAO,GAAGb,cAAc,CAACM,OAAD,CAA9B,CAN8C,CAO9C;;AACA,QAAM,CAAEQ,UAAF,EAAcC,aAAd,IAAgChB,cAAc,CAACK,UAAD,CAApD;AACA,QAAM,CAAEY,QAAF,EAAYC,WAAZ,IAA4BlB,cAAc,CAACS,QAAD,CAAhD;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAgBX,aAAa,CAACS,QAAD,CAAnC,CAV8C,CAY9C;;AACA,QAAMG,QAAa,GAAG1B,MAAM,EAA5B;AACA,QAAM2B,mBAAmB,GAAG5B,WAAW,CAAE6B,IAAD,IAAU;AAC9C,QAAIH,SAAJ,EAAe;AACfC,IAAAA,QAAQ,CAACG,OAAT,IAAoBH,QAAQ,CAACG,OAAT,CAAiBC,UAAjB,EAApB;AAEAJ,IAAAA,QAAQ,CAACG,OAAT,GAAmB,IAAIE,oBAAJ,CAA0BC,OAAD,IAAa;AACrD;AACA,UAAGA,OAAO,CAAC,CAAD,CAAP,CAAWC,cAAX,IAA6Bb,OAAhC,EAAwC;AACpCI,QAAAA,WAAW,CAAEU,QAAD,IAAcA,QAAQ,GAAG,CAA1B,CAAX;AACH;AACJ,KALkB,CAAnB;AAOAN,IAAAA,IAAI,IAAIF,QAAQ,CAACG,OAAT,CAAiBM,OAAjB,CAAyBP,IAAzB,CAAR;AAEH,GAbsC,EAapC,CAACR,OAAD,EAAUK,SAAV,CAboC,CAAvC;AAeA,sBACI;AAAA,4BACI,QAAC,GAAD;AAAK,MAAA,OAAO,EAAC,QAAb;AAAsB,MAAA,KAAK,EAAC,QAA5B;AAAqC,MAAA,CAAC,EAAC,aAAvC;AAAA,6BACI,QAAC,IAAD;AAAM,QAAA,UAAU,EAAC,KAAjB;AAAuB,QAAA,QAAQ,EAAC,QAAhC;AAAA,8BACOP,IADP,EACaC,WADb;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,EAMKE,UAAU,gBACP;AAAA,8BACI,QAAC,IAAD;AAAM,QAAA,CAAC,EAAE;AAACe,UAAAA,IAAI,EAAE,CAAP;AAAUC,UAAAA,EAAE,EAAE;AAAd,SAAT;AAA2B,QAAA,CAAC,EAAC,MAA7B;AAAoC,QAAA,OAAO,EAAE,CAA7C;AAAgD,QAAA,OAAO,EAAC,QAAxD;AAAiE,QAAA,KAAK,EAAC,QAAvE;AAAA,kBACShB,UAAU,CAACiB,GAAX,CAAe,CAACC,SAAD,EAAYC,KAAZ,KACZnB,UAAU,CAACoB,MAAX,KAAsBD,KAAK,GAAG,CAA9B,gBACI,QAAC,QAAD;AAAsB,UAAA,GAAG,EAAEb,mBAA3B;AAAA,iCACI,QAAC,SAAD;AAAW,YAAA,SAAS,EAAEY;AAAtB;AAAA;AAAA;AAAA;AAAA;AADJ,WAAeC,KAAf;AAAA;AAAA;AAAA;AAAA,gBADJ,gBAKI,QAAC,QAAD;AAAA,iCACI,QAAC,SAAD;AAAW,YAAA,SAAS,EAAED;AAAtB;AAAA;AAAA;AAAA;AAAA;AADJ,WAAeC,KAAf;AAAA;AAAA;AAAA;AAAA,gBANP;AADT;AAAA;AAAA;AAAA;AAAA,cADJ,EAcKf,SAAS,iBACN,QAAC,MAAD;AAAQ,QAAA,CAAC,EAAC,cAAV;AAAyB,QAAA,CAAC,EAAC,MAA3B;AAAkC,QAAA,CAAC,EAAC,KAApC;AAAA,+BACI,QAAC,UAAD;AAAY,UAAA,IAAI,EAAE,EAAlB;AAAsB,UAAA,KAAK,EAAC;AAA5B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAfR;AAAA,oBADO,GAqBT,IA3BN;AAAA,kBADJ;AA+BH,CA5DqC;AAAA,UAIrBlB,cAJqB,EAKVC,cALU,EAMlBD,cANkB,EAQID,cARJ,EASAA,cATA,EAUZQ,aAVY;AAAA,GAAtC;MAAME,a;AA8DN,eAAeA,aAAf","sourcesContent":["import { memo, useState, useCallback, useRef } from \"react\"\n\nimport { Box, Center, Flex, Text, Wrap, WrapItem } from \"@chakra-ui/react\"\nimport { VFC } from \"react\"\nimport { useRecoilState, useRecoilValue } from \"recoil\"\n\nimport { useCourFactory } from \"../../customHooks/useCourFactory\"\nimport { Year } from \"../../store/Year\"\nimport { AnnictApiType } from \"../../types/api/AnnictApiType\"\nimport AnimeCard from \"../molecules/animeCard/AnimeCard\"\nimport { useAnimeApiSearch } from \"customHooks/useAnimeApiSearch\"\nimport { client } from \"lib/api/client\"\nimport { ApiKeyValue } from \"store/ApiKeyValue\"\nimport { AnimeLists } from \"store/AnimeLists\"\nimport { BeatLoader } from \"react-spinners\"\nimport { HasMore } from \"store/loding/HasMore\"\nimport { useMessage } from \"customHooks/message/useMessage\"\nimport { useNextAnimes } from \"customHooks/useNextAnimes\"\nimport { LoadPage } from \"store/LoadPage\"\n\ntype Props = {\n    animeLists: AnnictApiType[];\n}\n\nconst AnimeCardList: VFC<Props> = memo((props) => {\n    // const { animeLists } = props\n    // const [ isFetching, setIsFetching]  = useState(false);\n    // const [ hasMore, setHasMore ] = useState(true)\n    const year = useRecoilValue(Year)\n    const { select_cour } = useCourFactory()\n    const hasMore = useRecoilValue(HasMore)\n    // const [ apiKeyValue, setApiKeyValue ] = useRecoilState(ApiKeyValue)\n    const [ animeLists, setAnimeLists ] = useRecoilState(AnimeLists)\n    const [ loadPage, setLoadPage ] = useRecoilState(LoadPage)\n    const { isLoading } = useNextAnimes(loadPage)\n\n    // ref対象を監視して表示終わったら、ページ番号を増やす\n    const observer: any = useRef()\n    const lastMovieElementRef = useCallback((node) => {\n        if (isLoading) return\n        observer.current && observer.current.disconnect()\n\n        observer.current = new IntersectionObserver((entries) => {\n            //要素が交差しているかつさらにページを読みこむ場合、ページ番号を増やす\n            if(entries[0].isIntersecting && hasMore){\n                setLoadPage((prevPage) => prevPage + 1)\n            }\n        })\n\n        node && observer.current.observe(node)\n\n    }, [hasMore, isLoading])\n    \n    return (\n        <>\n            <Box justify='center' align='center' m='30px 10px 0'>\n                <Text fontWeight='700' fontSize='1.17em'>\n                    ― {year}{select_cour} ―\n                </Text>\n            </Box>\n            {animeLists ? \n                <>\n                    <Wrap p={{base: 3, md: 4}} w='100%' spacing={5} justify='center' align='center'>\n                            {animeLists.map((animeList, index) => (\n                                animeLists.length === index + 1 ? (\n                                    <WrapItem key={index} ref={lastMovieElementRef}>\n                                        <AnimeCard animeList={animeList}/>\n                                    </WrapItem>\n                                ) : (\n                                    <WrapItem key={index}>\n                                        <AnimeCard animeList={animeList}/>\n                                    </WrapItem>\n                                )\n                            ))}\n                    </Wrap>\n                    {isLoading && (\n                        <Center p='5px 0 30px 0' w='100%' h='100'>\n                            <BeatLoader size={10} color=\"black\" />\n                        </Center>\n                    )}\n                </>\n            : null }\n        </>\n    )\n})\n\nexport default AnimeCardList"]},"metadata":{},"sourceType":"module"}