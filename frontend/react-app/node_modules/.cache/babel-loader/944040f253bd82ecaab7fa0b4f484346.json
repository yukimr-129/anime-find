{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/react-app/src/components/pages/auth/SignUpForm.tsx\",\n    _s = $RefreshSig$();\n\nimport { Box, Flex, Heading, VStack, FormControl, FormLabel, Input, FormErrorMessage, Button, Divider } from \"@chakra-ui/react\";\nimport { useMessage } from \"customHooks/message/useMessage\";\nimport Cookies from \"js-cookie\";\nimport { memo } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useHistory } from \"react-router-dom\";\nimport { BeatLoader } from \"react-spinners\";\nimport { useSetRecoilState } from \"recoil\";\nimport { signUp } from \"lib/api/auth/auth\";\nimport { CurrentUser, IsSignedIn } from \"store/auth/Auth\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SignUpForm = /*#__PURE__*/memo(_c = _s(() => {\n  var _errors$name, _errors$name2, _errors$passwordConfi, _errors$passwordConfi2;\n\n  _s();\n\n  const setIsSignedIn = useSetRecoilState(IsSignedIn);\n  const setCurrentUser = useSetRecoilState(CurrentUser);\n  const history = useHistory();\n  const {\n    showMessage\n  } = useMessage();\n  const {\n    register,\n    formState: {\n      errors\n    },\n    handleSubmit,\n    formState,\n    getValues\n  } = useForm({\n    mode: 'all',\n    defaultValues: {\n      name: '',\n      email: '',\n      password: '',\n      passwordConfirmation: ''\n    }\n  });\n\n  const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n  const handleOnSubmit = async data => {\n    const params = {\n      name: data.name,\n      email: data.email,\n      password: data.password,\n      passwordConfirmation: data.passwordConfirmation\n    };\n\n    try {\n      const res = await signUp(params);\n\n      if (res.status === 200) {\n        // ログインに成功した場合はCookieに各値を格納\n        Cookies.set(\"_access_token\", res.headers[\"access-token\"]);\n        Cookies.set(\"_client\", res.headers[\"client\"]);\n        Cookies.set(\"_uid\", res.headers[\"uid\"]);\n        setIsSignedIn(true);\n        setCurrentUser(res.data.data);\n        history.push({\n          pathname: '/'\n        });\n      } else {\n        // showMessage({title: 'メールアドレスまたはパスワードが違います。', status: 'error'})\n        showMessage({\n          title: '新規登録に失敗しました。',\n          status: 'error'\n        });\n      }\n    } catch (error) {\n      // showMessage({title: 'ログインに失敗しました。', status: 'error'})\n      showMessage({\n        title: '新規登録に失敗しました。',\n        status: 'error'\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Flex, {\n      justify: \"center\",\n      align: \"center\",\n      h: \"100%\",\n      mt: \"90px\",\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        bg: \"white\",\n        w: {\n          base: '90%',\n          md: '2xl'\n        },\n        p: 4,\n        borderRadius: \"10px\",\n        shadow: \"md\",\n        children: [/*#__PURE__*/_jsxDEV(Heading, {\n          as: \"h1\",\n          size: \"lg\",\n          textAlign: \"center\",\n          children: \"\\u65B0\\u898F\\u767B\\u9332\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {\n          my: 4\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit(handleOnSubmit),\n          children: /*#__PURE__*/_jsxDEV(VStack, {\n            spacing: 5,\n            children: [/*#__PURE__*/_jsxDEV(FormControl, {\n              id: \"name\",\n              isRequired: true,\n              isInvalid: errors.name ? true : false,\n              children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                children: \"\\u30E6\\u30FC\\u30B6\\u30FC\\u30CD\\u30FC\\u30E0\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                type: \"text\",\n                ...register('name', {\n                  required: true,\n                  maxLength: 10\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(FormErrorMessage, {\n                children: [((_errors$name = errors.name) === null || _errors$name === void 0 ? void 0 : _errors$name.type) === 'required' && 'ユーザーネームは必須です。', ((_errors$name2 = errors.name) === null || _errors$name2 === void 0 ? void 0 : _errors$name2.type) === 'maxLength' && 'ユーザーネームは10文字以内で設定してください。']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n              id: \"email\",\n              isRequired: true,\n              isInvalid: errors.email ? true : false,\n              children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                children: \"\\u30E1\\u30FC\\u30EB\\u30A2\\u30C9\\u30EC\\u30B9\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                type: \"email\",\n                placeholder: \"test@example.com\",\n                ...register('email', {\n                  required: 'メールアドレスは必須です。',\n                  pattern: {\n                    value: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n                    message: 'メールアドレス形式で入力してください。'\n                  }\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(FormErrorMessage, {\n                children: errors.email && errors.email.message\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n              id: \"password\",\n              isRequired: true,\n              isInvalid: errors.password ? true : false,\n              children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                children: \"\\u30D1\\u30B9\\u30EF\\u30FC\\u30C9\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                type: \"password\",\n                ...register('password', {\n                  required: 'パスワードは必須です。',\n                  pattern: {\n                    value: /^(?=.*?[a-z])(?=.*?[A-Z])(?=.*?\\d)[a-zA-Z\\d]{8,100}$/,\n                    message: '半角英小文字大文字数字をそれぞれ1種類以上含む8文字以上で設定してください。'\n                  }\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(FormErrorMessage, {\n                children: errors.password && errors.password.message\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 98,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n              id: \"passwordConfirmation\",\n              isRequired: true,\n              isInvalid: errors.passwordConfirmation ? true : false,\n              children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                children: \"\\u78BA\\u8A8D\\u7528\\u30D1\\u30B9\\u30EF\\u30FC\\u30C9\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                type: \"password\",\n                ...register('passwordConfirmation', {\n                  required: true,\n                  validate: value => value === getValues('password')\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(FormErrorMessage, {\n                children: [((_errors$passwordConfi = errors.passwordConfirmation) === null || _errors$passwordConfi === void 0 ? void 0 : _errors$passwordConfi.type) === 'required' && '確認用パスワードは必須です。', ((_errors$passwordConfi2 = errors.passwordConfirmation) === null || _errors$passwordConfi2 === void 0 ? void 0 : _errors$passwordConfi2.type) === 'validate' && \"確認用パスワードが一致しません。\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              disabled: !formState.isValid,\n              isLoading: formState.isSubmitting,\n              w: \"100%\",\n              color: \"white\",\n              bg: \"blue.400\",\n              _hover: {\n                opacity: 0.8\n              },\n              spinner: /*#__PURE__*/_jsxDEV(BeatLoader, {\n                size: 8,\n                color: \"white\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 186\n              }, this),\n              children: \"\\u65B0\\u898F\\u767B\\u9332\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}, \"Q1tTe/hvjnhYLPicvi5IKtN6dCE=\", false, function () {\n  return [useSetRecoilState, useSetRecoilState, useHistory, useMessage, useForm];\n}));\n_c2 = SignUpForm;\nexport default SignUpForm;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SignUpForm$memo\");\n$RefreshReg$(_c2, \"SignUpForm\");","map":{"version":3,"sources":["/usr/src/app/react-app/src/components/pages/auth/SignUpForm.tsx"],"names":["Box","Flex","Heading","VStack","FormControl","FormLabel","Input","FormErrorMessage","Button","Divider","useMessage","Cookies","memo","useForm","useHistory","BeatLoader","useSetRecoilState","signUp","CurrentUser","IsSignedIn","SignUpForm","setIsSignedIn","setCurrentUser","history","showMessage","register","formState","errors","handleSubmit","getValues","mode","defaultValues","name","email","password","passwordConfirmation","sleep","ms","Promise","resolve","setTimeout","handleOnSubmit","data","params","res","status","set","headers","push","pathname","title","error","base","md","required","maxLength","type","pattern","value","message","validate","isValid","isSubmitting","opacity"],"mappings":"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","sourcesContent":["import { Box, Flex, Heading,  VStack, FormControl, FormLabel, Input, FormErrorMessage, Button, Divider } from \"@chakra-ui/react\"\nimport { useMessage } from \"customHooks/message/useMessage\"\nimport Cookies from \"js-cookie\"\nimport { memo, useCallback, VFC } from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport { useHistory } from \"react-router-dom\"\nimport { BeatLoader } from \"react-spinners\"\nimport { useSetRecoilState } from \"recoil\"\n\nimport { signUp } from \"lib/api/auth/auth\"\nimport { CurrentUser, IsSignedIn } from \"store/auth/Auth\"\nimport { SignUpFormInputs } from \"types/form/FormInputs\"\n\nconst SignUpForm: VFC = memo(() => {\n    const setIsSignedIn = useSetRecoilState(IsSignedIn)\n    const setCurrentUser = useSetRecoilState(CurrentUser)\n    const history = useHistory()\n    const { showMessage } = useMessage()\n\n    const { register, formState: { errors }, handleSubmit, formState, getValues } = useForm<SignUpFormInputs>({\n        mode: 'all',\n        defaultValues: {\n            name: '',\n            email: '',\n            password: '',\n            passwordConfirmation: ''\n          }\n    })\n\n    const sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));\n\n    const handleOnSubmit = async(data: SignUpFormInputs) => {\n        const params: SignUpFormInputs = {\n            name:data.name,\n            email: data.email,\n            password: data.password,\n            passwordConfirmation: data.passwordConfirmation,\n        }\n\n        try {\n            const res = await signUp(params)\n\n            if (res.status === 200) {\n                // ログインに成功した場合はCookieに各値を格納\n                Cookies.set(\"_access_token\", res.headers[\"access-token\"])\n                Cookies.set(\"_client\", res.headers[\"client\"])\n                Cookies.set(\"_uid\", res.headers[\"uid\"])\n                \n                setIsSignedIn(true)\n                setCurrentUser(res.data.data)\n                history.push({pathname: '/'})\n            } else {\n                // showMessage({title: 'メールアドレスまたはパスワードが違います。', status: 'error'})\n                showMessage({title: '新規登録に失敗しました。', status: 'error'})\n            }\n        } catch (error) {\n            // showMessage({title: 'ログインに失敗しました。', status: 'error'})\n            showMessage({title: '新規登録に失敗しました。', status: 'error'})\n        }\n    }\n\n    return (\n        <>\n            <Flex justify='center' align='center' h='100%' mt='90px'>\n                <Box bg='white' w={{base: '90%', md: '2xl'}} p={4} borderRadius='10px' shadow='md'>\n                    <Heading as='h1' size='lg' textAlign='center'>新規登録</Heading>\n                    <Divider my={4}/>\n                    <form onSubmit={handleSubmit(handleOnSubmit)}>\n                        <VStack spacing={5}>\n                            <FormControl id='name' isRequired isInvalid={errors.name ? true : false}>\n                                <FormLabel>ユーザーネーム</FormLabel>\n                                <Input \n                                    type='text'\n                                    {...register('name', { required: true, maxLength: 10})}\n                                />\n                                <FormErrorMessage>\n                                    {errors.name?.type === 'required' && 'ユーザーネームは必須です。' }\n                                    {errors.name?.type === 'maxLength' && 'ユーザーネームは10文字以内で設定してください。' }\n                                </FormErrorMessage>\n                            </FormControl>\n                            <FormControl id='email' isRequired isInvalid={errors.email ? true : false}>\n                                <FormLabel>メールアドレス</FormLabel>\n                                <Input \n                                    type='email'\n                                    placeholder='test@example.com' \n                                    {...register('email', { required: 'メールアドレスは必須です。', pattern: {value: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/, message: 'メールアドレス形式で入力してください。'}, })}\n                                />\n                                <FormErrorMessage>\n                                    {errors.email && errors.email.message}\n                                </FormErrorMessage>\n                            </FormControl>\n                            <FormControl id='password' isRequired isInvalid={errors.password ? true : false}>\n                                <FormLabel>パスワード</FormLabel>\n                                <Input \n                                    type='password' \n                                    {...register('password', {required: 'パスワードは必須です。', pattern: {value: /^(?=.*?[a-z])(?=.*?[A-Z])(?=.*?\\d)[a-zA-Z\\d]{8,100}$/, message: '半角英小文字大文字数字をそれぞれ1種類以上含む8文字以上で設定してください。'}})}\n                                />\n                                <FormErrorMessage>\n                                    {errors.password && errors.password.message}\n                                </FormErrorMessage>\n                            </FormControl>\n                            <FormControl id='passwordConfirmation' isRequired isInvalid={errors.passwordConfirmation ? true : false}>\n                                <FormLabel>確認用パスワード</FormLabel>\n                                <Input \n                                    type='password' \n                                    {...register('passwordConfirmation', {required: true, validate: value => value === getValues('password')})}\n                                />\n                                <FormErrorMessage>\n                                    {errors.passwordConfirmation?.type === 'required' && '確認用パスワードは必須です。'}\n                                    {errors.passwordConfirmation?.type === 'validate' && \"確認用パスワードが一致しません。\"}\n                                </FormErrorMessage>\n                            </FormControl>\n                            <Button type=\"submit\" disabled={!formState.isValid} isLoading={formState.isSubmitting} w='100%' color='white' bg='blue.400' _hover={{opacity: 0.8}} spinner={<BeatLoader size={8} color=\"white\" />}>新規登録</Button>\n                        </VStack>\n                    </form>    \n                </Box>\n            </Flex>  \n        </>\n    )\n})\n\nexport default SignUpForm"]},"metadata":{},"sourceType":"module"}