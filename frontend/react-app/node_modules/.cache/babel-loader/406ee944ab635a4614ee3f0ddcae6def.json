{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { useRecoilState, useSetRecoilState } from 'recoil';\nimport { client } from \"../lib/api/client\";\nimport { ApiKeyValue } from '../store/ApiKeyValue';\nimport { useMessage } from './message/useMessage';\nimport { AnimeLists } from '../store/AnimeLists';\nimport { HasMore } from 'store/loding/HasMore';\nexport const useAnimeApiSearch = () => {\n  _s();\n\n  const setHasMore = useSetRecoilState(HasMore);\n  const [apiKeyValue, setApiKeyValue] = useRecoilState(ApiKeyValue);\n  const [animeLists, setAnimeLists] = useRecoilState(AnimeLists);\n  const [loadPage, setLoadPage] = useRecoilState(LoadPage);\n  const {\n    showMessage\n  } = useMessage(); //検索結果最初のリスト取得\n\n  const getAnimes = useCallback(async () => {\n    try {\n      // setIsFetching(true);\n      // console.log(page);\n      const filter_season = `${apiKeyValue.year}-${apiKeyValue.cour}`;\n      const getanime = await client.get('/api/annicts/search', {\n        params: {\n          filter_season,\n          page: 1\n        }\n      });\n      const animeDate = getanime.data.works;\n      console.log(animeDate);\n      setAnimeLists(animeDate); //検索でリスト再取得時にInfiniteScrollの値初期化\n\n      setHasMore(true);\n      setLoadPage(1);\n    } catch (error) {\n      showMessage({\n        title: 'アニメ一覧の取得に失敗しました',\n        status: \"error\"\n      });\n    }\n  }, [animeLists, apiKeyValue]); // const getNextAnimes = useCallback(async(page: number) => {\n  //     try {\n  //         setIsFetching(true);\n  //         const filter_season = `${apiKeyValue.year}-${apiKeyValue.cour}`\n  //         const getanime = await client.get('/api/annicts/search', {\n  //             params: {\n  //                 filter_season,\n  //                 page\n  //             }\n  //         })\n  //         const animeDate: AnnictApiType[] = getanime.data.works\n  //         console.log(getanime);\n  //         if (animeDate.length < 1) {\n  //             setHasMore(false);\n  //             return;\n  //         }\n  //         const distinctList = new Set([...animeLists, ...animeDate])\n  //         // const list: AnnictApiType[] = [...distinctList]\n  //         setAnimeLists([...animeLists, ...animeDate])\n  //         console.log(animeLists);\n  //         console.log(getanime);\n  //     } catch (error) {\n  //         showMessage({title: 'アニメ一覧の取得に失敗しました', status: \"error\"})\n  //     } finally {\n  //         setIsFetching(false);\n  //     }    \n  // },[animeLists])\n  // 初回レンダリング時、検索時最初のページ取得\n  // useEffect(() => {\n  //     getAnimes(1) \n  //     console.log(animeLists); \n  //     console.log(\"実行\"); \n  // }, [apiKeyValue])\n\n  return {\n    animeLists,\n    getAnimes\n  };\n};\n\n_s(useAnimeApiSearch, \"85z4LFc4GZbTGzPY9+OIA/iNW8c=\", false, function () {\n  return [useSetRecoilState, useRecoilState, useRecoilState, useRecoilState, useMessage];\n});","map":{"version":3,"sources":["/usr/src/app/react-app/src/customHooks/useAnimeApiSearch.ts"],"names":["useCallback","useRecoilState","useSetRecoilState","client","ApiKeyValue","useMessage","AnimeLists","HasMore","useAnimeApiSearch","setHasMore","apiKeyValue","setApiKeyValue","animeLists","setAnimeLists","loadPage","setLoadPage","LoadPage","showMessage","getAnimes","filter_season","year","cour","getanime","get","params","page","animeDate","data","works","console","log","error","title","status"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,cAAT,EAAyBC,iBAAzB,QAAkD,QAAlD;AAEA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,UAAT,QAA2B,sBAA3B;AAEA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,OAAT,QAAwB,sBAAxB;AAOA,OAAO,MAAMC,iBAAiC,GAAG,MAAM;AAAA;;AACnD,QAAMC,UAAU,GAAGP,iBAAiB,CAACK,OAAD,CAApC;AACA,QAAM,CAAEG,WAAF,EAAeC,cAAf,IAAkCV,cAAc,CAACG,WAAD,CAAtD;AACA,QAAM,CAAEQ,UAAF,EAAcC,aAAd,IAAgCZ,cAAc,CAACK,UAAD,CAApD;AACA,QAAM,CAAEQ,QAAF,EAAYC,WAAZ,IAA4Bd,cAAc,CAACe,QAAD,CAAhD;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAkBZ,UAAU,EAAlC,CALmD,CAO/C;;AACA,QAAMa,SAAS,GAAGlB,WAAW,CAAC,YAAW;AACrC,QAAI;AACA;AACA;AAEA,YAAMmB,aAAa,GAAI,GAAET,WAAW,CAACU,IAAK,IAAGV,WAAW,CAACW,IAAK,EAA9D;AACA,YAAMC,QAAQ,GAAG,MAAMnB,MAAM,CAACoB,GAAP,CAAW,qBAAX,EAAkC;AACrDC,QAAAA,MAAM,EAAE;AACJL,UAAAA,aADI;AAEJM,UAAAA,IAAI,EAAE;AAFF;AAD6C,OAAlC,CAAvB;AAOA,YAAMC,SAA0B,GAAGJ,QAAQ,CAACK,IAAT,CAAcC,KAAjD;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,SAAZ;AAEAb,MAAAA,aAAa,CAACa,SAAD,CAAb,CAfA,CAiBA;;AACAjB,MAAAA,UAAU,CAAC,IAAD,CAAV;AACAM,MAAAA,WAAW,CAAC,CAAD,CAAX;AACH,KApBD,CAoBE,OAAOgB,KAAP,EAAc;AACZd,MAAAA,WAAW,CAAC;AAACe,QAAAA,KAAK,EAAE,iBAAR;AAA2BC,QAAAA,MAAM,EAAE;AAAnC,OAAD,CAAX;AACH;AACJ,GAxB4B,EAwB1B,CAACrB,UAAD,EAAaF,WAAb,CAxB0B,CAA7B,CAR+C,CAkC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEJ,SAAO;AAAEE,IAAAA,UAAF;AAAcM,IAAAA;AAAd,GAAP;AACH,CAxEM;;GAAMV,iB;UACUN,iB,EACqBD,c,EACFA,c,EACJA,c,EACVI,U","sourcesContent":["import { useCallback } from 'react'\nimport { useRecoilState, useSetRecoilState } from 'recoil'\n\nimport { client } from \"../lib/api/client\"\nimport { ApiKeyValue } from '../store/ApiKeyValue'\nimport { useMessage } from './message/useMessage'\nimport { AnnictApiType } from '../types/api/AnnictApiType'\nimport { AnimeLists } from '../store/AnimeLists'\nimport { HasMore } from 'store/loding/HasMore'\n\ntype AnimeApiSearch = () => {\n        animeLists: AnnictApiType[];\n        getAnimes: () => void;\n}\n\nexport const useAnimeApiSearch: AnimeApiSearch = () => {\n    const setHasMore = useSetRecoilState(HasMore)\n    const [ apiKeyValue, setApiKeyValue ] = useRecoilState(ApiKeyValue)\n    const [ animeLists, setAnimeLists ] = useRecoilState(AnimeLists)\n    const [ loadPage, setLoadPage ] = useRecoilState(LoadPage)\n    const { showMessage } = useMessage()\n        \n        //検索結果最初のリスト取得\n        const getAnimes = useCallback(async() => {\n            try {\n                // setIsFetching(true);\n                // console.log(page);\n                \n                const filter_season = `${apiKeyValue.year}-${apiKeyValue.cour}`\n                const getanime = await client.get('/api/annicts/search', {\n                    params: {\n                        filter_season,\n                        page: 1\n                    }\n                })\n                \n                const animeDate: AnnictApiType[] = getanime.data.works\n                console.log(animeDate);\n                \n                setAnimeLists(animeDate)\n\n                //検索でリスト再取得時にInfiniteScrollの値初期化\n                setHasMore(true)\n                setLoadPage(1)\n            } catch (error) {\n                showMessage({title: 'アニメ一覧の取得に失敗しました', status: \"error\"})\n            } \n        }, [animeLists, apiKeyValue])\n\n        // const getNextAnimes = useCallback(async(page: number) => {\n        //     try {\n        //         setIsFetching(true);\n        //         const filter_season = `${apiKeyValue.year}-${apiKeyValue.cour}`\n        //         const getanime = await client.get('/api/annicts/search', {\n        //             params: {\n        //                 filter_season,\n        //                 page\n        //             }\n        //         })\n        //         const animeDate: AnnictApiType[] = getanime.data.works\n        //         console.log(getanime);\n                \n        //         if (animeDate.length < 1) {\n        //             setHasMore(false);\n        //             return;\n        //         }\n        //         const distinctList = new Set([...animeLists, ...animeDate])\n        //         // const list: AnnictApiType[] = [...distinctList]\n                \n        //         setAnimeLists([...animeLists, ...animeDate])\n        //         console.log(animeLists);\n        //         console.log(getanime);\n        //     } catch (error) {\n        //         showMessage({title: 'アニメ一覧の取得に失敗しました', status: \"error\"})\n        //     } finally {\n        //         setIsFetching(false);\n        //     }    \n        // },[animeLists])\n\n        // 初回レンダリング時、検索時最初のページ取得\n        // useEffect(() => {\n        //     getAnimes(1) \n        //     console.log(animeLists); \n        //     console.log(\"実行\"); \n        // }, [apiKeyValue])\n\n    return { animeLists, getAnimes }\n}"]},"metadata":{},"sourceType":"module"}