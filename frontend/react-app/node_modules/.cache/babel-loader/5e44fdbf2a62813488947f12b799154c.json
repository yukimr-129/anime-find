{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/react-app/src/routing/Router.tsx\",\n    _s = $RefreshSig$();\n\nimport { Redirect, Route, Switch, useHistory } from \"react-router-dom\";\nimport TopPage from \"../components/pages/TopPage\";\nimport SignUpForm from '../components/pages/auth/SigninForm';\nimport SigninForm from '../components/pages/auth/SigninForm';\nimport { AuthLoding } from \"store/loding/AuthLoding\";\nimport { IsSignedIn } from \"store/auth/Auth\";\nimport { useRecoilState } from \"recoil\";\nimport { getCurrentUser } from \"lib/api/auth/auth\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Router = () => {\n  _s();\n\n  const [authLoding] = useRecoilState(AuthLoding);\n  const [isSignedIn, setIsSignedIn] = useRecoilState(IsSignedIn);\n  const history = useHistory(); // 認証済みのユーザーがいるかどうかチェック\n  // 確認できた場合はそのユーザーの情報を取得\n\n  const handleGetCurrentUser = async () => {\n    try {\n      const res = await getCurrentUser();\n\n      if ((res === null || res === void 0 ? void 0 : res.data.isLogin) === true) {\n        setIsSignedIn(true);\n        setCurrentUser(res === null || res === void 0 ? void 0 : res.data.data);\n        console.log(res === null || res === void 0 ? void 0 : res.data.data);\n      } else {\n        console.log(\"No current user\");\n      }\n    } catch (err) {\n      console.log(err);\n    }\n\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    handleGetCurrentUser();\n  }, [setCurrentUser]); // ユーザーが認証済みかどうかでルーティングを決定\n  // 未認証だった場合は「/signin」ページに促す\n\n  const Private = ({\n    children\n  }) => {\n    if (!authLoding) {\n      if (IsSignedIn) {\n        return children;\n      } else {\n        return /*#__PURE__*/_jsxDEV(Redirect, {\n          to: \"/signin\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 24\n        }, this);\n      }\n    } else {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Switch, {\n    children: [/*#__PURE__*/_jsxDEV(Private, {\n      children: /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/\",\n        render: () => /*#__PURE__*/_jsxDEV(TopPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/signup\",\n      render: () => /*#__PURE__*/_jsxDEV(SignUpForm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/signin\",\n      render: () => /*#__PURE__*/_jsxDEV(SigninForm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Route, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Router, \"nhG/R2Cxy2irOp6YRkJLZY5f1Bs=\", false, function () {\n  return [useRecoilState, useRecoilState, useHistory];\n});\n\n_c = Router;\nexport default Router;\n\nvar _c;\n\n$RefreshReg$(_c, \"Router\");","map":{"version":3,"sources":["/usr/src/app/react-app/src/routing/Router.tsx"],"names":["Redirect","Route","Switch","useHistory","TopPage","SignUpForm","SigninForm","AuthLoding","IsSignedIn","useRecoilState","getCurrentUser","Router","authLoding","isSignedIn","setIsSignedIn","history","handleGetCurrentUser","res","data","isLogin","setCurrentUser","console","log","err","setLoading","useEffect","Private","children"],"mappings":"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","sourcesContent":["import { Redirect, Route, Switch, useHistory } from \"react-router-dom\"\nimport TopPage from \"../components/pages/TopPage\"\nimport SignUpForm from '../components/pages/auth/SigninForm'\nimport SigninForm from '../components/pages/auth/SigninForm'\nimport { AuthLoding } from \"store/loding/AuthLoding\"\nimport { IsSignedIn } from \"store/auth/Auth\"\nimport { useRecoilState, useRecoilValue } from \"recoil\"\nimport { getCurrentUser } from \"lib/api/auth/auth\"\n\nconst Router = () => {\n    const [authLoding] = useRecoilState(AuthLoding)\n    const [ isSignedIn, setIsSignedIn ] = useRecoilState(IsSignedIn)\n\n    const history = useHistory()\n\n    // 認証済みのユーザーがいるかどうかチェック\n    // 確認できた場合はそのユーザーの情報を取得\n    const handleGetCurrentUser = async () => {\n        try {\n        const res = await getCurrentUser()\n\n        if (res?.data.isLogin === true) {\n            setIsSignedIn(true)\n            setCurrentUser(res?.data.data)\n\n            console.log(res?.data.data)\n        } else {\n            console.log(\"No current user\")\n        }\n        } catch (err) {\n        console.log(err)\n        }\n\n        setLoading(false)\n    }\n\n    useEffect(() => {\n        handleGetCurrentUser()\n    }, [setCurrentUser])\n\n    // ユーザーが認証済みかどうかでルーティングを決定\n    // 未認証だった場合は「/signin」ページに促す\n    const Private = ({ children }: { children: React.ReactElement }) => {\n        if (!authLoding) {\n            if (IsSignedIn) {\n                return children\n            } else {\n                return <Redirect to=\"/signin\" />\n            }\n        } else {\n            return <></>\n        }\n    }\n\n    return (\n        <Switch>\n            <Private>\n                <Route exact path='/' render={() => (\n                    <TopPage />\n                )} />\n\n            {/* <Route path='' render={() => (\n                <LikeAnime />\n            )} /> */}\n            {/* <Route path='' render={() => (\n                <Login />\n            )} /> */}\n            {/* <Route path='' render={() => (\n                <MyAccount />\n            )} /> */}\n            </Private>\n\n            <Route exact path=\"/signup\" render={() => (\n                <SignUpForm />\n            )} />\n            <Route exact path=\"/signin\" render={() => (\n                <SigninForm />\n            )} />\n            <Route />\n        </Switch>\n    )\n}\n\nexport default Router"]},"metadata":{},"sourceType":"module"}