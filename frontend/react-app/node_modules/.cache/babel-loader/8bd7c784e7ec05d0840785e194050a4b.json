{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { client } from \"../lib/api/client\";\nimport { useCourFactory } from './useCourFactory';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { Year } from '../store/Year';\nimport { Cour } from '../store/Cour';\nimport { ApiKeyValue } from '../store/ApiKeyValue';\nimport { useMessage } from './message/useMessage';\nexport const useAnimeApiSearch = () => {\n  _s();\n\n  const selectYear = useRecoilValue(Year);\n  const selectCour = useRecoilValue(Cour);\n  const [apiKeyValue, setApiKeyValue] = useRecoilState(ApiKeyValue);\n  const {\n    showMessage\n  } = useMessage();\n  const {\n    current_season\n  } = useCourFactory();\n  const testData = 'Hello';\n  useEffect(() => {\n    const getAnimes = async (year, cour) => {\n      try {\n        const getanime = await client.get('api/annicts/search', {\n          params: {\n            year: apiKeyValue.year,\n            cour: apiKeyValue.cour\n          }\n        });\n        console.log(getanime || 'なし');\n        console.log(apiKeyValue);\n      } catch (error) {\n        showMessage({\n          title: 'アニメ一覧の取得に失敗しました',\n          status: \"error\"\n        });\n      }\n    };\n\n    getAnimes(selectYear, current_season); // return () => {\n    // }    \n  }, []);\n  return {\n    testData\n  };\n};\n\n_s(useAnimeApiSearch, \"TEEUmP/feqN5NjMZ4HwlCAY7v/w=\", false, function () {\n  return [useRecoilValue, useRecoilValue, useRecoilState, useMessage, useCourFactory];\n});","map":{"version":3,"sources":["/usr/src/app/react-app/src/customHooks/useAnimeApiSearch.ts"],"names":["useEffect","client","useCourFactory","useRecoilState","useRecoilValue","Year","Cour","ApiKeyValue","useMessage","useAnimeApiSearch","selectYear","selectCour","apiKeyValue","setApiKeyValue","showMessage","current_season","testData","getAnimes","year","cour","getanime","get","params","console","log","error","title","status"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,OAA1B;AAEA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,SAASC,cAAT,EAAyBC,cAAzB,QAA+C,QAA/C;AACA,SAASC,IAAT,QAAqB,eAArB;AACA,SAASC,IAAT,QAAqB,eAArB;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,UAAT,QAA2B,sBAA3B;AAEA,OAAO,MAAMC,iBAAiB,GAAG,MAAM;AAAA;;AACnC,QAAMC,UAAU,GAAGN,cAAc,CAACC,IAAD,CAAjC;AACA,QAAMM,UAAU,GAAGP,cAAc,CAACE,IAAD,CAAjC;AACA,QAAM,CAAEM,WAAF,EAAeC,cAAf,IAAkCV,cAAc,CAACI,WAAD,CAAtD;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAkBN,UAAU,EAAlC;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAqBb,cAAc,EAAzC;AACA,QAAMc,QAAQ,GAAG,OAAjB;AACAhB,EAAAA,SAAS,CAAC,MAAM;AAEZ,UAAMiB,SAAS,GAAG,OAAMC,IAAN,EAAoBC,IAApB,KAAiD;AAC/D,UAAI;AACA,cAAMC,QAAQ,GAAG,MAAMnB,MAAM,CAACoB,GAAP,CAAW,oBAAX,EAAiC;AACpDC,UAAAA,MAAM,EAAE;AACJJ,YAAAA,IAAI,EAAEN,WAAW,CAACM,IADd;AAEJC,YAAAA,IAAI,EAAEP,WAAW,CAACO;AAFd;AAD4C,SAAjC,CAAvB;AAMAI,QAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAQ,IAAI,IAAxB;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAYZ,WAAZ;AAEH,OAVD,CAUE,OAAOa,KAAP,EAAc;AACZX,QAAAA,WAAW,CAAC;AAACY,UAAAA,KAAK,EAAE,iBAAR;AAA2BC,UAAAA,MAAM,EAAE;AAAnC,SAAD,CAAX;AACH;AACH,KAdF;;AAeCV,IAAAA,SAAS,CAACP,UAAD,EAAaK,cAAb,CAAT,CAjBW,CAmBZ;AACA;AACH,GArBQ,EAqBN,EArBM,CAAT;AAwBA,SAAO;AAAEC,IAAAA;AAAF,GAAP;AACH,CAhCM;;GAAMP,iB;UACUL,c,EACAA,c,EACqBD,c,EAChBK,U,EACGN,c","sourcesContent":["import { useEffect } from 'react'\nimport axios from \"axios\"\nimport { client } from \"../lib/api/client\"\nimport { useCourFactory } from './useCourFactory'\nimport { useYearFactory } from './useYearFactory'\nimport { useRecoilState, useRecoilValue } from 'recoil'\nimport { Year } from '../store/Year'\nimport { Cour } from '../store/Cour'\nimport { ApiKeyValue } from '../store/ApiKeyValue'\nimport { useMessage } from './message/useMessage'\n\nexport const useAnimeApiSearch = () => {\n    const selectYear = useRecoilValue(Year)\n    const selectCour = useRecoilValue(Cour)\n    const [ apiKeyValue, setApiKeyValue ] = useRecoilState(ApiKeyValue)\n    const { showMessage } = useMessage()\n    const { current_season } = useCourFactory()\n    const testData = 'Hello'\n    useEffect(() => {\n\n        const getAnimes = async(year: string, cour: string | undefined) => {\n            try {\n                const getanime = await client.get('api/annicts/search', {\n                    params: {\n                        year: apiKeyValue.year,\n                        cour: apiKeyValue.cour\n                    }\n                })\n                console.log(getanime || 'なし');\n                console.log(apiKeyValue);\n            \n            } catch (error) {\n                showMessage({title: 'アニメ一覧の取得に失敗しました', status: \"error\"})\n            }\n         }\n         getAnimes(selectYear, current_season)\n\n        // return () => {\n        // }    \n    }, [])    \n\n\n    return { testData }\n}"]},"metadata":{},"sourceType":"module"}