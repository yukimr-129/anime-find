{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback, useEffect } from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport { client } from \"lib/api/client\";\nimport { AnimeLists } from \"store/AnimeLists\";\nimport { ApiKeyValue } from \"store/ApiKeyValue\";\nimport { HasMore } from \"store/loding/HasMore\";\nimport { useMessage } from \"./message/useMessage\";\nexport const useNextAnimes = () => {\n  _s();\n\n  const [isFetching, setIsFetching] = useState(false);\n  const [hasMore, setHasMore] = useRecoilState(HasMore);\n  const [apiKeyValue, setApiKeyValue] = useRecoilState(ApiKeyValue);\n  const [animeLists, setAnimeLists] = useRecoilState(AnimeLists);\n  const {\n    showMessage\n  } = useMessage();\n  const getNextAnimes = useCallback(async page => {\n    try {\n      setIsFetching(true);\n      const filter_season = `${apiKeyValue.year}-${apiKeyValue.cour}`;\n      const getanime = await client.get('/api/annicts/search', {\n        params: {\n          filter_season,\n          page\n        }\n      });\n      const animeDate = getanime.data.works;\n      console.log(getanime);\n\n      if (animeDate.length < 1) {\n        setHasMore(false);\n        return;\n      }\n\n      const distinctList = new Set([...animeLists, ...animeDate]); // const list: AnnictApiType[] = [...distinctList]\n\n      setAnimeLists([...distinctList]);\n      console.log(animeLists);\n      console.log(getanime);\n    } catch (error) {\n      showMessage({\n        title: 'アニメ一覧の取得に失敗しました',\n        status: \"error\"\n      });\n    } finally {\n      setIsFetching(false);\n    }\n  }, [animeLists]);\n  useEffect(() => {\n    let isMunted = true;\n    isMunted && getNextAnimes(1);\n    return () => {\n      isMunted = false;\n    };\n  }, []);\n  return {\n    getNextAnimes,\n    isFetching\n  };\n};\n\n_s(useNextAnimes, \"KPHY6DU+Lsxcl9+2Mirp4PLnOQ8=\", false, function () {\n  return [useRecoilState, useRecoilState, useRecoilState, useMessage];\n});","map":{"version":3,"sources":["/usr/src/app/react-app/src/customHooks/useNextAnimes.ts"],"names":["useState","useCallback","useEffect","useRecoilState","client","AnimeLists","ApiKeyValue","HasMore","useMessage","useNextAnimes","isFetching","setIsFetching","hasMore","setHasMore","apiKeyValue","setApiKeyValue","animeLists","setAnimeLists","showMessage","getNextAnimes","page","filter_season","year","cour","getanime","get","params","animeDate","data","works","console","log","length","distinctList","Set","error","title","status","isMunted"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,SAAhC,QAAiD,OAAjD;AAEA,SAASC,cAAT,QAA+B,QAA/B;AAEA,SAASC,MAAT,QAAuB,gBAAvB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,WAAT,QAA4B,mBAA5B;AACA,SAASC,OAAT,QAAwB,sBAAxB;AAEA,SAASC,UAAT,QAA2B,sBAA3B;AAOA,OAAO,MAAMC,aAA6B,GAAG,MAAM;AAAA;;AAC/C,QAAM,CAAEC,UAAF,EAAcC,aAAd,IAAiCX,QAAQ,CAAC,KAAD,CAA/C;AACA,QAAM,CAAEY,OAAF,EAAWC,UAAX,IAA0BV,cAAc,CAACI,OAAD,CAA9C;AACA,QAAM,CAAEO,WAAF,EAAeC,cAAf,IAAkCZ,cAAc,CAACG,WAAD,CAAtD;AACA,QAAM,CAAEU,UAAF,EAAcC,aAAd,IAAgCd,cAAc,CAACE,UAAD,CAApD;AACA,QAAM;AAAEa,IAAAA;AAAF,MAAkBV,UAAU,EAAlC;AAEA,QAAMW,aAAa,GAAGlB,WAAW,CAAC,MAAMmB,IAAN,IAAuB;AACrD,QAAI;AACAT,MAAAA,aAAa,CAAC,IAAD,CAAb;AACA,YAAMU,aAAa,GAAI,GAAEP,WAAW,CAACQ,IAAK,IAAGR,WAAW,CAACS,IAAK,EAA9D;AACA,YAAMC,QAAQ,GAAG,MAAMpB,MAAM,CAACqB,GAAP,CAAW,qBAAX,EAAkC;AACrDC,QAAAA,MAAM,EAAE;AACJL,UAAAA,aADI;AAEJD,UAAAA;AAFI;AAD6C,OAAlC,CAAvB;AAMA,YAAMO,SAA0B,GAAGH,QAAQ,CAACI,IAAT,CAAcC,KAAjD;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYP,QAAZ;;AAEA,UAAIG,SAAS,CAACK,MAAV,GAAmB,CAAvB,EAA0B;AACtBnB,QAAAA,UAAU,CAAC,KAAD,CAAV;AACA;AACH;;AACD,YAAMoB,YAAY,GAAG,IAAIC,GAAJ,CAAQ,CAAC,GAAGlB,UAAJ,EAAgB,GAAGW,SAAnB,CAAR,CAArB,CAhBA,CAiBA;;AAEAV,MAAAA,aAAa,CAAC,CAAC,GAAGgB,YAAJ,CAAD,CAAb;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAYf,UAAZ;AACAc,MAAAA,OAAO,CAACC,GAAR,CAAYP,QAAZ;AACH,KAtBD,CAsBE,OAAOW,KAAP,EAAc;AACZjB,MAAAA,WAAW,CAAC;AAACkB,QAAAA,KAAK,EAAE,iBAAR;AAA2BC,QAAAA,MAAM,EAAE;AAAnC,OAAD,CAAX;AACH,KAxBD,SAwBU;AACN1B,MAAAA,aAAa,CAAC,KAAD,CAAb;AACH;AACJ,GA5BgC,EA4B/B,CAACK,UAAD,CA5B+B,CAAjC;AA8BAd,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIoC,QAAQ,GAAG,IAAf;AACAA,IAAAA,QAAQ,IAAInB,aAAa,CAAC,CAAD,CAAzB;AACA,WAAO,MAAM;AACTmB,MAAAA,QAAQ,GAAG,KAAX;AACH,KAFD;AAGH,GANQ,EAMN,EANM,CAAT;AAQA,SAAO;AAAEnB,IAAAA,aAAF;AAAiBT,IAAAA;AAAjB,GAAP;AACH,CA9CM;;GAAMD,a;UAEuBN,c,EACQA,c,EACFA,c,EACdK,U","sourcesContent":["import { useState, useCallback, useEffect } from \"react\";\n\nimport { useRecoilState } from \"recoil\";\n\nimport { client } from \"lib/api/client\";\nimport { AnimeLists } from \"store/AnimeLists\";\nimport { ApiKeyValue } from \"store/ApiKeyValue\";\nimport { HasMore } from \"store/loding/HasMore\";\nimport { AnnictApiType } from \"types/api/AnnictApiType\";\nimport { useMessage } from \"./message/useMessage\";\n\n\ntype AnimeApiSearch = () => {\n    getNextAnimes: (page: number) => void;\n    isFetching: boolean;\n}\nexport const useNextAnimes: AnimeApiSearch = () => {\n    const [ isFetching, setIsFetching ]  = useState(false);\n    const [ hasMore, setHasMore ] = useRecoilState(HasMore)\n    const [ apiKeyValue, setApiKeyValue ] = useRecoilState(ApiKeyValue)\n    const [ animeLists, setAnimeLists ] = useRecoilState(AnimeLists)\n    const { showMessage } = useMessage()\n\n    const getNextAnimes = useCallback(async(page: number) => {\n        try {\n            setIsFetching(true);\n            const filter_season = `${apiKeyValue.year}-${apiKeyValue.cour}`\n            const getanime = await client.get('/api/annicts/search', {\n                params: {\n                    filter_season,\n                    page\n                }\n            })\n            const animeDate: AnnictApiType[] = getanime.data.works\n            console.log(getanime);\n            \n            if (animeDate.length < 1) {\n                setHasMore(false);\n                return;\n            }\n            const distinctList = new Set([...animeLists, ...animeDate])\n            // const list: AnnictApiType[] = [...distinctList]\n            \n            setAnimeLists([...distinctList])\n            console.log(animeLists);\n            console.log(getanime);\n        } catch (error) {\n            showMessage({title: 'アニメ一覧の取得に失敗しました', status: \"error\"})\n        } finally {\n            setIsFetching(false);\n        }    \n    },[animeLists])\n\n    useEffect(() => {\n        let isMunted = true\n        isMunted && getNextAnimes(1)\n        return () => {\n            isMunted = false\n        }\n    }, [])\n\n    return { getNextAnimes, isFetching }\n}\n\n"]},"metadata":{},"sourceType":"module"}