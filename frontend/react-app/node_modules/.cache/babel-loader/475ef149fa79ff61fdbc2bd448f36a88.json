{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/react-app/src/components/pages/auth/EditPassword.tsx\",\n    _s = $RefreshSig$();\n\nimport { Box, Button, Divider, Flex, FormControl, FormErrorMessage, FormLabel, Heading, Input, VStack } from \"@chakra-ui/react\";\nimport { useMessage } from \"customHooks/message/useMessage\";\nimport { updatePassword } from \"lib/api/auth/auth\";\nimport { useForm } from \"react-hook-form\";\nimport { BeatLoader } from \"react-spinners\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst EditPassword = () => {\n  _s();\n\n  var _errors$passwordConfi, _errors$passwordConfi2;\n\n  const {\n    register,\n    handleSubmit,\n    formState: {\n      errors\n    },\n    formState,\n    getValues\n  } = useForm({\n    mode: 'all',\n    defaultValues: {\n      password: '',\n      passwordConfirmation: ''\n    }\n  });\n  const {\n    showMessage\n  } = useMessage();\n\n  const handleUpdatePassword = async data => {\n    const params = {\n      password: data.password,\n      passwordConfirmation: data.passwordConfirmation\n    };\n    const {\n      password,\n      passwordConfirmation\n    } = data;\n    const formData = new FormData();\n    formData.set('password', password);\n    formData.set('password_confirmation', passwordConfirmation);\n\n    try {\n      const res = await updatePassword(formData);\n      console.log(res); // if () {\n\n      const user = await getCurrentUser();\n      setCurrentUser(user === null || user === void 0 ? void 0 : user.data.data); // } else {\n      // }\n    } catch (error) {\n      console.log(error);\n      showMessage({\n        title: 'プロフィールの更新に失敗しました。',\n        status: 'error'\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Flex, {\n      justify: \"center\",\n      align: \"center\",\n      h: \"100%\",\n      mt: \"90px\",\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        bg: \"white\",\n        w: \"2xl\",\n        p: 4,\n        borderRadius: \"10px\",\n        shadow: \"md\",\n        children: [/*#__PURE__*/_jsxDEV(Heading, {\n          as: \"h1\",\n          size: \"lg\",\n          textAlign: \"center\",\n          children: \"\\u30D1\\u30B9\\u30EF\\u30FC\\u30C9\\u5909\\u66F4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {\n          my: 4\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit(handleUpdatePassword),\n          children: /*#__PURE__*/_jsxDEV(VStack, {\n            spacing: 5,\n            children: [/*#__PURE__*/_jsxDEV(FormControl, {\n              id: \"password\",\n              isRequired: true,\n              isInvalid: errors.password ? true : false,\n              children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                children: \"\\u65B0\\u3057\\u3044\\u30D1\\u30B9\\u30EF\\u30FC\\u30C9\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 53,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                type: \"password\",\n                ...register('password', {\n                  required: 'パスワードは必須です。',\n                  pattern: {\n                    value: /^(?=.*?[a-z])(?=.*?[A-Z])(?=.*?\\d)[a-zA-Z\\d]{8,100}$/,\n                    message: '半角英小文字大文字数字をそれぞれ1種類以上含む8文字以上で設定してください。'\n                  }\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 54,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(FormErrorMessage, {\n                children: errors.password && errors.password.message\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 58,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n              id: \"passwordConfirmation\",\n              isRequired: true,\n              isInvalid: errors.passwordConfirmation ? true : false,\n              children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                children: \"\\u65B0\\u3057\\u3044\\u30D1\\u30B9\\u30EF\\u30FC\\u30C9\\u78BA\\u8A8D\\u7528\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                type: \"password\",\n                ...register('passwordConfirmation', {\n                  required: true,\n                  validate: value => value === getValues('password')\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(FormErrorMessage, {\n                children: [((_errors$passwordConfi = errors.passwordConfirmation) === null || _errors$passwordConfi === void 0 ? void 0 : _errors$passwordConfi.type) === 'required' && '確認用パスワードは必須です。', ((_errors$passwordConfi2 = errors.passwordConfirmation) === null || _errors$passwordConfi2 === void 0 ? void 0 : _errors$passwordConfi2.type) === 'validate' && \"確認用パスワードが一致しません。\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              disabled: !formState.isValid,\n              isLoading: formState.isSubmitting,\n              w: \"100%\",\n              color: \"white\",\n              bg: \"blue.400\",\n              _hover: {\n                opacity: 0.8\n              },\n              spinner: /*#__PURE__*/_jsxDEV(BeatLoader, {\n                size: 8,\n                color: \"white\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 186\n              }, this),\n              children: \"\\u66F4\\u65B0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(EditPassword, \"cLVZrAVv8Cf+DlaDkirOAFARfXo=\", false, function () {\n  return [useForm, useMessage];\n});\n\n_c = EditPassword;\nexport default EditPassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditPassword\");","map":{"version":3,"sources":["/usr/src/app/react-app/src/components/pages/auth/EditPassword.tsx"],"names":["Box","Button","Divider","Flex","FormControl","FormErrorMessage","FormLabel","Heading","Input","VStack","useMessage","updatePassword","useForm","BeatLoader","EditPassword","register","handleSubmit","formState","errors","getValues","mode","defaultValues","password","passwordConfirmation","showMessage","handleUpdatePassword","data","params","formData","FormData","set","res","console","log","user","getCurrentUser","setCurrentUser","error","title","status","required","pattern","value","message","validate","type","isValid","isSubmitting","opacity"],"mappings":";;;AAAA,SAASA,GAAT,EAAcC,MAAd,EAA8BC,OAA9B,EAAuCC,IAAvC,EAA6CC,WAA7C,EAA0DC,gBAA1D,EAA4EC,SAA5E,EAAuFC,OAAvF,EAAgGC,KAAhG,EAAuGC,MAAvG,QAAqH,kBAArH;AACA,SAASC,UAAT,QAA2B,gCAA3B;AACA,SAASC,cAAT,QAA+B,mBAA/B;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,UAAT,QAA2B,gBAA3B;;;;AAGA,MAAMC,YAAY,GAAG,MAAM;AAAA;;AAAA;;AACvB,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,YAAZ;AAA0BC,IAAAA,SAAS,EAAE;AAACC,MAAAA;AAAD,KAArC;AAA+CD,IAAAA,SAA/C;AAA0DE,IAAAA;AAA1D,MAAwEP,OAAO,CAAqB;AACtGQ,IAAAA,IAAI,EAAE,KADgG;AAEtGC,IAAAA,aAAa,EAAE;AACXC,MAAAA,QAAQ,EAAE,EADC;AAEXC,MAAAA,oBAAoB,EAAE;AAFX;AAFuF,GAArB,CAArF;AAQA,QAAM;AAAEC,IAAAA;AAAF,MAAkBd,UAAU,EAAlC;;AAEA,QAAMe,oBAAoB,GAAG,MAAMC,IAAN,IAAmC;AAC5D,UAAMC,MAA0B,GAAG;AAC/BL,MAAAA,QAAQ,EAAEI,IAAI,CAACJ,QADgB;AAE/BC,MAAAA,oBAAoB,EAAEG,IAAI,CAACH;AAFI,KAAnC;AAIA,UAAM;AAAED,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAAqCG,IAA3C;AACA,UAAME,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAD,IAAAA,QAAQ,CAACE,GAAT,CAAa,UAAb,EAAyBR,QAAzB;AACAM,IAAAA,QAAQ,CAACE,GAAT,CAAa,uBAAb,EAAsCP,oBAAtC;;AACA,QAAI;AACA,YAAMQ,GAAG,GAAG,MAAMpB,cAAc,CAACiB,QAAD,CAAhC;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ,EAFA,CAIA;;AACI,YAAMG,IAAI,GAAG,MAAMC,cAAc,EAAjC;AACAC,MAAAA,cAAc,CAACF,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAER,IAAN,CAAWA,IAAZ,CAAd,CANJ,CAOA;AAEA;AACH,KAVD,CAUE,OAAOW,KAAP,EAAc;AACZL,MAAAA,OAAO,CAACC,GAAR,CAAYI,KAAZ;AACAb,MAAAA,WAAW,CAAC;AAACc,QAAAA,KAAK,EAAE,mBAAR;AAA6BC,QAAAA,MAAM,EAAE;AAArC,OAAD,CAAX;AACH;AAEJ,GAxBD;;AAyBA,sBACI;AAAA,2BACI,QAAC,IAAD;AAAM,MAAA,OAAO,EAAC,QAAd;AAAuB,MAAA,KAAK,EAAC,QAA7B;AAAsC,MAAA,CAAC,EAAC,MAAxC;AAA+C,MAAA,EAAE,EAAC,MAAlD;AAAA,6BACI,QAAC,GAAD;AAAK,QAAA,EAAE,EAAC,OAAR;AAAgB,QAAA,CAAC,EAAC,KAAlB;AAAwB,QAAA,CAAC,EAAE,CAA3B;AAA8B,QAAA,YAAY,EAAC,MAA3C;AAAkD,QAAA,MAAM,EAAC,IAAzD;AAAA,gCACI,QAAC,OAAD;AAAS,UAAA,EAAE,EAAC,IAAZ;AAAiB,UAAA,IAAI,EAAC,IAAtB;AAA2B,UAAA,SAAS,EAAC,QAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,OAAD;AAAS,UAAA,EAAE,EAAE;AAAb;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAM,UAAA,QAAQ,EAAEvB,YAAY,CAACS,oBAAD,CAA5B;AAAA,iCACI,QAAC,MAAD;AAAQ,YAAA,OAAO,EAAE,CAAjB;AAAA,oCACI,QAAC,WAAD;AAAa,cAAA,EAAE,EAAC,UAAhB;AAA2B,cAAA,UAAU,MAArC;AAAsC,cAAA,SAAS,EAAEP,MAAM,CAACI,QAAP,GAAkB,IAAlB,GAAyB,KAA1E;AAAA,sCACI,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI,QAAC,KAAD;AACI,gBAAA,IAAI,EAAC,UADT;AAAA,mBAEQP,QAAQ,CAAC,UAAD,EAAa;AAACyB,kBAAAA,QAAQ,EAAE,aAAX;AAA0BC,kBAAAA,OAAO,EAAE;AAACC,oBAAAA,KAAK,EAAE,sDAAR;AAAgEC,oBAAAA,OAAO,EAAE;AAAzE;AAAnC,iBAAb;AAFhB;AAAA;AAAA;AAAA;AAAA,sBAFJ,eAMI,QAAC,gBAAD;AAAA,0BACKzB,MAAM,CAACI,QAAP,IAAmBJ,MAAM,CAACI,QAAP,CAAgBqB;AADxC;AAAA;AAAA;AAAA;AAAA,sBANJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAWI,QAAC,WAAD;AAAa,cAAA,EAAE,EAAC,sBAAhB;AAAuC,cAAA,UAAU,MAAjD;AAAkD,cAAA,SAAS,EAAEzB,MAAM,CAACK,oBAAP,GAA8B,IAA9B,GAAqC,KAAlG;AAAA,sCACI,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI,QAAC,KAAD;AACG,gBAAA,IAAI,EAAC,UADR;AAAA,mBAEOR,QAAQ,CAAC,sBAAD,EAAyB;AAACyB,kBAAAA,QAAQ,EAAE,IAAX;AAAiBI,kBAAAA,QAAQ,EAAEF,KAAK,IAAIA,KAAK,KAAKvB,SAAS,CAAC,UAAD;AAAvD,iBAAzB;AAFf;AAAA;AAAA;AAAA;AAAA,sBAFJ,eAMI,QAAC,gBAAD;AAAA,2BACK,0BAAAD,MAAM,CAACK,oBAAP,gFAA6BsB,IAA7B,MAAsC,UAAtC,IAAoD,gBADzD,EAEK,2BAAA3B,MAAM,CAACK,oBAAP,kFAA6BsB,IAA7B,MAAsC,UAAtC,IAAoD,kBAFzD;AAAA;AAAA;AAAA;AAAA;AAAA,sBANJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBAXJ,eAsBI,QAAC,MAAD;AAAQ,cAAA,IAAI,EAAC,QAAb;AAAsB,cAAA,QAAQ,EAAE,CAAC5B,SAAS,CAAC6B,OAA3C;AAAoD,cAAA,SAAS,EAAE7B,SAAS,CAAC8B,YAAzE;AAAuF,cAAA,CAAC,EAAC,MAAzF;AAAgG,cAAA,KAAK,EAAC,OAAtG;AAA8G,cAAA,EAAE,EAAC,UAAjH;AAA4H,cAAA,MAAM,EAAE;AAACC,gBAAAA,OAAO,EAAE;AAAV,eAApI;AAAoJ,cAAA,OAAO,eAAE,QAAC,UAAD;AAAY,gBAAA,IAAI,EAAE,CAAlB;AAAqB,gBAAA,KAAK,EAAC;AAA3B;AAAA;AAAA;AAAA;AAAA,sBAA7J;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAtBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAqCH,CAzED;;GAAMlC,Y;UAC4EF,O,EAQtDF,U;;;KATtBI,Y;AA2EN,eAAeA,YAAf","sourcesContent":["import { Box, Button, Center, Divider, Flex, FormControl, FormErrorMessage, FormLabel, Heading, Input, VStack } from \"@chakra-ui/react\"\nimport { useMessage } from \"customHooks/message/useMessage\"\nimport { updatePassword } from \"lib/api/auth/auth\"\nimport { useForm } from \"react-hook-form\"\nimport { BeatLoader } from \"react-spinners\"\nimport { EditPasswordUpdate } from \"types/form/FormInputs\"\n\nconst EditPassword = () => {\n    const { register, handleSubmit, formState: {errors}, formState, getValues } = useForm<EditPasswordUpdate>({\n        mode: 'all',\n        defaultValues: {\n            password: '',\n            passwordConfirmation: ''\n        }\n    })\n\n    const { showMessage } = useMessage()\n\n    const handleUpdatePassword = async(data: EditPasswordUpdate) => {\n        const params: EditPasswordUpdate = {\n            password: data.password,\n            passwordConfirmation: data.passwordConfirmation\n        }\n        const { password, passwordConfirmation } = data\n        const formData = new FormData()\n        formData.set('password', password)\n        formData.set('password_confirmation', passwordConfirmation)\n        try {\n            const res = await updatePassword(formData)\n            console.log(res);\n            \n            // if () {\n                const user = await getCurrentUser()\n                setCurrentUser(user?.data.data)\n            // } else {\n                \n            // }\n        } catch (error) {\n            console.log(error)\n            showMessage({title: 'プロフィールの更新に失敗しました。', status: 'error'})\n        }\n        \n    }\n    return (\n        <>\n            <Flex justify='center' align='center' h='100%' mt='90px'>\n                <Box bg='white' w='2xl' p={4} borderRadius='10px' shadow='md'>\n                    <Heading as='h1' size='lg' textAlign='center'>パスワード変更</Heading>\n                    <Divider my={4}/>\n                    <form onSubmit={handleSubmit(handleUpdatePassword)}>\n                        <VStack spacing={5}>\n                            <FormControl id='password' isRequired isInvalid={errors.password ? true : false}>\n                                <FormLabel>新しいパスワード</FormLabel>\n                                <Input \n                                    type='password'\n                                    {...register('password', {required: 'パスワードは必須です。', pattern: {value: /^(?=.*?[a-z])(?=.*?[A-Z])(?=.*?\\d)[a-zA-Z\\d]{8,100}$/, message: '半角英小文字大文字数字をそれぞれ1種類以上含む8文字以上で設定してください。'}})}\n                                />\n                                <FormErrorMessage>\n                                    {errors.password && errors.password.message}\n                                </FormErrorMessage>\n                            </FormControl>\n                            <FormControl id='passwordConfirmation' isRequired isInvalid={errors.passwordConfirmation ? true : false}>\n                                <FormLabel>新しいパスワード確認用</FormLabel>\n                                <Input \n                                   type='password'\n                                   {...register('passwordConfirmation', {required: true, validate: value => value === getValues('password')})}\n                                   />\n                                <FormErrorMessage>\n                                    {errors.passwordConfirmation?.type === 'required' && '確認用パスワードは必須です。'}\n                                    {errors.passwordConfirmation?.type === 'validate' && \"確認用パスワードが一致しません。\"}\n                                </FormErrorMessage>\n                            </FormControl>\n                            <Button type=\"submit\" disabled={!formState.isValid} isLoading={formState.isSubmitting} w='100%' color='white' bg='blue.400' _hover={{opacity: 0.8}} spinner={<BeatLoader size={8} color=\"white\" />}>更新</Button>\n                        </VStack>\n                    </form>\n                </Box>\n            </Flex>\n\n        </>\n    )\n}\n\nexport default EditPassword"]},"metadata":{},"sourceType":"module"}