{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/react-app/src/components/organisms/AnimeCardList.tsx\",\n    _s = $RefreshSig$();\n\nimport { memo, useState, useCallback, useRef } from \"react\";\nimport { Box, Center, Text, Wrap, WrapItem } from \"@chakra-ui/react\";\nimport { useRecoilValue } from \"recoil\";\nimport { useCourFactory } from \"../../customHooks/useCourFactory\";\nimport { Year } from \"../../store/Year\";\nimport AnimeCard from \"../molecules/animeCard/AnimeCard\";\nimport { BeatLoader } from \"react-spinners\";\nimport { HasMore } from \"store/loding/HasMore\";\nimport { useNextAnimes } from \"customHooks/useNextAnimes\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AnimeCardList = /*#__PURE__*/memo(_c = _s(props => {\n  _s();\n\n  // const { animeLists } = props\n  // const [ isFetching, setIsFetching]  = useState(false);\n  // const [ hasMore, setHasMore ] = useState(true)\n  const year = useRecoilValue(Year);\n  const {\n    select_cour\n  } = useCourFactory();\n  const hasMore = useRecoilValue(HasMore); // const [ apiKeyValue, setApiKeyValue ] = useRecoilState(ApiKeyValue)\n  // const [ animeLists, setAnimeLists ] = useRecoilState(AnimeLists)\n\n  const {\n    getNextAnimes,\n    animeLists,\n    isLoading\n  } = useNextAnimes(1); // const loadMore = (page: number) => {\n  //     console.log(page);\n  //     console.log(animeLists.length);\n  //     // animeLists.length < 1 && \n  //     getNextAnimes(page)\n  //     // try {\n  //     //     setIsFetching(true);\n  //     //     const filter_season = `${apiKeyValue.year}-${apiKeyValue.cour}`\n  //     //     const getanime = await client.get('/api/annicts/search', {\n  //     //         params: {\n  //     //             filter_season,\n  //     //             page\n  //     //         }\n  //     //     })\n  //     //     const animeDate: AnnictApiType[] = getanime.data.works\n  //     //     console.log(getanime);\n  //     //     if (animeDate.length < 1) {\n  //     //         setHasMore(false);\n  //     //         return;\n  //     //     }\n  //     //     const distinctList = new Set([...animeLists, ...animeDate])\n  //     //     // const rep = Array.from(s)\n  //     //     const list: AnnictApiType[] = [...distinctList]\n  //     //     // console.log(rep);\n  //     //     setAnimeLists([...list])\n  //     //     console.log(animeLists);\n  //     //     console.log(getanime);\n  //     // } catch (error) {\n  //     //     showMessage({title: 'アニメ一覧の取得に失敗しました', status: \"error\"})\n  //     // } finally {\n  //     //     setIsFetching(false);\n  //     // }\n  // }\n\n  const [page, setPage] = useState(1); // ref対象を監視して表示終わったら、ページ番号を増やす\n\n  const observer = useRef();\n  const lastMovieElementRef = useCallback(node => {\n    if (isLoading) return;\n    observer.current && observer.current.disconnect();\n    observer.current = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting && hasMore) {\n        setPage(prevPage => prevPage + 1);\n      }\n    });\n  }, [hasMore, isLoading]);\n\n  const loder = /*#__PURE__*/_jsxDEV(Center, {\n    children: /*#__PURE__*/_jsxDEV(BeatLoader, {\n      size: 10,\n      color: \"black\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 27\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 19\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      justify: \"center\",\n      align: \"center\",\n      m: \"30px 10px 0\",\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        fontWeight: \"700\",\n        fontSize: \"1.17em\",\n        children: [\"\\u2015 \", year, select_cour, \" \\u2015\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), animeLists ? /*#__PURE__*/_jsxDEV(Wrap, {\n      p: {\n        base: 3,\n        md: 4\n      },\n      w: \"100%\",\n      spacing: 5,\n      justify: \"center\",\n      align: \"center\",\n      children: [console.log(animeLists), animeLists.map((animeList, index) => /*#__PURE__*/_jsxDEV(WrapItem, {\n        children: /*#__PURE__*/_jsxDEV(AnimeCard, {\n          animeList: animeList\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 33\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 29\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }, this) : null]\n  }, void 0, true);\n}, \"dq+Nf/aasdrHs5TZS3UHMvzcfvM=\", false, function () {\n  return [useRecoilValue, useCourFactory, useRecoilValue, useNextAnimes];\n}));\n_c2 = AnimeCardList;\nexport default AnimeCardList;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AnimeCardList$memo\");\n$RefreshReg$(_c2, \"AnimeCardList\");","map":{"version":3,"sources":["/usr/src/app/react-app/src/components/organisms/AnimeCardList.tsx"],"names":["memo","useState","useCallback","useRef","Box","Center","Text","Wrap","WrapItem","useRecoilValue","useCourFactory","Year","AnimeCard","BeatLoader","HasMore","useNextAnimes","AnimeCardList","props","year","select_cour","hasMore","getNextAnimes","animeLists","isLoading","page","setPage","observer","lastMovieElementRef","node","current","disconnect","IntersectionObserver","entries","isIntersecting","prevPage","loder","base","md","console","log","map","animeList","index"],"mappings":"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","sourcesContent":["import { memo, useState, useCallback, useRef } from \"react\"\n\nimport { Box, Center, Text, Wrap, WrapItem } from \"@chakra-ui/react\"\nimport { VFC } from \"react\"\nimport { useRecoilState, useRecoilValue } from \"recoil\"\nimport InfiniteScroll  from \"react-infinite-scroller\"\n\nimport { useCourFactory } from \"../../customHooks/useCourFactory\"\nimport { Year } from \"../../store/Year\"\nimport { AnnictApiType } from \"../../types/api/AnnictApiType\"\nimport AnimeCard from \"../molecules/animeCard/AnimeCard\"\nimport { useAnimeApiSearch } from \"customHooks/useAnimeApiSearch\"\nimport { client } from \"lib/api/client\"\nimport { ApiKeyValue } from \"store/ApiKeyValue\"\nimport { AnimeLists } from \"store/AnimeLists\"\nimport { BeatLoader } from \"react-spinners\"\nimport { HasMore } from \"store/loding/HasMore\"\nimport { useMessage } from \"customHooks/message/useMessage\"\nimport { useNextAnimes } from \"customHooks/useNextAnimes\"\n\ntype Props = {\n    animeLists: AnnictApiType[];\n}\n\nconst AnimeCardList: VFC<Props> = memo((props) => {\n    // const { animeLists } = props\n    // const [ isFetching, setIsFetching]  = useState(false);\n    // const [ hasMore, setHasMore ] = useState(true)\n    const year = useRecoilValue(Year)\n    const { select_cour } = useCourFactory()\n    const hasMore = useRecoilValue(HasMore)\n    // const [ apiKeyValue, setApiKeyValue ] = useRecoilState(ApiKeyValue)\n    // const [ animeLists, setAnimeLists ] = useRecoilState(AnimeLists)\n    const { getNextAnimes, animeLists, isLoading } = useNextAnimes(1)\n\n    // const loadMore = (page: number) => {\n    //     console.log(page);\n    //     console.log(animeLists.length);\n    //     // animeLists.length < 1 && \n    //     getNextAnimes(page)\n    //     // try {\n    //     //     setIsFetching(true);\n    //     //     const filter_season = `${apiKeyValue.year}-${apiKeyValue.cour}`\n    //     //     const getanime = await client.get('/api/annicts/search', {\n    //     //         params: {\n    //     //             filter_season,\n    //     //             page\n    //     //         }\n    //     //     })\n    //     //     const animeDate: AnnictApiType[] = getanime.data.works\n    //     //     console.log(getanime);\n            \n    //     //     if (animeDate.length < 1) {\n    //     //         setHasMore(false);\n    //     //         return;\n    //     //     }\n    //     //     const distinctList = new Set([...animeLists, ...animeDate])\n    //     //     // const rep = Array.from(s)\n    //     //     const list: AnnictApiType[] = [...distinctList]\n            \n    //     //     // console.log(rep);\n            \n    //     //     setAnimeLists([...list])\n    //     //     console.log(animeLists);\n    //     //     console.log(getanime);\n    //     // } catch (error) {\n    //     //     showMessage({title: 'アニメ一覧の取得に失敗しました', status: \"error\"})\n    //     // } finally {\n    //     //     setIsFetching(false);\n    //     // }\n        \n    // }\n\n\n    const [ page, setPage ] = useState(1)\n\n     // ref対象を監視して表示終わったら、ページ番号を増やす\n    const observer: any = useRef()\n    const lastMovieElementRef = useCallback((node) => {\n        if (isLoading) return\n        observer.current && observer.current.disconnect()\n\n        observer.current = new IntersectionObserver((entries) => {\n            if(entries[0].isIntersecting && hasMore){\n                setPage((prevPage) => prevPage + 1)\n            }\n        })\n\n        \n\n    }, [hasMore, isLoading])\n\n    const loder = <Center><BeatLoader size={10} color=\"black\" /></Center>\n\n    \n    return (\n        <>\n            <Box justify='center' align='center' m='30px 10px 0'>\n                <Text fontWeight='700' fontSize='1.17em'>\n                    ― {year}{select_cour} ―\n                </Text>\n            </Box>\n            {/* simpleGridに変更⇩ */}\n            {animeLists ? \n                <Wrap p={{base: 3, md: 4}} w='100%' spacing={5} justify='center' align='center'>\n                    {/* <InfiniteScroll loadMore={loadMore} hasMore={!isFetching && hasMore} pageStart={0} loader={loder}> */}\n                        {console.log(animeLists)}\n                        {animeLists.map((animeList, index) => (\n                            <WrapItem key={index}>\n                                <AnimeCard animeList={animeList}/>\n                            </WrapItem>\n                        ))}   \n                    {/* </InfiniteScroll> */}\n                </Wrap>\n                : null }\n        </>\n    )\n})\n\nexport default AnimeCardList"]},"metadata":{},"sourceType":"module"}