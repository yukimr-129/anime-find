{"ast":null,"code":"import { createParser, system } from \"../core\";\nimport { getIsRtl } from \"../utils/directionality\";\n\nvar floatTransform = function floatTransform(value, _, props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var map = {\n    left: \"right\",\n    right: \"left\"\n  };\n  return getIsRtl(props) ? map[value] : value;\n};\n\nvar srOnly = {\n  border: \"0px\",\n  clip: \"rect(0, 0, 0, 0)\",\n  width: \"1px\",\n  height: \"1px\",\n  margin: \"-1px\",\n  padding: \"0px\",\n  overflow: \"hidden\",\n  whiteSpace: \"nowrap\",\n  position: \"absolute\"\n};\nvar srFocusable = {\n  position: \"static\",\n  width: \"auto\",\n  height: \"auto\",\n  clip: \"auto\",\n  padding: \"0\",\n  margin: \"0\",\n  overflow: \"visible\",\n  whiteSpace: \"normal\"\n};\nvar config = {\n  animation: true,\n  appearance: true,\n  visibility: true,\n  userSelect: true,\n  pointerEvents: true,\n  cursor: true,\n  resize: true,\n  objectFit: true,\n  objectPosition: true,\n  float: {\n    property: \"float\",\n    transform: floatTransform\n  },\n  willChange: true,\n  filter: true,\n  clipPath: true,\n  srOnly: {\n    property: \"&\",\n\n    transform(value) {\n      if (value === true) return srOnly;\n      if (value === \"focusable\") return srFocusable;\n      return {};\n    }\n\n  }\n};\nexport var others = system(config);\nexport var othersParser = createParser(config);","map":{"version":3,"sources":["../../../src/config/others.ts"],"names":["floatTransform","props","map","left","right","getIsRtl","srOnly","border","clip","width","height","margin","padding","overflow","whiteSpace","position","srFocusable","config","animation","appearance","visibility","userSelect","pointerEvents","cursor","resize","objectFit","objectPosition","float","property","transform","willChange","filter","clipPath","value","others","system","othersParser","createParser"],"mappings":"AACA,SAAA,YAAA,EAAA,MAAA,QAAA,SAAA;AACA,SAAA,QAAA,QAAA,yBAAA;;AAGA,IAAMA,cAAuC,GAAG,SAA1CA,cAA0C,CAAA,KAAA,EAAA,CAAA,EAAA,KAAA,EAA0B;AAAA,MAAfC,KAAe,KAAA,KAAA,CAAA,EAAA;AAAfA,IAAAA,KAAe,GAAP,EAARA;AAAe;;AACxE,MAAMC,GAAG,GAAG;AAAEC,IAAAA,IAAI,EAAN,OAAA;AAAiBC,IAAAA,KAAK,EAAE;AAAxB,GAAZ;AACA,SAAOC,QAAQ,CAARA,KAAQ,CAARA,GAAkBH,GAAG,CAArBG,KAAqB,CAArBA,GAAP,KAAA;AAFF,CAAA;;AAKA,IAAMC,MAAM,GAAG;AACbC,EAAAA,MAAM,EADO,KAAA;AAEbC,EAAAA,IAAI,EAFS,kBAAA;AAGbC,EAAAA,KAAK,EAHQ,KAAA;AAIbC,EAAAA,MAAM,EAJO,KAAA;AAKbC,EAAAA,MAAM,EALO,MAAA;AAMbC,EAAAA,OAAO,EANM,KAAA;AAObC,EAAAA,QAAQ,EAPK,QAAA;AAQbC,EAAAA,UAAU,EARG,QAAA;AASbC,EAAAA,QAAQ,EAAE;AATG,CAAf;AAYA,IAAMC,WAAW,GAAG;AAClBD,EAAAA,QAAQ,EADU,QAAA;AAElBN,EAAAA,KAAK,EAFa,MAAA;AAGlBC,EAAAA,MAAM,EAHY,MAAA;AAIlBF,EAAAA,IAAI,EAJc,MAAA;AAKlBI,EAAAA,OAAO,EALW,GAAA;AAMlBD,EAAAA,MAAM,EANY,GAAA;AAOlBE,EAAAA,QAAQ,EAPU,SAAA;AAQlBC,EAAAA,UAAU,EAAE;AARM,CAApB;AAWA,IAAMG,MAAc,GAAG;AACrBC,EAAAA,SAAS,EADY,IAAA;AAErBC,EAAAA,UAAU,EAFW,IAAA;AAGrBC,EAAAA,UAAU,EAHW,IAAA;AAIrBC,EAAAA,UAAU,EAJW,IAAA;AAKrBC,EAAAA,aAAa,EALQ,IAAA;AAMrBC,EAAAA,MAAM,EANe,IAAA;AAOrBC,EAAAA,MAAM,EAPe,IAAA;AAQrBC,EAAAA,SAAS,EARY,IAAA;AASrBC,EAAAA,cAAc,EATO,IAAA;AAUrBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,QAAQ,EADH,OAAA;AAELC,IAAAA,SAAS,EAAE7B;AAFN,GAVc;AAcrB8B,EAAAA,UAAU,EAdW,IAAA;AAerBC,EAAAA,MAAM,EAfe,IAAA;AAgBrBC,EAAAA,QAAQ,EAhBa,IAAA;AAiBrB1B,EAAAA,MAAM,EAAE;AACNsB,IAAAA,QAAQ,EADF,GAAA;;AAENC,IAAAA,SAAS,CAAA,KAAA,EAAQ;AACf,UAAII,KAAK,KAAT,IAAA,EAAoB,OAAA,MAAA;AACpB,UAAIA,KAAK,KAAT,WAAA,EAA2B,OAAA,WAAA;AAC3B,aAAA,EAAA;AACD;;AANK;AAjBa,CAAvB;AA2FA,OAAO,IAAMC,MAAM,GAAGC,MAAM,CAArB,MAAqB,CAArB;AACP,OAAO,IAAMC,YAAY,GAAGC,YAAY,CAAjC,MAAiC,CAAjC","sourcesContent":["import * as CSS from \"csstype\"\nimport { Config, createParser, PropConfig, system } from \"../core\"\nimport { getIsRtl } from \"../utils/directionality\"\nimport { Length, ResponsiveValue } from \"../utils\"\n\nconst floatTransform: PropConfig[\"transform\"] = (value, _, props = {}) => {\n  const map = { left: \"right\", right: \"left\" }\n  return getIsRtl(props) ? map[value] : value\n}\n\nconst srOnly = {\n  border: \"0px\",\n  clip: \"rect(0, 0, 0, 0)\",\n  width: \"1px\",\n  height: \"1px\",\n  margin: \"-1px\",\n  padding: \"0px\",\n  overflow: \"hidden\",\n  whiteSpace: \"nowrap\",\n  position: \"absolute\",\n}\n\nconst srFocusable = {\n  position: \"static\",\n  width: \"auto\",\n  height: \"auto\",\n  clip: \"auto\",\n  padding: \"0\",\n  margin: \"0\",\n  overflow: \"visible\",\n  whiteSpace: \"normal\",\n}\n\nconst config: Config = {\n  animation: true,\n  appearance: true,\n  visibility: true,\n  userSelect: true,\n  pointerEvents: true,\n  cursor: true,\n  resize: true,\n  objectFit: true,\n  objectPosition: true,\n  float: {\n    property: \"float\",\n    transform: floatTransform,\n  },\n  willChange: true,\n  filter: true,\n  clipPath: true,\n  srOnly: {\n    property: \"&\",\n    transform(value) {\n      if (value === true) return srOnly\n      if (value === \"focusable\") return srFocusable\n      return {}\n    },\n  },\n}\n\nexport interface OtherProps {\n  /**\n   * The CSS `animation` property\n   */\n  animation?: ResponsiveValue<CSS.Property.Animation>\n  /**\n   * The CSS `appearance` property\n   */\n  appearance?: ResponsiveValue<CSS.Property.Appearance>\n  /**\n   * The CSS `visibility` property\n   */\n  visibility?: ResponsiveValue<CSS.Property.Visibility>\n  /**\n   * The CSS `user-select` property\n   */\n  userSelect?: ResponsiveValue<CSS.Property.UserSelect>\n  /**\n   * The CSS `pointer-events` property\n   */\n  pointerEvents?: ResponsiveValue<CSS.Property.PointerEvents>\n  /**\n   * The CSS `cursor` property\n   */\n  cursor?: ResponsiveValue<CSS.Property.Cursor>\n  /**\n   * The CSS `resize` property\n   */\n  resize?: ResponsiveValue<CSS.Property.Resize>\n  /**\n   * The CSS `object-fit` property\n   */\n  objectFit?: ResponsiveValue<CSS.Property.ObjectFit>\n  /**\n   * The CSS `object-position` property\n   */\n  objectPosition?: ResponsiveValue<CSS.Property.ObjectPosition<Length>>\n  /**\n   * The CSS `float` property\n   */\n  float?: ResponsiveValue<CSS.Property.Float>\n  /**\n   * The CSS `will-change` property\n   */\n  willChange?: ResponsiveValue<CSS.Property.WillChange>\n  /**\n   * The CSS `filter` property\n   */\n  filter?: ResponsiveValue<CSS.Property.Filter>\n  /**\n   * If `true`, hide an element visually without hiding it from screen readers.\n   *\n   * If `focusable`, the sr-only styles will be undone, making the element visible\n   * to sighted users as well as screen readers.\n   */\n  srOnly?: true | \"focusable\"\n  /**\n   * The CSS `clip-path` property.\n   *\n   * It creates a clipping region that sets what part of an element should be shown.\n   */\n  clipPath?: ResponsiveValue<CSS.Property.ClipPath>\n}\n\nexport const others = system(config)\nexport const othersParser = createParser(config)\n"]},"metadata":{},"sourceType":"module"}