{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/react-app/src/components/organisms/AnimeCardList.tsx\",\n    _s = $RefreshSig$();\n\nimport { memo } from \"react\";\nimport { Box, Text, Wrap, WrapItem } from \"@chakra-ui/react\";\nimport { useRecoilValue } from \"recoil\";\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport { useCourFactory } from \"../../customHooks/useCourFactory\";\nimport { Year } from \"../../store/Year\";\nimport AnimeCard from \"../molecules/animeCard/AnimeCard\";\nimport { useAnimeApiSearch } from \"customHooks/useAnimeApiSearch\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AnimeCardList = /*#__PURE__*/memo(_c = _s(props => {\n  _s();\n\n  const [hasMore, setHasMore] = useState(true);\n  const {\n    animeLists\n  } = props;\n  const year = useRecoilValue(Year);\n  const {\n    select_cour\n  } = useCourFactory();\n  const {\n    getAnimes\n  } = useAnimeApiSearch();\n\n  const loadMore = async page => {\n    console.log(page); // const getanime = await client.get('/api/annicts/search', {\n    //     params: {\n    //         page\n    //     }\n    // })\n\n    const res = getAnimes(page); // console.log(res);\n\n    if (data.length < 1) {\n      setHasMore(false);\n      return;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      justify: \"center\",\n      align: \"center\",\n      m: \"30px 10px 0\",\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        fontWeight: \"700\",\n        fontSize: \"1.17em\",\n        children: [\"\\u2015 \", year, select_cour, \" \\u2015\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), animeLists ? /*#__PURE__*/_jsxDEV(Wrap, {\n      p: {\n        base: 3,\n        md: 4\n      },\n      w: \"100%\",\n      spacing: 5,\n      justify: \"center\",\n      align: \"center\",\n      children: /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n        loadMore: loadMore,\n        hasMore: true,\n        children: animeLists.map((animeList, index) => /*#__PURE__*/_jsxDEV(WrapItem, {\n          children: /*#__PURE__*/_jsxDEV(AnimeCard, {\n            animeList: animeList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 33\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }, this) : null]\n  }, void 0, true);\n}, \"l/x/pNyxmAYFp2vTwfjY7WkHWWs=\", false, function () {\n  return [useRecoilValue, useCourFactory, useAnimeApiSearch];\n}));\n_c2 = AnimeCardList;\nexport default AnimeCardList;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AnimeCardList$memo\");\n$RefreshReg$(_c2, \"AnimeCardList\");","map":{"version":3,"sources":["/usr/src/app/react-app/src/components/organisms/AnimeCardList.tsx"],"names":["memo","Box","Text","Wrap","WrapItem","useRecoilValue","InfiniteScroll","useCourFactory","Year","AnimeCard","useAnimeApiSearch","AnimeCardList","props","hasMore","setHasMore","useState","animeLists","year","select_cour","getAnimes","loadMore","page","console","log","res","data","length","base","md","map","animeList","index"],"mappings":";;;AAAA,SAASA,IAAT,QAAqB,OAArB;AAEA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,QAA1B,QAA0C,kBAA1C;AAEA,SAASC,cAAT,QAA+B,QAA/B;AACA,OAAOC,cAAP,MAA4B,yBAA5B;AAEA,SAASC,cAAT,QAA+B,kCAA/B;AACA,SAASC,IAAT,QAAqB,kBAArB;AAEA,OAAOC,SAAP,MAAsB,kCAAtB;AACA,SAASC,iBAAT,QAAkC,+BAAlC;;;AAQA,MAAMC,aAAyB,gBAAGX,IAAI,SAAEY,KAAD,IAAW;AAAA;;AAC9C,QAAM,CAAEC,OAAF,EAAWC,UAAX,IAA0BC,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAiBJ,KAAvB;AACA,QAAMK,IAAI,GAAGZ,cAAc,CAACG,IAAD,CAA3B;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAkBX,cAAc,EAAtC;AACA,QAAM;AAAEY,IAAAA;AAAF,MAAgBT,iBAAiB,EAAvC;;AAEA,QAAMU,QAAQ,GAAG,MAAMC,IAAN,IAAuB;AACpCC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ,EADoC,CAEpC;AACA;AACA;AACA;AACA;;AACA,UAAMG,GAAG,GAAGL,SAAS,CAACE,IAAD,CAArB,CAPoC,CAQpC;;AAEA,QAAII,IAAI,CAACC,MAAL,GAAc,CAAlB,EAAqB;AACjBZ,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA;AACH;AAGJ,GAhBD;;AAkBA,sBACI;AAAA,4BACI,QAAC,GAAD;AAAK,MAAA,OAAO,EAAC,QAAb;AAAsB,MAAA,KAAK,EAAC,QAA5B;AAAqC,MAAA,CAAC,EAAC,aAAvC;AAAA,6BACI,QAAC,IAAD;AAAM,QAAA,UAAU,EAAC,KAAjB;AAAuB,QAAA,QAAQ,EAAC,QAAhC;AAAA,8BACOG,IADP,EACaC,WADb;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,EAOKF,UAAU,gBACP,QAAC,IAAD;AAAM,MAAA,CAAC,EAAE;AAACW,QAAAA,IAAI,EAAE,CAAP;AAAUC,QAAAA,EAAE,EAAE;AAAd,OAAT;AAA2B,MAAA,CAAC,EAAC,MAA7B;AAAoC,MAAA,OAAO,EAAE,CAA7C;AAAgD,MAAA,OAAO,EAAC,QAAxD;AAAiE,MAAA,KAAK,EAAC,QAAvE;AAAA,6BACI,QAAC,cAAD;AAAgB,QAAA,QAAQ,EAAER,QAA1B;AAAoC,QAAA,OAAO,EAAE,IAA7C;AAAA,kBACKJ,UAAU,CAACa,GAAX,CAAe,CAACC,SAAD,EAAYC,KAAZ,kBACZ,QAAC,QAAD;AAAA,iCACI,QAAC,SAAD;AAAW,YAAA,SAAS,EAAED;AAAtB;AAAA;AAAA;AAAA;AAAA;AADJ,WAAeC,KAAf;AAAA;AAAA;AAAA;AAAA,gBADH;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADO,GAUL,IAjBV;AAAA,kBADJ;AAqBH,CA9CqC;AAAA,UAGrB1B,cAHqB,EAIVE,cAJU,EAKZG,iBALY;AAAA,GAAtC;MAAMC,a;AAgDN,eAAeA,aAAf","sourcesContent":["import { memo } from \"react\"\n\nimport { Box, Text, Wrap, WrapItem } from \"@chakra-ui/react\"\nimport { VFC } from \"react\"\nimport { useRecoilValue } from \"recoil\"\nimport InfiniteScroll  from \"react-infinite-scroller\"\n\nimport { useCourFactory } from \"../../customHooks/useCourFactory\"\nimport { Year } from \"../../store/Year\"\nimport { AnnictApiType } from \"../../types/api/AnnictApiType\"\nimport AnimeCard from \"../molecules/animeCard/AnimeCard\"\nimport { useAnimeApiSearch } from \"customHooks/useAnimeApiSearch\"\nimport { client } from \"lib/api/client\"\n\ntype Props = {\n    animeLists: AnnictApiType[];\n}\n\n\nconst AnimeCardList: VFC<Props> = memo((props) => {\n    const [ hasMore, setHasMore ] = useState(true)\n    const { animeLists } = props\n    const year = useRecoilValue(Year)\n    const { select_cour } = useCourFactory()\n    const { getAnimes } = useAnimeApiSearch()\n\n    const loadMore = async(page: number) => {\n        console.log(page);\n        // const getanime = await client.get('/api/annicts/search', {\n        //     params: {\n        //         page\n        //     }\n        // })\n        const res = getAnimes(page)\n        // console.log(res);\n\n        if (data.length < 1) {\n            setHasMore(false);\n            return;\n        }\n        \n        \n    }\n    \n    return (\n        <>\n            <Box justify='center' align='center' m='30px 10px 0'>\n                <Text fontWeight='700' fontSize='1.17em'>\n                    ― {year}{select_cour} ―\n                </Text>\n            </Box>\n            {/* simpleGridに変更⇩ */}\n            {animeLists ? \n                <Wrap p={{base: 3, md: 4}} w='100%' spacing={5} justify='center' align='center'>\n                    <InfiniteScroll loadMore={loadMore} hasMore={true}>\n                        {animeLists.map((animeList, index) => (\n                            <WrapItem key={index}>\n                                <AnimeCard animeList={animeList}/>\n                            </WrapItem>\n                        ))}   \n                    </InfiniteScroll>\n                </Wrap>\n                : null }\n        </>\n    )\n})\n\nexport default AnimeCardList"]},"metadata":{},"sourceType":"module"}