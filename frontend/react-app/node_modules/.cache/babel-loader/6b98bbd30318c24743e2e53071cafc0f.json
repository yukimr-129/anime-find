{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/react-app/src/components/organisms/AnimeCardList.tsx\",\n    _s = $RefreshSig$();\n\nimport { memo } from \"react\";\nimport { Box, Text, Wrap, WrapItem } from \"@chakra-ui/react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport { useCourFactory } from \"../../customHooks/useCourFactory\";\nimport { Year } from \"../../store/Year\";\nimport AnimeCard from \"../molecules/animeCard/AnimeCard\";\nimport { useAnimeApiSearch } from \"customHooks/useAnimeApiSearch\";\nimport { ApiKeyValue } from \"store/ApiKeyValue\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AnimeCardList = /*#__PURE__*/memo(_c = _s(props => {\n  _s();\n\n  // const { animeLists } = props\n  // const [ hasMore, setHasMore ] = useState(true)\n  const year = useRecoilValue(Year);\n  const {\n    select_cour\n  } = useCourFactory();\n  const [apiKeyValue, setApiKeyValue] = useRecoilState(ApiKeyValue); // const [ animeLists, setAnimeLists ] = useRecoilState(AnimeLists)\n\n  const {\n    animeLists,\n    hasMore,\n    isFetching,\n    getAnimes\n  } = useAnimeApiSearch();\n\n  const loadMore = async page => {\n    console.log(page); // const filter_season = `${apiKeyValue.year}-${apiKeyValue.cour}`\n    // const getanime = await client.get('/api/annicts/search', {\n    //     params: {\n    //         filter_season,\n    //         page\n    //     }\n    // })\n    // const animeDate: AnnictApiType[] = getanime.data.works\n    // console.log(getanime);\n    // if (animeDate.length < 1) {\n    //     setHasMore(false);\n    //     return;\n    // }\n    // setAnimeLists([...animeLists, ...animeDate])\n\n    getAnimes(page); // console.log(animeLists);\n    // console.log(res);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      justify: \"center\",\n      align: \"center\",\n      m: \"30px 10px 0\",\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        fontWeight: \"700\",\n        fontSize: \"1.17em\",\n        children: [\"\\u2015 \", year, select_cour, \" \\u2015\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), animeLists ? /*#__PURE__*/_jsxDEV(Wrap, {\n      p: {\n        base: 3,\n        md: 4\n      },\n      w: \"100%\",\n      spacing: 5,\n      justify: \"center\",\n      align: \"center\",\n      children: /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n        loadMore: getAnimes,\n        hasMore: isFetching && hasMore,\n        pageStart: 0,\n        initialLoad: true,\n        children: [console.log(animeLists), animeLists.map((animeList, index) => /*#__PURE__*/_jsxDEV(WrapItem, {\n          children: /*#__PURE__*/_jsxDEV(AnimeCard, {\n            animeList: animeList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 33\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 29\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }, this) : null]\n  }, void 0, true);\n}, \"osdWmyfGrhRzKo5TBvDI181jXhY=\", false, function () {\n  return [useRecoilValue, useCourFactory, useRecoilState, useAnimeApiSearch];\n}));\n_c2 = AnimeCardList;\nexport default AnimeCardList;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AnimeCardList$memo\");\n$RefreshReg$(_c2, \"AnimeCardList\");","map":{"version":3,"sources":["/usr/src/app/react-app/src/components/organisms/AnimeCardList.tsx"],"names":["memo","Box","Text","Wrap","WrapItem","useRecoilState","useRecoilValue","InfiniteScroll","useCourFactory","Year","AnimeCard","useAnimeApiSearch","ApiKeyValue","AnimeCardList","props","year","select_cour","apiKeyValue","setApiKeyValue","animeLists","hasMore","isFetching","getAnimes","loadMore","page","console","log","base","md","map","animeList","index"],"mappings":";;;AAAA,SAASA,IAAT,QAA+B,OAA/B;AAEA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,QAA1B,QAA0C,kBAA1C;AAEA,SAASC,cAAT,EAAyBC,cAAzB,QAA+C,QAA/C;AACA,OAAOC,cAAP,MAA4B,yBAA5B;AAEA,SAASC,cAAT,QAA+B,kCAA/B;AACA,SAASC,IAAT,QAAqB,kBAArB;AAEA,OAAOC,SAAP,MAAsB,kCAAtB;AACA,SAASC,iBAAT,QAAkC,+BAAlC;AAEA,SAASC,WAAT,QAA4B,mBAA5B;;;AAQA,MAAMC,aAAyB,gBAAGb,IAAI,SAAEc,KAAD,IAAW;AAAA;;AAC9C;AACA;AACA,QAAMC,IAAI,GAAGT,cAAc,CAACG,IAAD,CAA3B;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAkBR,cAAc,EAAtC;AACA,QAAM,CAAES,WAAF,EAAeC,cAAf,IAAkCb,cAAc,CAACO,WAAD,CAAtD,CAL8C,CAM9C;;AACA,QAAM;AAAEO,IAAAA,UAAF;AAAcC,IAAAA,OAAd;AAAuBC,IAAAA,UAAvB;AAAmCC,IAAAA;AAAnC,MAAiDX,iBAAiB,EAAxE;;AAEA,QAAMY,QAAQ,GAAG,MAAMC,IAAN,IAAuB;AACpCC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ,EADoC,CAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AACAF,IAAAA,SAAS,CAACE,IAAD,CAAT,CAjBoC,CAkBpC;AACA;AAEH,GArBD;;AAuBA,sBACI;AAAA,4BACI,QAAC,GAAD;AAAK,MAAA,OAAO,EAAC,QAAb;AAAsB,MAAA,KAAK,EAAC,QAA5B;AAAqC,MAAA,CAAC,EAAC,aAAvC;AAAA,6BACI,QAAC,IAAD;AAAM,QAAA,UAAU,EAAC,KAAjB;AAAuB,QAAA,QAAQ,EAAC,QAAhC;AAAA,8BACOT,IADP,EACaC,WADb;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,EAOKG,UAAU,gBACP,QAAC,IAAD;AAAM,MAAA,CAAC,EAAE;AAACQ,QAAAA,IAAI,EAAE,CAAP;AAAUC,QAAAA,EAAE,EAAE;AAAd,OAAT;AAA2B,MAAA,CAAC,EAAC,MAA7B;AAAoC,MAAA,OAAO,EAAE,CAA7C;AAAgD,MAAA,OAAO,EAAC,QAAxD;AAAiE,MAAA,KAAK,EAAC,QAAvE;AAAA,6BACI,QAAC,cAAD;AAAgB,QAAA,QAAQ,EAAEN,SAA1B;AAAqC,QAAA,OAAO,EAAED,UAAU,IAAID,OAA5D;AAAqE,QAAA,SAAS,EAAE,CAAhF;AAAmF,QAAA,WAAW,EAAE,IAAhG;AAAA,mBACKK,OAAO,CAACC,GAAR,CAAYP,UAAZ,CADL,EAEKA,UAAU,CAACU,GAAX,CAAe,CAACC,SAAD,EAAYC,KAAZ,kBACZ,QAAC,QAAD;AAAA,iCACI,QAAC,SAAD;AAAW,YAAA,SAAS,EAAED;AAAtB;AAAA;AAAA;AAAA;AAAA;AADJ,WAAeC,KAAf;AAAA;AAAA;AAAA;AAAA,gBADH,CAFL;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADO,GAWL,IAlBV;AAAA,kBADJ;AAsBH,CAtDqC;AAAA,UAGrBzB,cAHqB,EAIVE,cAJU,EAKMH,cALN,EAOqBM,iBAPrB;AAAA,GAAtC;MAAME,a;AAwDN,eAAeA,aAAf","sourcesContent":["import { memo, useState } from \"react\"\n\nimport { Box, Text, Wrap, WrapItem } from \"@chakra-ui/react\"\nimport { VFC } from \"react\"\nimport { useRecoilState, useRecoilValue } from \"recoil\"\nimport InfiniteScroll  from \"react-infinite-scroller\"\n\nimport { useCourFactory } from \"../../customHooks/useCourFactory\"\nimport { Year } from \"../../store/Year\"\nimport { AnnictApiType } from \"../../types/api/AnnictApiType\"\nimport AnimeCard from \"../molecules/animeCard/AnimeCard\"\nimport { useAnimeApiSearch } from \"customHooks/useAnimeApiSearch\"\nimport { client } from \"lib/api/client\"\nimport { ApiKeyValue } from \"store/ApiKeyValue\"\nimport { AnimeLists } from \"store/AnimeLists\"\n\ntype Props = {\n    animeLists: AnnictApiType[];\n}\n\n\nconst AnimeCardList: VFC<Props> = memo((props) => {\n    // const { animeLists } = props\n    // const [ hasMore, setHasMore ] = useState(true)\n    const year = useRecoilValue(Year)\n    const { select_cour } = useCourFactory()\n    const [ apiKeyValue, setApiKeyValue ] = useRecoilState(ApiKeyValue)\n    // const [ animeLists, setAnimeLists ] = useRecoilState(AnimeLists)\n    const { animeLists, hasMore, isFetching, getAnimes } = useAnimeApiSearch()\n\n    const loadMore = async(page: number) => {\n        console.log(page);\n        // const filter_season = `${apiKeyValue.year}-${apiKeyValue.cour}`\n        // const getanime = await client.get('/api/annicts/search', {\n        //     params: {\n        //         filter_season,\n        //         page\n        //     }\n        // })\n        // const animeDate: AnnictApiType[] = getanime.data.works\n        // console.log(getanime);\n        \n        // if (animeDate.length < 1) {\n        //     setHasMore(false);\n        //     return;\n        // }\n        // setAnimeLists([...animeLists, ...animeDate])\n        getAnimes(page)\n        // console.log(animeLists);\n        // console.log(res);\n        \n    }\n    \n    return (\n        <>\n            <Box justify='center' align='center' m='30px 10px 0'>\n                <Text fontWeight='700' fontSize='1.17em'>\n                    ― {year}{select_cour} ―\n                </Text>\n            </Box>\n            {/* simpleGridに変更⇩ */}\n            {animeLists ? \n                <Wrap p={{base: 3, md: 4}} w='100%' spacing={5} justify='center' align='center'>\n                    <InfiniteScroll loadMore={getAnimes} hasMore={isFetching && hasMore} pageStart={0} initialLoad={true}>\n                        {console.log(animeLists)}\n                        {animeLists.map((animeList, index) => (\n                            <WrapItem key={index}>\n                                <AnimeCard animeList={animeList}/>\n                            </WrapItem>\n                        ))}   \n                    </InfiniteScroll>\n                </Wrap>\n                : null }\n        </>\n    )\n})\n\nexport default AnimeCardList"]},"metadata":{},"sourceType":"module"}