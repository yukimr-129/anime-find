{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useRecoilTransactionObserver_UNSTABLE } from \"recoil\";\n\nconst RecoilStatePersist = () => {\n  _s();\n\n  useRecoilTransactionObserver_UNSTABLE(({\n    snapshot\n  }) => {\n    for (const modifiedAtom of snapshot.getNodes_UNSTABLE({\n      isModified: true\n    })) {\n      const atomLoadable = snapshot.getLoadable(modifiedAtom);\n\n      if (atomLoadable.state === 'hasValue') {\n        localStorage.setItem(modifiedAtom.key, JSON.stringify({\n          value: atomLoadable.contents\n        }));\n      }\n    }\n  });\n  return null;\n};\n\n_s(RecoilStatePersist, \"dixgv7xwJ+qaTtTww+EQg2NUKbU=\", false, function () {\n  return [useRecoilTransactionObserver_UNSTABLE];\n});\n\n_c = RecoilStatePersist;\nexport default RecoilStatePersist;\n\nvar _c;\n\n$RefreshReg$(_c, \"RecoilStatePersist\");","map":{"version":3,"sources":["/usr/src/app/react-app/src/RecoilStatePersist.ts"],"names":["useRecoilTransactionObserver_UNSTABLE","RecoilStatePersist","snapshot","modifiedAtom","getNodes_UNSTABLE","isModified","atomLoadable","getLoadable","state","localStorage","setItem","key","JSON","stringify","value","contents"],"mappings":";;AAAA,SAASA,qCAAT,QAAsD,QAAtD;;AAEA,MAAMC,kBAAkB,GAAG,MAAM;AAAA;;AAC7BD,EAAAA,qCAAqC,CAAC,CAAC;AAAEE,IAAAA;AAAF,GAAD,KAAkB;AACtD,SAAK,MAAMC,YAAX,IAA4BD,QAAD,CAAkBE,iBAAlB,CAAoC;AAC7DC,MAAAA,UAAU,EAAE;AADiD,KAApC,CAA3B,EAEI;AACF,YAAMC,YAAY,GAAGJ,QAAQ,CAACK,WAAT,CAAqBJ,YAArB,CAArB;;AACA,UAAIG,YAAY,CAACE,KAAb,KAAuB,UAA3B,EAAuC;AACrCC,QAAAA,YAAY,CAACC,OAAb,CACEP,YAAY,CAACQ,GADf,EAEEC,IAAI,CAACC,SAAL,CAAe;AAAEC,UAAAA,KAAK,EAAER,YAAY,CAACS;AAAtB,SAAf,CAFF;AAID;AACF;AACF,GAZoC,CAArC;AAaA,SAAO,IAAP;AACD,CAfH;;GAAMd,kB;UACFD,qC;;;KADEC,kB;AAiBJ,eAAeA,kBAAf","sourcesContent":["import { useRecoilTransactionObserver_UNSTABLE } from \"recoil\";\n\nconst RecoilStatePersist = () => {\n    useRecoilTransactionObserver_UNSTABLE(({ snapshot }) => {\n      for (const modifiedAtom of (snapshot as any).getNodes_UNSTABLE({\n        isModified: true,\n      })) {\n        const atomLoadable = snapshot.getLoadable(modifiedAtom);\n        if (atomLoadable.state === 'hasValue') {\n          localStorage.setItem(\n            modifiedAtom.key,\n            JSON.stringify({ value: atomLoadable.contents })\n          );\n        }\n      }\n    })\n    return null;\n  }\n\n  export default RecoilStatePersist"]},"metadata":{},"sourceType":"module"}