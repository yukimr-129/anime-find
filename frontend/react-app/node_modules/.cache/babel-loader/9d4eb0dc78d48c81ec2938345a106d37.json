{"ast":null,"code":"var _jsxFileName = \"/usr/src/app/react-app/src/components/organisms/AnimeCardList.tsx\",\n    _s = $RefreshSig$();\n\nimport { memo, useState } from \"react\";\nimport { Box, Text, Wrap, WrapItem } from \"@chakra-ui/react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport { useCourFactory } from \"../../customHooks/useCourFactory\";\nimport { Year } from \"../../store/Year\";\nimport AnimeCard from \"../molecules/animeCard/AnimeCard\";\nimport { client } from \"lib/api/client\";\nimport { ApiKeyValue } from \"store/ApiKeyValue\";\nimport { AnimeLists } from \"store/AnimeLists\";\nimport { BeatLoader } from \"react-spinners\";\nimport { HasMore } from \"store/loding/HasMore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AnimeCardList = /*#__PURE__*/memo(_c = _s(props => {\n  _s();\n\n  // const { animeLists } = props\n  const [isFetching, setIsFetching] = useState(false); // const [ hasMore, setHasMore ] = useState(true)\n\n  const year = useRecoilValue(Year);\n  const {\n    select_cour\n  } = useCourFactory();\n  const [hasMore, setHasMore] = useRecoilState(HasMore);\n  const [apiKeyValue, setApiKeyValue] = useRecoilState(ApiKeyValue);\n  const [animeLists, setAnimeLists] = useRecoilState(AnimeLists); // const { animeLists, getAnimes } = useAnimeApiSearch()\n\n  const loadMore = async page => {\n    console.log(page);\n\n    try {\n      setIsFetching(true);\n      const filter_season = `${apiKeyValue.year}-${apiKeyValue.cour}`;\n      const getanime = await client.get('/api/annicts/search', {\n        params: {\n          filter_season,\n          page\n        }\n      });\n      const animeDate = getanime.data.works;\n      console.log(getanime);\n\n      if (animeDate.length < 1) {\n        setHasMore(false);\n        return;\n      }\n\n      const s = new Set([...animeLists, ...animeDate]); // const rep = Array.from(s)\n\n      const list = [...s]; // console.log(rep);\n\n      setAnimeLists([...list]);\n      console.log(animeLists);\n      console.log(getanime);\n    } catch (error) {} finally {\n      setIsFetching(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      justify: \"center\",\n      align: \"center\",\n      m: \"30px 10px 0\",\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        fontWeight: \"700\",\n        fontSize: \"1.17em\",\n        children: [\"\\u2015 \", year, select_cour, \" \\u2015\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), animeLists ? /*#__PURE__*/_jsxDEV(Wrap, {\n      p: {\n        base: 3,\n        md: 4\n      },\n      w: \"100%\",\n      spacing: 5,\n      justify: \"center\",\n      align: \"center\",\n      children: /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n        loadMore: loadMore,\n        hasMore: !isFetching && hasMore,\n        initialLoad: false,\n        pageStart: 0,\n        loader: /*#__PURE__*/_jsxDEV(BeatLoader, {\n          size: 10,\n          color: \"black\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 132\n        }, this),\n        children: [console.log(animeLists), animeLists.map((animeList, index) => /*#__PURE__*/_jsxDEV(WrapItem, {\n          children: /*#__PURE__*/_jsxDEV(AnimeCard, {\n            animeList: animeList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 33\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 29\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }, this) : null]\n  }, void 0, true);\n}, \"OL0nzqMvI79n/XeTXihwZApPFdE=\", false, function () {\n  return [useRecoilValue, useCourFactory, useRecoilState, useRecoilState, useRecoilState];\n}));\n_c2 = AnimeCardList;\nexport default AnimeCardList;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AnimeCardList$memo\");\n$RefreshReg$(_c2, \"AnimeCardList\");","map":{"version":3,"sources":["/usr/src/app/react-app/src/components/organisms/AnimeCardList.tsx"],"names":["memo","useState","Box","Text","Wrap","WrapItem","useRecoilState","useRecoilValue","InfiniteScroll","useCourFactory","Year","AnimeCard","client","ApiKeyValue","AnimeLists","BeatLoader","HasMore","AnimeCardList","props","isFetching","setIsFetching","year","select_cour","hasMore","setHasMore","apiKeyValue","setApiKeyValue","animeLists","setAnimeLists","loadMore","page","console","log","filter_season","cour","getanime","get","params","animeDate","data","works","length","s","Set","list","error","base","md","map","animeList","index"],"mappings":"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","sourcesContent":["import { memo, useState, useCallback } from \"react\"\n\nimport { Box, Text, Wrap, WrapItem } from \"@chakra-ui/react\"\nimport { VFC } from \"react\"\nimport { useRecoilState, useRecoilValue } from \"recoil\"\nimport InfiniteScroll  from \"react-infinite-scroller\"\n\nimport { useCourFactory } from \"../../customHooks/useCourFactory\"\nimport { Year } from \"../../store/Year\"\nimport { AnnictApiType } from \"../../types/api/AnnictApiType\"\nimport AnimeCard from \"../molecules/animeCard/AnimeCard\"\nimport { useAnimeApiSearch } from \"customHooks/useAnimeApiSearch\"\nimport { client } from \"lib/api/client\"\nimport { ApiKeyValue } from \"store/ApiKeyValue\"\nimport { AnimeLists } from \"store/AnimeLists\"\nimport { BeatLoader } from \"react-spinners\"\nimport { HasMore } from \"store/loding/HasMore\"\n\ntype Props = {\n    animeLists: AnnictApiType[];\n}\n\n\nconst AnimeCardList: VFC<Props> = memo((props) => {\n    // const { animeLists } = props\n    const [ isFetching, setIsFetching]  = useState(false);\n    // const [ hasMore, setHasMore ] = useState(true)\n    const year = useRecoilValue(Year)\n    const { select_cour } = useCourFactory()\n    const [ hasMore, setHasMore ] = useRecoilState(HasMore)\n    const [ apiKeyValue, setApiKeyValue ] = useRecoilState(ApiKeyValue)\n    const [ animeLists, setAnimeLists ] = useRecoilState(AnimeLists)\n    // const { animeLists, getAnimes } = useAnimeApiSearch()\n\n    const loadMore = async(page: number) => {\n        console.log(page);\n        try {\n            setIsFetching(true);\n            const filter_season = `${apiKeyValue.year}-${apiKeyValue.cour}`\n            const getanime = await client.get('/api/annicts/search', {\n                params: {\n                    filter_season,\n                    page\n                }\n            })\n            const animeDate: AnnictApiType[] = getanime.data.works\n            console.log(getanime);\n            \n            if (animeDate.length < 1) {\n                setHasMore(false);\n                return;\n            }\n            const s = new Set([...animeLists, ...animeDate])\n            // const rep = Array.from(s)\n            const list = [...s]\n            \n            // console.log(rep);\n            \n            setAnimeLists([...list])\n            console.log(animeLists);\n            console.log(getanime);\n        } catch (error) {\n            \n        } finally {\n            setIsFetching(false);\n        }\n        \n    }\n\n    \n    return (\n        <>\n            <Box justify='center' align='center' m='30px 10px 0'>\n                <Text fontWeight='700' fontSize='1.17em'>\n                    ― {year}{select_cour} ―\n                </Text>\n            </Box>\n            {/* simpleGridに変更⇩ */}\n            {animeLists ? \n                <Wrap p={{base: 3, md: 4}} w='100%' spacing={5} justify='center' align='center'>\n                    <InfiniteScroll loadMore={loadMore} hasMore={!isFetching && hasMore} initialLoad={false} pageStart={0} loader={<BeatLoader size={10} color=\"black\" />}>\n                        {console.log(animeLists)}\n                        {animeLists.map((animeList, index) => (\n                            <WrapItem key={index}>\n                                <AnimeCard animeList={animeList}/>\n                            </WrapItem>\n                        ))}   \n                    </InfiniteScroll>\n                </Wrap>\n                : null }\n        </>\n    )\n})\n\nexport default AnimeCardList"]},"metadata":{},"sourceType":"module"}