[{"/usr/src/app/react-app/src/index.tsx":"1","/usr/src/app/react-app/src/reportWebVitals.ts":"2","/usr/src/app/react-app/src/App.tsx":"3","/usr/src/app/react-app/src/defaultStyle/theme.ts":"4","/usr/src/app/react-app/src/routing/Router.tsx":"5","/usr/src/app/react-app/src/components/pages/TopPage.tsx":"6","/usr/src/app/react-app/src/components/organisms/Header.tsx":"7","/usr/src/app/react-app/src/components/atoms/header/MenuBar.tsx":"8","/usr/src/app/react-app/src/components/atoms/header/Logo.tsx":"9","/usr/src/app/react-app/src/components/organisms/Search.tsx":"10","/usr/src/app/react-app/src/components/atoms/form/YearInput.tsx":"11","/usr/src/app/react-app/src/components/atoms/button/PraimaryButton.tsx":"12","/usr/src/app/react-app/src/store/Year.ts":"13","/usr/src/app/react-app/src/store/Cour.ts":"14","/usr/src/app/react-app/src/components/atoms/form/CourInput.tsx":"15","/usr/src/app/react-app/src/customHooks/useCourFactory.ts":"16","/usr/src/app/react-app/src/customHooks/useYearFactory.ts":"17","/usr/src/app/react-app/src/components/organisms/AnimeCardList.tsx":"18","/usr/src/app/react-app/src/components/molecules/animeCard/AnimeCard.tsx":"19","/usr/src/app/react-app/src/store/ApiKeyValue.ts":"20","/usr/src/app/react-app/src/customHooks/useAnimeApiSearch.ts":"21","/usr/src/app/react-app/src/customHooks/message/useMessage.ts":"22","/usr/src/app/react-app/src/lib/api/client.ts":"23","/usr/src/app/react-app/src/util/YearFactory.ts":"24","/usr/src/app/react-app/src/util/CourFactory.ts":"25","/usr/src/app/react-app/src/store/AnimeLists.ts":"26","/usr/src/app/react-app/src/components/pages/auth/SigninForm.tsx":"27","/usr/src/app/react-app/src/store/loding/AuthLoding.ts":"28","/usr/src/app/react-app/src/store/auth/Auth.ts":"29","/usr/src/app/react-app/src/lib/api/auth/auth.ts":"30","/usr/src/app/react-app/src/components/templates/CommonLayout.tsx":"31","/usr/src/app/react-app/src/components/pages/auth/SignUpForm.tsx":"32","/usr/src/app/react-app/src/RecoilStatePersist.ts":"33","/usr/src/app/react-app/src/components/pages/favorites/FavoriteAnime.tsx":"34","/usr/src/app/react-app/src/components/pages/favorites/FavoriteAnimeCard.tsx":"35","/usr/src/app/react-app/src/store/loding/Loding.ts":"36","/usr/src/app/react-app/src/util/DefaultSpiner.tsx":"37","/usr/src/app/react-app/src/store/FavoriteAnimeList.ts":"38","/usr/src/app/react-app/src/store/IsFavoriteLike.ts":"39","/usr/src/app/react-app/src/components/pages/auth/UserProfile.tsx":"40","/usr/src/app/react-app/src/components/pages/auth/EditPassword.tsx":"41","/usr/src/app/react-app/src/lib/motionVariants/variants.ts":"42"},{"size":1684,"mtime":1629362671180,"results":"43","hashOfConfig":"44"},{"size":425,"mtime":1628233379339,"results":"45","hashOfConfig":"44"},{"size":131,"mtime":1629362646525,"results":"46","hashOfConfig":"44"},{"size":624,"mtime":1628731589265,"results":"47","hashOfConfig":"44"},{"size":3239,"mtime":1640930801963,"results":"48","hashOfConfig":"44"},{"size":1670,"mtime":1640846718226,"results":"49","hashOfConfig":"44"},{"size":4100,"mtime":1640924554030,"results":"50","hashOfConfig":"44"},{"size":2417,"mtime":1636170234316,"results":"51","hashOfConfig":"44"},{"size":354,"mtime":1640847619305,"results":"52","hashOfConfig":"44"},{"size":1043,"mtime":1629362826840,"results":"53","hashOfConfig":"44"},{"size":901,"mtime":1629362794915,"results":"54","hashOfConfig":"44"},{"size":645,"mtime":1629362840557,"results":"55","hashOfConfig":"44"},{"size":220,"mtime":1628513989333,"results":"56","hashOfConfig":"44"},{"size":294,"mtime":1628512857339,"results":"57","hashOfConfig":"44"},{"size":956,"mtime":1629362799545,"results":"58","hashOfConfig":"44"},{"size":1558,"mtime":1629362816867,"results":"59","hashOfConfig":"44"},{"size":628,"mtime":1629362809822,"results":"60","hashOfConfig":"44"},{"size":1370,"mtime":1640846753214,"results":"61","hashOfConfig":"44"},{"size":6077,"mtime":1640859487809,"results":"62","hashOfConfig":"44"},{"size":997,"mtime":1628670445704,"results":"63","hashOfConfig":"44"},{"size":1443,"mtime":1629362596943,"results":"64","hashOfConfig":"44"},{"size":558,"mtime":1628656853474,"results":"65","hashOfConfig":"44"},{"size":101,"mtime":1628665036392,"results":"66","hashOfConfig":"44"},{"size":647,"mtime":1628667335842,"results":"67","hashOfConfig":"44"},{"size":1322,"mtime":1628667413783,"results":"68","hashOfConfig":"44"},{"size":182,"mtime":1628693800388,"results":"69","hashOfConfig":"44"},{"size":5315,"mtime":1640848016275,"results":"70","hashOfConfig":"44"},{"size":117,"mtime":1628846185209,"results":"71","hashOfConfig":"44"},{"size":266,"mtime":1628846076076,"results":"72","hashOfConfig":"44"},{"size":1752,"mtime":1636175394541,"results":"73","hashOfConfig":"44"},{"size":468,"mtime":1629362701690,"results":"74","hashOfConfig":"44"},{"size":7121,"mtime":1640848024232,"results":"75","hashOfConfig":"44"},{"size":637,"mtime":1629209242570,"results":"76","hashOfConfig":"44"},{"size":2632,"mtime":1640847273982,"results":"77","hashOfConfig":"44"},{"size":4704,"mtime":1640926293113,"results":"78","hashOfConfig":"44"},{"size":110,"mtime":1631429503836,"results":"79","hashOfConfig":"44"},{"size":268,"mtime":1631429947133,"results":"80","hashOfConfig":"44"},{"size":208,"mtime":1631428881875,"results":"81","hashOfConfig":"44"},{"size":125,"mtime":1632030399677,"results":"82","hashOfConfig":"44"},{"size":8773,"mtime":1640847966648,"results":"83","hashOfConfig":"44"},{"size":4515,"mtime":1640847986509,"results":"84","hashOfConfig":"44"},{"size":399,"mtime":1640859007523,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"16ps9v5",{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"88"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"88"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"88"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"88"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"88"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"88"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"88"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"88"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"88"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"88"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"88"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"88"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"148"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"88"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"88"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"88"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"88"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"88"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"88"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"88"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"/usr/src/app/react-app/src/index.tsx",[],["192","193"],"/usr/src/app/react-app/src/reportWebVitals.ts",[],"/usr/src/app/react-app/src/App.tsx",[],"/usr/src/app/react-app/src/defaultStyle/theme.ts",[],"/usr/src/app/react-app/src/routing/Router.tsx",["194","195","196"],"/usr/src/app/react-app/src/components/pages/TopPage.tsx",["197","198","199","200","201"],"import { Box } from \"@chakra-ui/react\";\nimport { VFC, useCallback, useEffect, memo } from \"react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\n\nimport { Cour } from \"../../store/Cour\";\nimport { Year } from \"../../store/Year\";\nimport { ApiKeyValue } from \"../../store/ApiKeyValue\";\nimport AnimeCardList from \"../organisms/AnimeCardList\";\nimport Search from \"../organisms/Search\";\nimport { useCourFactory } from \"../../customHooks/useCourFactory\";\nimport { useAnimeApiSearch } from \"../../customHooks/useAnimeApiSearch\";\nimport { useLocation } from \"react-router-dom\";\nimport { useMessage } from \"customHooks/message/useMessage\";\n\n\n\nconst TopPage: VFC = memo(() => {\n    const selectYear = useRecoilValue(Year)\n    const selectCour = useRecoilValue(Cour)\n    const location = useLocation<string>()\n    const [ apiKeyValue, setApiKeyValue] = useRecoilState(ApiKeyValue)\n    const { select_season } = useCourFactory()\n    const { animeLists, getAnimes } = useAnimeApiSearch()\n    const { showMessage } = useMessage()\n\n    const onClickAnimeSearch = useCallback(() => {\n        const rep = {year: selectYear, cour: select_season}\n        setApiKeyValue(rep)  \n    }, [selectYear, select_season])\n\n    useEffect(() => {\n        getAnimes()        \n    }, [apiKeyValue])\n    \n    \n    console.log(animeLists);\n    return (\n        <>\n            {/* <Header /> */}\n            <Box w={{base: '90%', md: '70%'}} h='100%' bg='#ffff' m='100px auto 20px auto' borderRadius='10px'>\n                <Search onClickAnimeSearch={onClickAnimeSearch}/>\n                <AnimeCardList animeLists={animeLists} />\n            </Box>\n        </>\n    )\n})\n\nexport default TopPage","/usr/src/app/react-app/src/components/organisms/Header.tsx",["202","203"],"import { Flex, Box, Button, HStack } from \"@chakra-ui/react\"\nimport { VFC } from \"react\"\nimport { useRecoilState } from \"recoil\"\nimport Cookies from \"js-cookie\"\n\nimport Logo from \"../atoms/header/Logo\"\nimport MenuBar from \"../atoms/header/MenuBar\"\nimport { CurrentUser, IsSignedIn } from \"store/auth/Auth\"\nimport { AuthLoding } from \"store/loding/AuthLoding\"\nimport { useHistory } from \"react-router-dom\"\nimport { signOut } from \"lib/api/auth/auth\"\nimport { useMessage } from \"customHooks/message/useMessage\"\n\nconst Header: VFC = () => {\n    const history = useHistory()\n    const [ isSignedIn, setIsSignedIn ] = useRecoilState(IsSignedIn)\n    const [ authLoding, setAuthLoding] = useRecoilState(AuthLoding)\n    const [ currentUser, setCurrentUser] = useRecoilState(CurrentUser)\n    const { showMessage } = useMessage()\n\n    //ログアウト\n    const handleSignOut = async(e: React.MouseEvent<HTMLButtonElement>) => {\n        try {\n            const res = await signOut()\n            console.log(res);\n            \n            if (res.data.success === true){\n                 // サインアウト時には各Cookieを削除\n                Cookies.remove(\"_access_token\")\n                Cookies.remove(\"_client\")\n                Cookies.remove(\"_uid\")\n\n                setIsSignedIn(false)\n                setAuthLoding(true)\n                console.log('確認');\n                \n                setCurrentUser(undefined)\n                history.push(\"/signin\")\n\n                showMessage({title: 'ログアウトしました', status: 'info'})\n            }\n            \n        } catch (error) {\n            showMessage({title: 'ログアウトに失敗しました', status: 'error'})\n        }\n    }\n\n    //ログイン\n    const signInHistory = () => {\n        history.push({pathname: '/signin'})\n    }\n\n    //新規登録\n    const signUpHistory = () => {\n        history.push({pathname: '/signup'})\n    }\n\n    return (\n        <>\n        <Box as='header' h='70px' w='100%' bg='rgba(256,256,256,.75)' borderBottom='solid 4px rgba(26,187,154,.3)' boxShadow='0 1px 4px rgb(0 0 0 / 30%)' position='fixed' top='0' zIndex='999'>\n            <Flex align='center' justify='space-between' h='70px' padding={{ base: 3, md: 5 }}>\n                <Box ml='20px'>\n                    <Logo />    \n                </Box>\n                <Flex justify='space-between' align='center'>\n                    <HStack spacing={5}>\n                        {/* { !authLoding ? (\n                            isSignedIn ? (\n                                    <Button size='xs' p={4} colorScheme=\"red\" onClick={handleSignOut}>ログアウト</Button>\n                            ) : (\n                                <>\n                                    <Button size='xs' p={4} colorScheme=\"blue\" onClick={signInHistory}>ログイン</Button>\n                                    <Button size='xs' p={4} colorScheme=\"teal\" onClick={signUpHistory}>新規登録</Button>\n                                </>\n                            )\n                        ) : (\n                            <></>\n                        )} */}\n                        { isSignedIn ? (\n                            <>\n                                <HStack>\n                                    <Button size='xs' p={{base: 2, md: 4}} colorScheme=\"red\" onClick={handleSignOut}>ログアウト</Button>\n                                    <MenuBar />\n                                </HStack>\n                            </>\n                        ) : (\n                            <>\n                                <Button size='xs' p={{base: 2, md: 4}} colorScheme=\"blue\" onClick={signInHistory}>ログイン</Button>\n                                <Button size='xs' p={{base: 2, md: 4}} colorScheme=\"teal\" onClick={signUpHistory}>新規登録</Button>\n                            </>\n                        )}\n                    </HStack>\n                </Flex>\n            </Flex>\n            <Box position='absolute' bottom='-4px' h='4px' bg='#1abb9a'></Box>\n        </Box>\n        </>\n    )\n}\n\nexport default Header","/usr/src/app/react-app/src/components/atoms/header/MenuBar.tsx",["204","205"],"import React, { memo } from \"react\"\nimport { Drawer, DrawerContent, DrawerOverlay, DrawerHeader, DrawerBody, useDisclosure, Box, Text, Divider, DrawerCloseButton, Flex, IconButton } from \"@chakra-ui/react\"\nimport { RiMenuFoldLine } from \"react-icons/ri\";\nimport { HamburgerIcon } from '@chakra-ui/icons'\nimport { Link } from \"react-router-dom\"\nimport { useRecoilValue } from \"recoil\";\nimport { CurrentUser } from \"store/auth/Auth\";\n\nconst MenuBar = memo(() => {\n    const { isOpen, onOpen, onClose } = useDisclosure()\n    const current_user = useRecoilValue(CurrentUser)\n    const id = current_user ? current_user.id : ''\n\n    return (\n        <>\n            <Flex w='70px' h='70px' cursor='pointer' align='center' justify='center'>\n             <IconButton\n                w='40px' \n                h='40px'\n                aria-label=\"メニュー\"\n                icon={<HamburgerIcon boxSize={8}/>}\n                size=\"xl\"\n                variant=\"unstyled\"\n                display='block'\n                onClick={onOpen}\n             />\n            </Flex>\n            <Drawer placement='right' size='xs' onClose={onClose} isOpen={isOpen} motionPreset='none'>\n                <DrawerOverlay>\n                    <DrawerContent>\n                        <DrawerCloseButton />\n                        <DrawerHeader borderBottomWidth=\"1px\">MENU</DrawerHeader>\n                        <DrawerBody p='0'>\n                            <Box w=\"100%\" p='16px 24px' _hover={{opacity: 0.8, backgroundColor: '#d7d7d8'}}>\n                                <Link to={`/profile/${id}`}  onClick={onClose}>プロフィール</Link>\n                            </Box>\n                            <Divider />\n                            <Box w=\"100%\" p='16px 24px' _hover={{opacity: 0.8, backgroundColor: '#d7d7d8'}}>\n                                <Link to={`/edit-password/${id}`} onClick={onClose}>パスワード変更</Link>\n                            </Box>\n                            <Divider />\n                            <Box w=\"100%\" p='16px 24px' _hover={{opacity: 0.8, backgroundColor: '#d7d7d8'}}>\n                                <Link to={`like/${id}`} onClick={onClose}>お気に入りアニメ</Link>\n                            </Box>\n                        </DrawerBody>\n                    </DrawerContent>\n                </DrawerOverlay>\n            </Drawer>\n        </>\n    )\n})\n\nexport default MenuBar","/usr/src/app/react-app/src/components/atoms/header/Logo.tsx",[],"/usr/src/app/react-app/src/components/organisms/Search.tsx",[],"/usr/src/app/react-app/src/components/atoms/form/YearInput.tsx",["206"],"import { FormLabel, Select } from \"@chakra-ui/react\"\nimport { VFC, useCallback } from \"react\";\nimport { useRecoilState } from \"recoil\";\n\nimport { useYearFactory } from \"../../../customHooks/useYearFactory\";\nimport { Year } from '../../../store/Year'\nimport { handleChange } from \"../../../types/handleChange\";\n\nconst YearInput: VFC = () => {\n    const [ selectYear, setSelectyear ] = useRecoilState(Year)\n    const { year } = useYearFactory()\n    \n    const handleChangeYear: handleChange = useCallback((e) => {\n        e.preventDefault()\n        setSelectyear(e.target.value)\n    }, [selectYear])\n\n    return (\n        <>\n            <FormLabel>西暦</FormLabel>\n            <Select onChange={handleChangeYear}>\n                {year.map((year, index) => (\n                    <option key={year}>{year}</option>\n                ))}\n            </Select>\n        </>\n    )\n}\n\nexport default YearInput","/usr/src/app/react-app/src/components/atoms/button/PraimaryButton.tsx",[],"/usr/src/app/react-app/src/store/Year.ts",[],"/usr/src/app/react-app/src/store/Cour.ts",[],"/usr/src/app/react-app/src/components/atoms/form/CourInput.tsx",["207"],"import { FormLabel, Select } from \"@chakra-ui/react\"\nimport { VFC } from \"react\"\nimport { useCallback } from 'react'\nimport { useRecoilState } from \"recoil\"\n\nimport { useCourFactory } from \"../../../customHooks/useCourFactory\"\nimport { Cour } from '../../../store/Cour'\nimport { handleChange } from \"../../../types/handleChange\"\n\nconst CourInput: VFC = () => {\n    \n    const { cours } = useCourFactory()\n    const [ selectCour, setSelectCour ] = useRecoilState(Cour)\n\n    const handleChangeCour: handleChange = useCallback((e) => {\n        e.preventDefault()\n        setSelectCour(e.target.value)\n    }, [selectCour])\n    \n    return (\n        <>\n            <FormLabel>クール</FormLabel>\n            <Select defaultValue={selectCour} onChange={handleChangeCour}>\n                {cours.map((cour, index) => (\n                    <option key={cour}>{cour}</option>\n                ))}\n            </Select>\n        </>\n    )\n}\n\nexport default CourInput","/usr/src/app/react-app/src/customHooks/useCourFactory.ts",["208"],"import { useRecoilState } from \"recoil\"\n\nimport { Cour } from '../store/Cour'\n\ntype CourFactory = () => {\n    current_cour: number;\n    select_cour: string;\n    select_season: string | undefined;\n    current_season: string | undefined;\n    cours: string[];\n}\n\nexport const useCourFactory: CourFactory = () => {\n    const [ selectCour, setSelectCour ] = useRecoilState(Cour)\n    const cours_detail = ['1期（冬期）', '2期（春期）', '3期（夏期）', '4期（秋期）'];\n    const cours_detail_month = ['冬：1～3月', '春：4～6月', '夏：7～9月', '秋：10～12月'];\n\n\n    //現在のクール\n    const current_cour = Math.ceil((new Date()).getMonth() / 3)\n    const defalt_cour = cours_detail[current_cour - 1]\n\n    //選択したクール\n    const cour_index = cours_detail.indexOf(selectCour)\n    const select_cour = cours_detail_month[cour_index]\n\n    //API用\n    const season = new Map<string, string>([['1期（冬期）', 'winter'], ['2期（春期）', 'spring'], ['3期（夏期）', 'summer'], ['4期（秋期）', 'autumn']])\n    const select_season = season.get(selectCour)\n    const current_season = season.get(defalt_cour)\n    \n    // const handleChangeCour: handleChange = useCallback((e) => {\n    //     e.preventDefault()\n    //     setSelectCour(e.target.value)\n    // }, [selectCour])\n    \n    //セレクト\n    const cours: string[] = [];\n    for (var i = 0; i < cours_detail.length; i++) {\n      cours.push(cours_detail[i]);\n    }\n\n    return { current_cour, select_cour, select_season, current_season, cours }\n}","/usr/src/app/react-app/src/customHooks/useYearFactory.ts",["209","210"],"import { useRecoilState } from \"recoil\";\n\nimport { Year } from '../store/Year'\n\ntype YearFactory = () => {\n    current_year: number;\n    year: number[];\n}\nexport const useYearFactory: YearFactory = () => {\n    const [ selectYear, setSelectyear ] = useRecoilState(Year)\n    const current_year = (new Date()).getFullYear();\n    const year: number[] = []\n\n    // const handleChangeYear: handleChange = useCallback((e) => {\n    //     e.preventDefault()\n    //     setSelectyear(e.target.value)\n    // }, [selectYear])\n\n    for (let y = current_year; y >= 2014; y--) {\n        year.push(y)\n    }\n\n    return { current_year, year }\n}","/usr/src/app/react-app/src/components/organisms/AnimeCardList.tsx",["211"],"import { memo } from \"react\"\nimport { Box, Text, Wrap, WrapItem } from \"@chakra-ui/react\"\nimport { VFC } from \"react\"\nimport { useRecoilValue } from \"recoil\"\n\nimport { useCourFactory } from \"../../customHooks/useCourFactory\"\nimport { Year } from \"../../store/Year\"\nimport { AnnictApiType } from \"../../types/api/AnnictApiType\"\nimport AnimeCard from \"../molecules/animeCard/AnimeCard\"\n\ntype Props = {\n    animeLists: AnnictApiType[];\n}\n\nconst AnimeCardList: VFC<Props> = memo((props) => {\n    const { animeLists } = props\n    const year = useRecoilValue(Year)\n    const { select_cour } = useCourFactory()\n    const cours_detail_month = ['冬：1～3月', '春：4～6月', '夏：7～9月', '秋：10～12月']\n    \n    return (\n        <>\n            <Box justify='center' align='center' m='30px 10px 0'>\n                <Text fontWeight='700' fontSize='1.17em'>\n                    ― {year}{select_cour} ―\n                </Text>\n            </Box>\n            {/* simpleGridに変更⇩ */}\n            <Wrap p={{base: 3, md: 4}} w='100%' spacing={5} justify='center' align='center'>\n                {animeLists.map((animeList, index) => (\n                    <WrapItem key={index}>\n                        <AnimeCard animeList={animeList}/>\n                    </WrapItem>\n                ))}\n            </Wrap>\n        </>\n    )\n})\n\nexport default AnimeCardList","/usr/src/app/react-app/src/components/molecules/animeCard/AnimeCard.tsx",["212","213","214","215","216","217"],"import { Image } from '@chakra-ui/image'\nimport { Box, Flex, Link, Text } from '@chakra-ui/layout'\nimport React, { memo, VFC, useState, useEffect, useRef } from 'react'\nimport { BsHeartFill, BsHeart } from \"react-icons/bs\";\nimport { motion, useAnimation } from 'framer-motion';\nimport { Icon } from '@chakra-ui/react';\n\nimport { AnnictApiType } from '../../../types/api/AnnictApiType';\nimport { client } from 'lib/api/client';\nimport { useRecoilValue } from 'recoil';\nimport { CurrentUser, IsSignedIn } from 'store/auth/Auth';\nimport { useMessage } from 'customHooks/message/useMessage';\nimport Cookies from 'js-cookie';\nimport { FavoriteType } from 'types/FavoriteAnime/FavoriteAnimeType';\nimport { scale, visible } from 'lib/motionVariants/variants';\n\ntype Props = {\n    animeList: AnnictApiType;\n}\n\nconst AnimeCard: VFC<Props> = memo((props) => {\n    const { animeList } = props\n    const [ isLike, setIsLike ] = useState(false)\n    const [ toggleLike, setToggleLike ] = useState(false)\n    const currentUser = useRecoilValue(CurrentUser)\n    const isSignedIn = useRecoilValue(IsSignedIn)\n    const { showMessage } = useMessage()\n    const controls = useAnimation()\n\n    const image = animeList.images.recommended_url !== '' ? animeList.images.recommended_url : 'https://lab.esprlog.net/annict/img/no_image.png'\n\n    const toggleSetLike = () => {\n        //ログインしているか確認\n        if (currentUser && isSignedIn) {\n            //お気に入り登録済か\n            if (isLike === false) {\n                try {\n                    const createLike = async() => {\n                        const favoriteParams: FavoriteType = {\n                            user_id: currentUser.id,\n                            title: animeList.title,\n                            official_url: animeList.official_site_url,\n                            image_url: animeList.images.recommended_url,\n                            twitter_username: animeList.twitter_username,\n                            season: animeList.season_name_text,\n                            api_id: animeList.id,\n                        }\n            \n                        const res = await client.post('/favorites/create', favoriteParams)\n                        \n                    }\n                    createLike()\n                    setIsLike(true)\n                    controls.start({ scale: [0, 0.5, 1] })\n                } catch (error) {\n                    showMessage({title: 'お気に入り登録に失敗しました', status: \"error\"})\n                }\n            } else {\n                try {\n                    const deleteLike = async() => {        \n                        const res = await client.delete(`/favorites/destroy/${animeList.id}`, { headers: {\n                            \"access-token\": Cookies.get(\"_access_token\"),\n                            \"client\": Cookies.get(\"_client\"),\n                            \"uid\": Cookies.get(\"_uid\")\n                          }})\n                        console.log(res);\n                        \n                    }\n                    \n                    deleteLike()\n                    setIsLike(false)\n                    controls.start({ translateX: [0, 0, 0, -7, 0, -7, 0, 0] })\n                } catch (error) {\n                    showMessage({title: 'お気に入り削除に失敗しました', status: \"error\"})\n                }\n            }\n        } else {\n            showMessage({title: 'ログインが必要です', status: \"error\"})\n        }\n    }\n\n    ///お気に入り有無反映\n    useEffect(() => {\n        //メモリリーク対策\n        let isMounted = true\n\n        const getLikeAnime = async() => {\n            const isLikeData = await client.get(`/favorites/confirm/${animeList.id}`, { headers: {\n                \"access-token\": Cookies.get(\"_access_token\"),\n                \"client\": Cookies.get(\"_client\"),\n                \"uid\": Cookies.get(\"_uid\")\n              }})\n            let isLike = isLikeData.data\n            setIsLike(isLike)\n        }\n        if(isMounted) getLikeAnime()\n\n        return () => {\n            isMounted = false\n        }\n    }, [isLike])\n\n    return (\n        <>\n            <Box w={{base: '300px', md: '500px'}} h={{base: '240px', md: '330px'}} bg='white' borderRadius='10px' m='15px 5px' p='0 0 10px 0' border='solid 1px #e0e0e0' position='relative'>\n                <Link as='a' href={animeList.official_site_url} target='_blank'>\n                    <Box display='block' m='0 0 8px' overflow='hidden' borderRadius='10px 10px 0 0'>\n                        <motion.div variants={scale} whileHover='hoverAction' >\n                            <Image src={image}  w='calc(100% + 20px)' objectFit='cover' maxH={{base: '200px', md: '260px'}}/>\n                            {/* <motion.h1 variants={visible} initial='hidden' whileHover='hoverAction'>\n                                View Official Site\n                            </motion.h1> */}\n                        </motion.div>\n                    </Box>\n                </Link>\n                <Flex align='flex-start' m='10px 15px 0'>\n                    <Text as='h1' fontSize=\"md\" fontWeight='800'>{animeList.title}</Text>\n                </Flex> \n                <Flex justify='flex-end' w='100%'>\n                    <Box position='absolute' bottom='5px' right='5px'>\n                        <motion.div\n                            onClick={toggleSetLike}\n                            animate={controls}\n                            transition={!isLike ? { duration: 0.2 , ease: \"easeIn\"} : { duration: 0.6 , ease: \"easeIn\"}}\n                        >\n                            <Icon\n                                as={isLike ? BsHeartFill : BsHeart }\n                                fontSize='20px' \n                                color={isLike ? '#FF1493': ''}\n                                cursor='pointer'\n                            />\n                        </motion.div>\n                    </Box>\n                </Flex>\n            </Box>\n        </>\n    )\n})\n\nexport default AnimeCard","/usr/src/app/react-app/src/store/ApiKeyValue.ts",["218","219","220","221","222"],"import { atom } from \"recoil\";\nimport { useCourFactory } from \"../customHooks/useCourFactory\";\nimport { YearFactory } from \"../util/YearFactory\";\nimport { CourFactory } from \"../util/CourFactory\";\n\ntype ApiKeyValue = {\n    year: string | undefined;\n    cour: string | undefined;\n}\n\n//現在の西暦\nconst current_year_number = (new Date()).getFullYear();\nconst current_year = String(current_year_number)\n\n//現在のクール\nconst cours_detail = ['1期（冬期）', '2期（春期）', '3期（夏期）', '4期（秋期）'];\nconst current_cour = Math.ceil((new Date()).getMonth() / 3)\nconst defalt_cour = cours_detail[current_cour - 1]\n\n//API用\nconst season = new Map<string, string>([['1期（冬期）', 'winter'], ['2期（春期）', 'spring'], ['3期（夏期）', 'summer'], ['4期（秋期）', 'autumn']])\nconst current_season = season.get(defalt_cour)\n\nexport const ApiKeyValue = atom<ApiKeyValue>({\n    key: 'ApiKeyValue',\n    default: {year: current_year, cour: current_season}\n})","/usr/src/app/react-app/src/customHooks/useAnimeApiSearch.ts",["223","224","225"],"import { useEffect } from 'react'\nimport { useRecoilState, useRecoilValue } from 'recoil'\n\nimport { client } from \"../lib/api/client\"\nimport { ApiKeyValue } from '../store/ApiKeyValue'\nimport { useMessage } from './message/useMessage'\nimport { AnnictApiType } from '../types/api/AnnictApiType'\nimport { AnimeLists } from '../store/AnimeLists'\n\ntype AnimeApiSearch = () => {\n        animeLists: AnnictApiType[];\n        getAnimes: () => Promise<void>;\n    }\n\nexport const useAnimeApiSearch: AnimeApiSearch = () => {\n    const [ apiKeyValue, setApiKeyValue ] = useRecoilState(ApiKeyValue)\n    const [ animeLists, setAnimeLists ] = useRecoilState(AnimeLists)\n    const { showMessage } = useMessage()\n    // useEffect(() => {\n\n        const getAnimes = async() => {\n            try {\n                const filter_season = `${apiKeyValue.year}-${apiKeyValue.cour}`\n                const getanime = await client.get('/api/annicts/search', {\n                    params: {\n                        filter_season,\n                    }\n                })\n                const anime_date: AnnictApiType[] = getanime.data.works\n                setAnimeLists(anime_date)\n            \n            } catch (error) {\n                showMessage({title: 'アニメ一覧の取得に失敗しました', status: \"error\"})\n            }\n         }\n\n        // return () => {\n        // }    \n    // }, [apiKeyValue])    \n\n\n    return { animeLists, getAnimes }\n}","/usr/src/app/react-app/src/customHooks/message/useMessage.ts",["226"],"import { useToast } from '@chakra-ui/toast'\nimport React, { useCallback } from 'react'\n\ntype Props = {\n    title: string;\n    status: \"info\" | \"warning\" | \"success\" | \"error\";\n}\n\nexport const useMessage = () => {\n    const toast = useToast()\n    \n    const showMessage = useCallback((props: Props) => {\n        const { title, status } = props\n        toast({\n            title: title,\n            status: status,\n            position: 'top',\n            duration: 2000,\n            isClosable: true,\n          })\n    }, [toast])\n\n    return { showMessage }\n}","/usr/src/app/react-app/src/lib/api/client.ts",[],"/usr/src/app/react-app/src/util/YearFactory.ts",["227","228"],"import { ChangeEvent, useCallback } from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport { Year } from \"../store/Year\";\nimport { handleChange } from \"../types/handleChange\";\n\nexport const YearFactory = () => {\n    const [ selectYear, setSelectyear ] = useRecoilState(Year)\n    const current_year = (new Date()).getFullYear();\n    const year: number[] = []\n\n    const handleChangeYear: handleChange = useCallback((e) => {\n        e.preventDefault()\n        setSelectyear(e.target.value)\n    }, [selectYear])\n\n    for (let y = current_year; y >= 2014; y--) {\n        year.push(y)\n    }\n\n    return { current_year, year, handleChangeYear }\n}",["229","230"],"/usr/src/app/react-app/src/util/CourFactory.ts",["231","232","233","234"],"/usr/src/app/react-app/src/store/AnimeLists.ts",[],"/usr/src/app/react-app/src/components/pages/auth/SigninForm.tsx",["235","236","237"],"import { Box, Button, Divider, Flex, FormControl, FormErrorMessage, FormLabel, Heading, Input, Text, VStack } from \"@chakra-ui/react\"\nimport { useMessage } from \"customHooks/message/useMessage\";\nimport Cookies from \"js-cookie\";\nimport { signIn } from \"lib/api/auth/auth\";\nimport { useForm } from \"react-hook-form\"\nimport { useHistory } from \"react-router-dom\";\nimport { BeatLoader } from \"react-spinners\"\nimport { useSetRecoilState } from \"recoil\";\nimport { useCallback } from \"react\";\n\nimport { CurrentUser, IsSignedIn } from \"store/auth/Auth\";\nimport { SignInFormInputs } from \"types/form/FormInputs\";\n\n\nconst SigninForm = () => {\n    // const [ email, setEmail] = useState('')\n    // const [ password, setPassword] = useState('')\n    const setIsSignedIn = useSetRecoilState(IsSignedIn)\n    const setCurrentUser = useSetRecoilState(CurrentUser)\n    const history = useHistory()\n    const { showMessage } = useMessage()\n\n    const { register, formState: { errors }, handleSubmit, formState } = useForm<SignInFormInputs>({\n        mode: 'all',\n        defaultValues: {\n            email: '',\n            password: '',\n          }\n    })\n\n    const sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));\n\n    const handleOnSubmit = async(data: SignInFormInputs) => {\n        const params: SignInFormInputs = {\n            email: data.email,\n            password: data.password\n        }\n\n        try {\n            const res = await signIn(params)\n\n            if (res.status === 200) {\n                // ログインに成功した場合はCookieに各値を格納\n                Cookies.set(\"_access_token\", res.headers[\"access-token\"])\n                Cookies.set(\"_client\", res.headers[\"client\"])\n                Cookies.set(\"_uid\", res.headers[\"uid\"])\n                \n                setIsSignedIn(true)\n                setCurrentUser(res.data.data)\n                history.push({pathname: '/', state: 'signin'})\n\n                showMessage({title: 'ログインしました', status: 'success'})\n            } else {\n                // showMessage({title: 'メールアドレスまたはパスワードが違います。', status: 'error'})\n                showMessage({title: 'ログインに失敗しました。', status: 'error'})\n            }\n        } catch (error) {\n            // showMessage({title: 'ログインに失敗しました。', status: 'error'})\n            showMessage({title: 'メールアドレスまたはパスワードが違います。', status: 'error'})\n        }\n    }\n\n    return (\n        <>\n            {/* <Header /> */}\n            {/* <Box> */}\n                <Flex justify='center' align='center' h='100%' mt='90px'>\n                    <Box bg='white' w={{base: '90%', md: '2xl'}} p={4} borderRadius='10px' shadow='md'>\n                        <Heading as='h1' size='lg' textAlign='center'>ログイン</Heading>\n                        <Divider my={4}/>\n                        <form onSubmit={handleSubmit(handleOnSubmit)}>\n                            <VStack spacing={5}>\n                                <FormControl id='email' isRequired isInvalid={errors.email ? true : false}>\n                                    <FormLabel>メールアドレス</FormLabel>\n                                    <Input \n                                        type='email'\n                                        // name='email' \n                                        placeholder='test@example.com' \n                                        {...register('email', { required: 'メールアドレスは必須です。', pattern: {value: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/, message: \"メールアドレス形式で入力してください。\"}, })}\n                                    />\n                                    <FormErrorMessage>\n                                        {errors.email && errors.email.message}\n                                    </FormErrorMessage>\n                                </FormControl>\n                                <FormControl id='password' isRequired isInvalid={errors.password ? true : false}>\n                                    <FormLabel>パスワード</FormLabel>\n                                    <Input \n                                        type='password' \n                                        // name='password'\n                                        {...register('password', {required: 'パスワードは必須です。'})}\n                                    />\n                                    <FormErrorMessage>\n                                        {errors.password && errors.password.message}\n                                    </FormErrorMessage>\n                                </FormControl>\n                                <Button type=\"submit\" disabled={!formState.isValid} isLoading={formState.isSubmitting} w='100%' color='white' bg='blue.400' _hover={{opacity: 0.8}} spinner={<BeatLoader size={8} color=\"white\" />}>ログイン</Button>\n                            </VStack>\n                        </form>\n                        \n                    </Box>\n                </Flex>  \n            {/* </Box> */}\n\n        </>\n    )\n}\n\nexport default SigninForm","/usr/src/app/react-app/src/store/loding/AuthLoding.ts",[],"/usr/src/app/react-app/src/store/auth/Auth.ts",[],"/usr/src/app/react-app/src/lib/api/auth/auth.ts",["238","239"],"import { client } from '../client'\nimport Cookies from 'js-cookie'\nimport { SignInParams, SignUpParams } from 'types/auth/authTypes'\nimport { EditPasswordUpdate, UserProfileUpdate } from 'types/form/FormInputs'\n\n\n// サインアップ（新規アカウント作成）\nexport const signUp = (params: SignUpParams) => {\n  return client.post('/api/v1/auth', params)\n}\n\n// サインイン（ログイン）\nexport const signIn = (params: SignInParams)  => {\n  return client.post('/api/v1/auth/sign_in', params)\n}\n\n// サインアウト（ログアウト）\nexport const signOut = () => {\n  return client.delete(\"/api/v1/auth/sign_out\", { headers: {\n    \"access-token\": Cookies.get(\"_access_token\"),\n    \"client\": Cookies.get(\"_client\"),\n    \"uid\": Cookies.get(\"_uid\")\n  }})  \n}\n\n// 認証済みのユーザーを取得\nexport const getCurrentUser = () => {\n  if (!Cookies.get(\"_access_token\") || !Cookies.get(\"_client\") || !Cookies.get(\"_uid\")) return\n  return client.get('/api/v1/auth/sessions', { headers: {\n    \"access-token\": Cookies.get(\"_access_token\"),\n    \"client\": Cookies.get(\"_client\"),\n    \"uid\": Cookies.get(\"_uid\")\n  }})\n}\n\nexport const updateUserProfile = (params: FormData) => {\n  return client.patch('/api/v1/auth', params , {\n    headers: {\n      \"content-Type\": \"multipart/form-data\",\n      \"access-token\": Cookies.get(\"_access_token\"),\n      \"client\": Cookies.get(\"_client\"),\n      \"uid\": Cookies.get(\"_uid\")\n    }\n  })  \n}\n\nexport const updatePassword = (params: FormData) => {\n  return client.patch('/api/v1/auth/password', params , {\n    headers: {\n      \"content-Type\": \"multipart/form-data\",\n      \"access-token\": Cookies.get(\"_access_token\"),\n      \"client\": Cookies.get(\"_client\"),\n      \"uid\": Cookies.get(\"_uid\")\n    }\n  })  \n}","/usr/src/app/react-app/src/components/templates/CommonLayout.tsx",[],"/usr/src/app/react-app/src/components/pages/auth/SignUpForm.tsx",["240","241","242"],"import { Box, Flex, Heading,  VStack, FormControl, FormLabel, Input, FormErrorMessage, Button, Divider } from \"@chakra-ui/react\"\nimport Header from \"components/organisms/Header\"\nimport { useMessage } from \"customHooks/message/useMessage\"\nimport Cookies from \"js-cookie\"\nimport { useCallback } from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport { useHistory } from \"react-router-dom\"\nimport { BeatLoader } from \"react-spinners\"\nimport { useSetRecoilState } from \"recoil\"\n\nimport { signUp } from \"lib/api/auth/auth\"\nimport { CurrentUser, IsSignedIn } from \"store/auth/Auth\"\nimport { SignUpFormInputs } from \"types/form/FormInputs\"\n\nconst SignUpForm = () => {\n    const setIsSignedIn = useSetRecoilState(IsSignedIn)\n    const setCurrentUser = useSetRecoilState(CurrentUser)\n    const history = useHistory()\n    const { showMessage } = useMessage()\n\n    const { register, formState: { errors }, handleSubmit, formState, getValues } = useForm<SignUpFormInputs>({\n        mode: 'all',\n        defaultValues: {\n            name: '',\n            email: '',\n            password: '',\n            passwordConfirmation: ''\n          }\n    })\n\n    const sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));\n\n    const handleOnSubmit = async(data: SignUpFormInputs) => {\n        const params: SignUpFormInputs = {\n            name:data.name,\n            email: data.email,\n            password: data.password,\n            passwordConfirmation: data.passwordConfirmation,\n        }\n\n        try {\n            const res = await signUp(params)\n\n            if (res.status === 200) {\n                // ログインに成功した場合はCookieに各値を格納\n                Cookies.set(\"_access_token\", res.headers[\"access-token\"])\n                Cookies.set(\"_client\", res.headers[\"client\"])\n                Cookies.set(\"_uid\", res.headers[\"uid\"])\n                console.log(res);\n                \n                setIsSignedIn(true)\n                setCurrentUser(res.data.data)\n                history.push({pathname: '/'})\n            } else {\n                // showMessage({title: 'メールアドレスまたはパスワードが違います。', status: 'error'})\n                showMessage({title: '新規登録に失敗しました。', status: 'error'})\n            }\n        } catch (error) {\n            // showMessage({title: 'ログインに失敗しました。', status: 'error'})\n            showMessage({title: '新規登録に失敗しました。', status: 'error'})\n        }\n    }\n\n    return (\n        <>\n            {/* <Header /> */}\n            <Flex justify='center' align='center' h='100%' mt='90px'>\n                <Box bg='white' w={{base: '90%', md: '2xl'}} p={4} borderRadius='10px' shadow='md'>\n                    <Heading as='h1' size='lg' textAlign='center'>新規登録</Heading>\n                    <Divider my={4}/>\n                    <form onSubmit={handleSubmit(handleOnSubmit)}>\n                        <VStack spacing={5}>\n                            <FormControl id='name' isRequired isInvalid={errors.name ? true : false}>\n                                <FormLabel>ユーザーネーム</FormLabel>\n                                <Input \n                                    type='text'\n                                    // name='email' \n                                    {...register('name', { required: true, maxLength: 10})}\n                                />\n                                <FormErrorMessage>\n                                    {errors.name?.type === 'required' && 'ユーザーネームは必須です。' }\n                                    {errors.name?.type === 'maxLength' && 'ユーザーネームは10文字以内で設定してください。' }\n                                </FormErrorMessage>\n                            </FormControl>\n                            <FormControl id='email' isRequired isInvalid={errors.email ? true : false}>\n                                <FormLabel>メールアドレス</FormLabel>\n                                <Input \n                                    type='email'\n                                    // name='email' \n                                    placeholder='test@example.com' \n                                    {...register('email', { required: 'メールアドレスは必須です。', pattern: {value: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/, message: 'メールアドレス形式で入力してください。'}, })}\n                                />\n                                <FormErrorMessage>\n                                    {errors.email && errors.email.message}\n                                </FormErrorMessage>\n                            </FormControl>\n                            <FormControl id='password' isRequired isInvalid={errors.password ? true : false}>\n                                <FormLabel>パスワード</FormLabel>\n                                <Input \n                                    type='password' \n                                    // name='password'\n                                    {...register('password', {required: 'パスワードは必須です。', pattern: {value: /^(?=.*?[a-z])(?=.*?[A-Z])(?=.*?\\d)[a-zA-Z\\d]{8,100}$/, message: '半角英小文字大文字数字をそれぞれ1種類以上含む8文字以上で設定してください。'}})}\n                                />\n                                <FormErrorMessage>\n                                    {errors.password && errors.password.message}\n                                </FormErrorMessage>\n                            </FormControl>\n                            <FormControl id='passwordConfirmation' isRequired isInvalid={errors.passwordConfirmation ? true : false}>\n                                <FormLabel>確認用パスワード</FormLabel>\n                                <Input \n                                    type='password' \n                                    // name='password'\n                                    {...register('passwordConfirmation', {required: true, validate: value => value === getValues('password')})}\n                                />\n                                <FormErrorMessage>\n                                    {errors.passwordConfirmation?.type === 'required' && '確認用パスワードは必須です。'}\n                                    {errors.passwordConfirmation?.type === 'validate' && \"確認用パスワードが一致しません。\"}\n                                </FormErrorMessage>\n                            </FormControl>\n                            <Button type=\"submit\" disabled={!formState.isValid} isLoading={formState.isSubmitting} w='100%' color='white' bg='blue.400' _hover={{opacity: 0.8}} spinner={<BeatLoader size={8} color=\"white\" />}>新規登録</Button>\n                        </VStack>\n                    </form>    \n                </Box>\n            </Flex>  \n        </>\n    )\n}\n\nexport default SignUpForm","/usr/src/app/react-app/src/RecoilStatePersist.ts",[],"/usr/src/app/react-app/src/components/pages/favorites/FavoriteAnime.tsx",["243","244"],"import { Box, Center, Text, Wrap, WrapItem } from \"@chakra-ui/react\";\nimport { log } from \"console\";\nimport Cookies from \"js-cookie\";\nimport { client } from \"lib/api/client\";\nimport { useEffect, VFC } from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport { FavoriteAnimeLists } from \"store/FavoriteAnimeList\";\nimport { IsFavoriteLike } from \"store/IsFavoriteLike\";\nimport { Loding } from \"store/loding/Loding\";\nimport { DefaultSpiner } from \"util/DefaultSpiner\";\nimport FavoriteAnimeCard from \"./FavoriteAnimeCard\";\n\nconst FavoriteAnime: VFC = () => {\n    const [ loding, setLoding ] = useRecoilState(Loding)\n    const [ favoriteAnimeLists, setFavoriteAnimeList ] = useRecoilState(FavoriteAnimeLists)\n    const [ isFavoriteLike, setIsFavoriteLike ] = useRecoilState(IsFavoriteLike)\n\n    useEffect(() => {\n        let isMounted = true\n        setLoding(true)\n        const getFavoriteAnime = async() => {\n            try {\n                const FavoriteAnime = await client.get('/favorites', { headers: {\n                    \"access-token\": Cookies.get(\"_access_token\"),\n                    \"client\": Cookies.get(\"_client\"),\n                    \"uid\": Cookies.get(\"_uid\")\n                }})\n                console.log(FavoriteAnime)\n                setFavoriteAnimeList(FavoriteAnime.data)\n                setIsFavoriteLike(true)\n                setLoding(false)\n            } catch (error) {\n                throw error\n            }\n        }\n        if(isMounted) getFavoriteAnime()\n\n        return () => {\n            isMounted = false\n        }\n    }, [isFavoriteLike])\n\n    return (\n        <>\n            <Box w={{base: '90%', md: '70%'}} h='100%' bg='#ffff' m='100px auto 20px auto' borderRadius='10px'>\n                <Box justify='center' align='center' m='30px 10px 0'>\n                    <Text fontWeight='700' fontSize='1.17em' pt='30px'>\n                        ー　お気に入りアニメ　ー\n                    </Text>\n                </Box>\n                {loding ? (\n                    <Center mt='100px'>\n                        <DefaultSpiner />\n                    </Center>\n                ) : (\n                    <Wrap p={{base: 3, md: 4}} w='100%' spacing={5} justify='center' align='center'>\n                        {favoriteAnimeLists.map((favoriteAnime, index) => (\n                            <WrapItem key={index} >\n                                <FavoriteAnimeCard favoriteAnime={favoriteAnime}/>\n                            </WrapItem>\n                        ))}\n                    </Wrap>\n                )}\n            </Box>\n        </>\n    )\n}\n\nexport default FavoriteAnime","/usr/src/app/react-app/src/components/pages/favorites/FavoriteAnimeCard.tsx",["245","246","247","248"],"import { Box, Flex, Icon, Image, Link, Text } from \"@chakra-ui/react\";\nimport { useMessage } from \"customHooks/message/useMessage\";\nimport { motion, useAnimation } from \"framer-motion\";\nimport Cookies from \"js-cookie\";\nimport { client } from \"lib/api/client\";\nimport { useState, useEffect, VFC, memo, useCallback } from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport { BsHeartFill, BsHeart } from \"react-icons/bs\";\nimport { FavoriteType } from \"types/FavoriteAnime/FavoriteAnimeType\";\nimport { IsFavoriteLike } from \"store/IsFavoriteLike\";\n\ntype Props = {\n    favoriteAnime: FavoriteType;\n}\n\nconst FavoriteAnimeCard: VFC<Props> = memo((props) => {\n    const { favoriteAnime } = props\n    const [ isLike, setIsLike ] = useState(true)\n    const [ isFavoriteLike, setIsFavoriteLike ] = useRecoilState(IsFavoriteLike)\n    const controls = useAnimation()\n    const { showMessage } = useMessage()\n\n    const image = favoriteAnime.image_url !== '' ? favoriteAnime.image_url : 'https://lab.esprlog.net/annict/img/no_image.png'\n\n    const toggleLike = () => {\n        // setIsLike(!isLike)\n        \n        // if(!isLike) {\n        //     controls.start({ scale: [0, 0.5, 1] })\n        // }else {\n        //     controls.start({ translateX: [0, 0, 0, -7, 0, -7, 0, 0] })\n        // }\n\n        try {\n            const deleteLike = async() => {\n                const res = await client.delete(`/favorites/destroy/${favoriteAnime.api_id}`, { headers: {\n                    \"access-token\": Cookies.get(\"_access_token\"),\n                    \"client\": Cookies.get(\"_client\"),\n                    \"uid\": Cookies.get(\"_uid\")\n                  }})\n                console.log(res);\n            }\n            deleteLike()\n            setIsFavoriteLike(false)\n        } catch (error) {\n            showMessage({title: 'お気に入り削除に失敗しました', status: \"error\"})\n        }\n    }\n\n    // useEffect(() => {\n    //     let isMounted = true\n    //     const getLikeAnime = async() => {\n    //         const isLikeData = await client.get(`/favorites/confirm/${favoriteAnime.api_id}`, { headers: {\n    //             \"access-token\": Cookies.get(\"_access_token\"),\n    //             \"client\": Cookies.get(\"_client\"),\n    //             \"uid\": Cookies.get(\"_uid\")\n    //             }})\n    //             console.log(isLikeData.data);\n    //             let isLike = isLikeData.data\n    //             setIsLike(isLike)\n    //     }\n    //     if(isMounted) getLikeAnime()\n\n    //     return () => {\n    //         isMounted = false\n    //     }\n    // }, [isLike])\n\n    return (\n        <>\n            <Box w={{base: '300px', md: '500px'}} h={{base: '240px', md: '330px'}} bg='white' borderRadius='10px' m='15px 5px' p='0 0 10px 0' border='solid 1px #e0e0e0' position='relative'>\n                <Link as='a' href={favoriteAnime.official_url} target='_blank'>\n                    <Box display='block' m='0 0 8px' overflow='hidden' borderRadius='10px 10px 0 0'>\n                        {/* <motion.div  whileHover={{opacity: 1, scale: 1.1, transition: { duration: 0.3 }}} >\n                            <Image src={image}  w='calc(100% + 20px)' objectFit='cover' maxH={{base: '200px', md: '260px'}} _hover={{filter: 'blur(3px)'}} />\n                        </motion.div> */}\n                        <Image src={image} w='calc(100% + 20px)' objectFit='cover' maxH={{base: '200px', md: '260px'}} />\n\n                        <Box>\n                            <Text opacity='0'color='red' fontWeight='700' fontSize='25px' position='absolute' top='40%' right='30%'>View Official Site</Text>\n                        </Box>\n                    </Box>\n                </Link>\n                <Flex align='flex-start' m='10px 15px 0'>\n                    <Text as='h1' fontSize=\"md\" fontWeight='800'>{favoriteAnime.title}</Text>\n                </Flex> \n                <Flex justify='flex-end' w='100%'>\n                    <Box position='absolute' bottom='5px' right='5px'>\n                        <motion.div\n                            onClick={toggleLike}\n                            animate={controls}\n                            transition={!isLike ? { duration: 0.2 , ease: \"easeIn\"} : { duration: 0.6 , ease: \"easeIn\"}}\n                        >\n                            <Icon\n                                as={isLike ? BsHeartFill : BsHeart }\n                                fontSize='20px' \n                                color={isLike ? '#FF1493': ''}\n                                cursor='pointer'\n                            />\n                        </motion.div>\n                    </Box>\n                </Flex>\n            </Box>\n        </>\n    )\n})\n\nexport default FavoriteAnimeCard","/usr/src/app/react-app/src/store/loding/Loding.ts",[],"/usr/src/app/react-app/src/util/DefaultSpiner.tsx",[],"/usr/src/app/react-app/src/store/FavoriteAnimeList.ts",[],"/usr/src/app/react-app/src/store/IsFavoriteLike.ts",[],"/usr/src/app/react-app/src/components/pages/auth/UserProfile.tsx",["249"],"import { IconButton, Box, Button, Divider, Flex, FormControl, FormErrorMessage, FormLabel, Heading, Input, VStack, Image, Center } from \"@chakra-ui/react\"\nimport { VFC, useState, useCallback, ChangeEvent } from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport { MdPhotoCamera, MdCancel } from \"react-icons/md\";\nimport { BeatLoader } from \"react-spinners\"\nimport { useRecoilState } from \"recoil\";\nimport imageCompression from \"browser-image-compression\";\n\nimport { CurrentUser } from \"store/auth/Auth\";\nimport { UserProfileUpdate } from \"types/form/FormInputs\"\nimport { getCurrentUser, updateUserProfile } from \"lib/api/auth/auth\";\nimport { useMessage } from \"customHooks/message/useMessage\";\n\n\nconst UserProfile: VFC = () => {\n    const [ currentUser, setCurrentUser ] = useRecoilState(CurrentUser)\n    const [ preview, setPreview ] = useState<string>('')\n    const [ userImage, setUserImage ] = useState<string | null>(currentUser?.image?.url ?? null)\n    const [ uploadImage, setUploadImage ] = useState<File | null>()\n    const { showMessage } = useMessage()\n    \n    const { register, formState: { errors }, handleSubmit, formState } = useForm<UserProfileUpdate>({\n        mode: 'all',\n        defaultValues: {\n            name: currentUser?.name,\n            email: currentUser?.email,\n        }\n    })\n\n    // ダミー画像\n    const defaultSrc =　\"https://www.pngkit.com/png/full/301-3012694_account-user-profile-avatar-comments-fa-user-circle.png\";\n\n    const handleUpdateProfile = async(data: UserProfileUpdate) => {\n        const { name, email } = data\n\n        const formData = new FormData()\n        formData.set(\"name\", name)\n        formData.set(\"email\", email)\n\n        //画像ファイルがあれば実行\n        if(uploadImage) {\n            //ファイル圧縮オプション 3MB以下\n            const compressOptions = {\n                maxSizeMB: 3,\n            }\n    \n            const imageData = await imageCompression(uploadImage, compressOptions)\n            formData.set(\"image\", imageData, uploadImage.name)\n            console.log(uploadImage)\n        }else if(!uploadImage) {\n            formData.set(\"image\", '')\n        }\n\n        try {            \n            const res = await updateUserProfile(formData)\n            if (res.status === 200) {\n                const user = await getCurrentUser()\n                setCurrentUser(user?.data.data)\n                showMessage({title: 'プロフィールを更新しました。', status: 'success'})\n            } else {\n                showMessage({title: 'プロフィールの更新に失敗しました。', status: 'error'})\n            }\n        } catch (error) {\n            console.log(error)\n            showMessage({title: 'プロフィールの更新に失敗しました。', status: 'error'})\n        }\n    }\n\n    // プレビュー機能\n    const previewImage = useCallback((e) => {\n        const file = e.target.files[0]\n        setPreview(window.URL.createObjectURL(file))\n    }, [])\n\n    // アップロード\n    const handleUploadImage = useCallback((e) => {\n        const file = e.target.files[0]\n        setUploadImage(file)\n    }, [])\n\n    // アップロード画像削除\n    const ImageDelete = useCallback(() => {\n        setPreview('')\n        setUserImage(null)\n        setUploadImage(null)\n    }, [])\n\n    return (\n        <>\n            <Flex justify='center' align='center' h='100%' mt='90px'>\n                <Box bg='white' w={{base: '90%', md: '2xl'}} p={4} borderRadius='10px' shadow='md'>\n                    <Heading as='h1' size='lg' textAlign='center'>プロフィール編集</Heading>\n                    <Divider my={4}/>\n                    <form onSubmit={handleSubmit(handleUpdateProfile)}>\n                        <VStack spacing={5}>\n                            <FormControl id='image' mb='20px'>\n                                <Center>\n                                    <Flex flexDirection='column' align='center' justify='center' position='relative'>\n                                        <Box position='absolute' top='0' left='10px' cursor='pointer' _hover={{bg: 'none'}} onClick={ImageDelete}>\n                                            <MdCancel size='25px'/>\n                                        </Box>\n                                        <Box w='200px' h='200px' borderRadius='999px' mb='20px'>\n                                            <Image \n                                                src={preview ? preview : (\n                                                    userImage ?? defaultSrc\n                                                )} \n                                                alt=\"preview img\" \n                                                w='200px' \n                                                h='200px' \n                                                objectFit='cover' \n                                                borderRadius='999px'\n                                            \n                                            />\n                                        </Box>\n                                        <FormLabel htmlFor=\"avatar\">\n                                            <Input\n                                                display=\"none\"\n                                                type=\"file\"\n                                                id=\"avatar\"\n                                                name=\"image\"\n                                                accept=\"image/*\"\n                                                onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                                                    handleUploadImage(e)\n                                                    previewImage(e)\n                                                }}\n                                            />\n                                            {/* <IconButton as='span' id=\"avatar\" cursor='pointer' aria-label='upload picture'>\n                                                <MdPhotoCamera size='30px'/>\n                                            </IconButton> */}\n                                            <Button leftIcon={<MdPhotoCamera size='25px'/>} as='span' cursor='pointer' colorScheme=\"teal\" variant=\"solid\">\n                                                画像をアップロード\n                                            </Button>\n                                        </FormLabel>\n                                    </Flex>\n                                </Center>\n                            </FormControl>\n                            <FormControl id='name' isRequired isInvalid={errors.name ? true : false}>\n                                <FormLabel>ユーザーネーム</FormLabel>\n                                <Input \n                                    type='text'\n                                    {...register('name', {required: true, maxLength: 10})}\n                                />\n                                <FormErrorMessage>\n                                    {errors.name?.type === 'required' && 'ユーザーネームは必須です。' }\n                                    {errors.name?.type === 'maxLength' && 'ユーザーネームは10文字以内で設定してください。' }\n                                </FormErrorMessage>\n                            </FormControl>\n                            <FormControl id='email' isRequired isInvalid={errors.email ? true : false}>\n                                <FormLabel>メールアドレス</FormLabel>\n                                <Input \n                                    type='email'\n                                    // name='email' \n                                    placeholder='test@example.com' \n                                    {...register('email', { required: 'メールアドレスは必須です。', pattern: {value: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/, message: \"メールアドレス形式で入力してください。\"}, })}\n                                />\n                                <FormErrorMessage>\n                                    {errors.email && errors.email.message}\n                                </FormErrorMessage>\n                            </FormControl>\n                            <Button type=\"submit\" disabled={!formState.isValid} isLoading={formState.isSubmitting} w='100%' color='white' bg='blue.400' _hover={{opacity: 0.8}} spinner={<BeatLoader size={8} color=\"white\" />}>更新</Button>\n                        </VStack>\n                    </form>\n                </Box>\n            </Flex>\n        </>\n    )\n}\n\nexport default UserProfile","/usr/src/app/react-app/src/components/pages/auth/EditPassword.tsx",["250","251","252"],"import { Box, Button, Center, Divider, Flex, FormControl, FormErrorMessage, FormLabel, Heading, Input, VStack } from \"@chakra-ui/react\"\nimport { useMessage } from \"customHooks/message/useMessage\"\nimport { getCurrentUser, updatePassword } from \"lib/api/auth/auth\"\nimport { useForm } from \"react-hook-form\"\nimport { BeatLoader } from \"react-spinners\"\nimport { useRecoilState } from \"recoil\"\nimport { CurrentUser } from \"store/auth/Auth\"\nimport { EditPasswordUpdate } from \"types/form/FormInputs\"\n\nconst EditPassword = () => {\n    const [ currentUser, setCurrentUser ] = useRecoilState(CurrentUser)\n    const { register, handleSubmit, formState: {errors}, formState, getValues } = useForm<EditPasswordUpdate>({\n        mode: 'all',\n        defaultValues: {\n            password: '',\n            passwordConfirmation: ''\n        }\n    })\n\n    const { showMessage } = useMessage()\n\n    const handleUpdatePassword = async(data: EditPasswordUpdate) => {\n        const params: EditPasswordUpdate = {\n            password: data.password,\n            passwordConfirmation: data.passwordConfirmation\n        }\n        const { password, passwordConfirmation } = data\n        const formData = new FormData()\n        formData.set('password', password)\n        formData.set('password_confirmation', passwordConfirmation)\n        try {\n            const res = await updatePassword(formData)\n            console.log(res);\n            \n            // if () {\n                const user = await getCurrentUser()\n                setCurrentUser(user?.data.data)\n                showMessage({title: 'パスワードを更新しました。再度ログインしてください', status: 'success'})\n            // } else {\n            // }\n        } catch (error) {\n            console.log(error)\n            showMessage({title: 'プロフィールの更新に失敗しました。', status: 'error'})\n        }\n        \n    }\n    return (\n        <>\n            <Flex justify='center' align='center' h='100%' mt='90px'>\n                <Box bg='white' w={{base: '90%', md: '2xl'}} p={4} borderRadius='10px' shadow='md'>\n                    <Heading as='h1' size='lg' textAlign='center'>パスワード変更</Heading>\n                    <Divider my={4}/>\n                    <form onSubmit={handleSubmit(handleUpdatePassword)}>\n                        <VStack spacing={5}>\n                            <FormControl id='password' isRequired isInvalid={errors.password ? true : false}>\n                                <FormLabel>新しいパスワード</FormLabel>\n                                <Input \n                                    type='password'\n                                    {...register('password', {required: 'パスワードは必須です。', pattern: {value: /^(?=.*?[a-z])(?=.*?[A-Z])(?=.*?\\d)[a-zA-Z\\d]{8,100}$/, message: '半角英小文字大文字数字をそれぞれ1種類以上含む8文字以上で設定してください。'}})}\n                                />\n                                <FormErrorMessage>\n                                    {errors.password && errors.password.message}\n                                </FormErrorMessage>\n                            </FormControl>\n                            <FormControl id='passwordConfirmation' isRequired isInvalid={errors.passwordConfirmation ? true : false}>\n                                <FormLabel>新しいパスワード確認用</FormLabel>\n                                <Input \n                                   type='password'\n                                   {...register('passwordConfirmation', {required: true, validate: value => value === getValues('password')})}\n                                   />\n                                <FormErrorMessage>\n                                    {errors.passwordConfirmation?.type === 'required' && '確認用パスワードは必須です。'}\n                                    {errors.passwordConfirmation?.type === 'validate' && \"確認用パスワードが一致しません。\"}\n                                </FormErrorMessage>\n                            </FormControl>\n                            <Button type=\"submit\" disabled={!formState.isValid} isLoading={formState.isSubmitting} w='100%' color='white' bg='blue.400' _hover={{opacity: 0.8}} spinner={<BeatLoader size={8} color=\"white\" />}>更新</Button>\n                        </VStack>\n                    </form>\n                </Box>\n            </Flex>\n\n        </>\n    )\n}\n\nexport default EditPassword","/usr/src/app/react-app/src/lib/motionVariants/variants.ts",[],{"ruleId":"253","replacedBy":"254"},{"ruleId":"255","replacedBy":"256"},{"ruleId":"257","severity":1,"message":"258","line":17,"column":13,"nodeType":"259","messageId":"260","endLine":17,"endColumn":19},{"ruleId":"257","severity":1,"message":"261","line":17,"column":21,"nodeType":"259","messageId":"260","endLine":17,"endColumn":30},{"ruleId":"262","severity":1,"message":"263","line":49,"column":8,"nodeType":"264","endLine":49,"endColumn":20,"suggestions":"265"},{"ruleId":"257","severity":1,"message":"266","line":19,"column":11,"nodeType":"259","messageId":"260","endLine":19,"endColumn":21},{"ruleId":"257","severity":1,"message":"267","line":20,"column":11,"nodeType":"259","messageId":"260","endLine":20,"endColumn":19},{"ruleId":"257","severity":1,"message":"268","line":24,"column":13,"nodeType":"259","messageId":"260","endLine":24,"endColumn":24},{"ruleId":"262","severity":1,"message":"269","line":29,"column":8,"nodeType":"264","endLine":29,"endColumn":35,"suggestions":"270"},{"ruleId":"262","severity":1,"message":"271","line":33,"column":8,"nodeType":"264","endLine":33,"endColumn":21,"suggestions":"272"},{"ruleId":"257","severity":1,"message":"273","line":17,"column":13,"nodeType":"259","messageId":"260","endLine":17,"endColumn":23},{"ruleId":"257","severity":1,"message":"274","line":18,"column":13,"nodeType":"259","messageId":"260","endLine":18,"endColumn":24},{"ruleId":"257","severity":1,"message":"275","line":2,"column":94,"nodeType":"259","messageId":"260","endLine":2,"endColumn":98},{"ruleId":"257","severity":1,"message":"276","line":3,"column":10,"nodeType":"259","messageId":"260","endLine":3,"endColumn":24},{"ruleId":"262","severity":1,"message":"277","line":16,"column":8,"nodeType":"264","endLine":16,"endColumn":20,"suggestions":"278"},{"ruleId":"262","severity":1,"message":"279","line":18,"column":8,"nodeType":"264","endLine":18,"endColumn":20,"suggestions":"280"},{"ruleId":"257","severity":1,"message":"281","line":14,"column":25,"nodeType":"259","messageId":"260","endLine":14,"endColumn":38},{"ruleId":"257","severity":1,"message":"282","line":10,"column":13,"nodeType":"259","messageId":"260","endLine":10,"endColumn":23},{"ruleId":"257","severity":1,"message":"283","line":10,"column":25,"nodeType":"259","messageId":"260","endLine":10,"endColumn":38},{"ruleId":"257","severity":1,"message":"284","line":19,"column":11,"nodeType":"259","messageId":"260","endLine":19,"endColumn":29},{"ruleId":"257","severity":1,"message":"285","line":3,"column":49,"nodeType":"259","messageId":"260","endLine":3,"endColumn":55},{"ruleId":"257","severity":1,"message":"286","line":15,"column":17,"nodeType":"259","messageId":"260","endLine":15,"endColumn":24},{"ruleId":"257","severity":1,"message":"287","line":24,"column":13,"nodeType":"259","messageId":"260","endLine":24,"endColumn":23},{"ruleId":"257","severity":1,"message":"288","line":24,"column":25,"nodeType":"259","messageId":"260","endLine":24,"endColumn":38},{"ruleId":"257","severity":1,"message":"289","line":49,"column":31,"nodeType":"259","messageId":"260","endLine":49,"endColumn":34},{"ruleId":"262","severity":1,"message":"290","line":101,"column":8,"nodeType":"264","endLine":101,"endColumn":16,"suggestions":"291"},{"ruleId":"257","severity":1,"message":"292","line":2,"column":10,"nodeType":"259","messageId":"260","endLine":2,"endColumn":24},{"ruleId":"257","severity":1,"message":"293","line":3,"column":10,"nodeType":"259","messageId":"260","endLine":3,"endColumn":21},{"ruleId":"257","severity":1,"message":"294","line":4,"column":10,"nodeType":"259","messageId":"260","endLine":4,"endColumn":21},{"ruleId":"257","severity":1,"message":"295","line":13,"column":7,"nodeType":"259","messageId":"260","endLine":13,"endColumn":19},{"ruleId":"257","severity":1,"message":"296","line":22,"column":7,"nodeType":"259","messageId":"260","endLine":22,"endColumn":21},{"ruleId":"257","severity":1,"message":"297","line":1,"column":10,"nodeType":"259","messageId":"260","endLine":1,"endColumn":19},{"ruleId":"257","severity":1,"message":"298","line":2,"column":26,"nodeType":"259","messageId":"260","endLine":2,"endColumn":40},{"ruleId":"257","severity":1,"message":"299","line":16,"column":26,"nodeType":"259","messageId":"260","endLine":16,"endColumn":40},{"ruleId":"257","severity":1,"message":"300","line":2,"column":8,"nodeType":"259","messageId":"260","endLine":2,"endColumn":13},{"ruleId":"257","severity":1,"message":"301","line":1,"column":10,"nodeType":"259","messageId":"260","endLine":1,"endColumn":21},{"ruleId":"262","severity":1,"message":"277","line":14,"column":8,"nodeType":"264","endLine":14,"endColumn":20,"suggestions":"302"},{"ruleId":"253","replacedBy":"303"},{"ruleId":"255","replacedBy":"304"},{"ruleId":"257","severity":1,"message":"305","line":6,"column":6,"nodeType":"259","messageId":"260","endLine":6,"endColumn":9},{"ruleId":"257","severity":1,"message":"284","line":11,"column":11,"nodeType":"259","messageId":"260","endLine":11,"endColumn":29},{"ruleId":"257","severity":1,"message":"306","line":23,"column":11,"nodeType":"259","messageId":"260","endLine":23,"endColumn":41},{"ruleId":"262","severity":1,"message":"279","line":26,"column":8,"nodeType":"264","endLine":26,"endColumn":20,"suggestions":"307"},{"ruleId":"257","severity":1,"message":"275","line":1,"column":96,"nodeType":"259","messageId":"260","endLine":1,"endColumn":100},{"ruleId":"257","severity":1,"message":"308","line":9,"column":10,"nodeType":"259","messageId":"260","endLine":9,"endColumn":21},{"ruleId":"257","severity":1,"message":"309","line":31,"column":11,"nodeType":"259","messageId":"260","endLine":31,"endColumn":16},{"ruleId":"257","severity":1,"message":"310","line":4,"column":10,"nodeType":"259","messageId":"260","endLine":4,"endColumn":28},{"ruleId":"257","severity":1,"message":"311","line":4,"column":30,"nodeType":"259","messageId":"260","endLine":4,"endColumn":47},{"ruleId":"257","severity":1,"message":"312","line":2,"column":8,"nodeType":"259","messageId":"260","endLine":2,"endColumn":14},{"ruleId":"257","severity":1,"message":"308","line":5,"column":10,"nodeType":"259","messageId":"260","endLine":5,"endColumn":21},{"ruleId":"257","severity":1,"message":"309","line":31,"column":11,"nodeType":"259","messageId":"260","endLine":31,"endColumn":16},{"ruleId":"257","severity":1,"message":"313","line":2,"column":10,"nodeType":"259","messageId":"260","endLine":2,"endColumn":13},{"ruleId":"262","severity":1,"message":"314","line":41,"column":8,"nodeType":"264","endLine":41,"endColumn":24,"suggestions":"315"},{"ruleId":"257","severity":1,"message":"297","line":6,"column":20,"nodeType":"259","messageId":"260","endLine":6,"endColumn":29},{"ruleId":"257","severity":1,"message":"308","line":6,"column":42,"nodeType":"259","messageId":"260","endLine":6,"endColumn":53},{"ruleId":"257","severity":1,"message":"316","line":18,"column":21,"nodeType":"259","messageId":"260","endLine":18,"endColumn":30},{"ruleId":"257","severity":1,"message":"317","line":19,"column":13,"nodeType":"259","messageId":"260","endLine":19,"endColumn":27},{"ruleId":"257","severity":1,"message":"318","line":1,"column":10,"nodeType":"259","messageId":"260","endLine":1,"endColumn":20},{"ruleId":"257","severity":1,"message":"319","line":1,"column":23,"nodeType":"259","messageId":"260","endLine":1,"endColumn":29},{"ruleId":"257","severity":1,"message":"274","line":11,"column":13,"nodeType":"259","messageId":"260","endLine":11,"endColumn":24},{"ruleId":"257","severity":1,"message":"320","line":23,"column":15,"nodeType":"259","messageId":"260","endLine":23,"endColumn":41},"no-native-reassign",["321"],"no-negated-in-lhs",["322"],"@typescript-eslint/no-unused-vars","'loding' is assigned a value but never used.","Identifier","unusedVar","'setLoding' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleGetCurrentUser'. Either include it or remove the dependency array.","ArrayExpression",["323"],"'selectCour' is assigned a value but never used.","'location' is assigned a value but never used.","'showMessage' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'setApiKeyValue'. Either include it or remove the dependency array.",["324"],"React Hook useEffect has a missing dependency: 'getAnimes'. Either include it or remove the dependency array.",["325"],"'authLoding' is assigned a value but never used.","'currentUser' is assigned a value but never used.","'Text' is defined but never used.","'RiMenuFoldLine' is defined but never used.","React Hook useCallback has a missing dependency: 'setSelectyear'. Either include it or remove the dependency array.",["326"],"React Hook useCallback has a missing dependency: 'setSelectCour'. Either include it or remove the dependency array.",["327"],"'setSelectCour' is assigned a value but never used.","'selectYear' is assigned a value but never used.","'setSelectyear' is assigned a value but never used.","'cours_detail_month' is assigned a value but never used.","'useRef' is defined but never used.","'visible' is defined but never used.","'toggleLike' is assigned a value but never used.","'setToggleLike' is assigned a value but never used.","'res' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'animeList.id'. Either include it or remove the dependency array.",["328"],"'useCourFactory' is defined but never used.","'YearFactory' is defined but never used.","'CourFactory' is defined but never used.","'current_year' is assigned a value but never used.","'current_season' is assigned a value but never used.","'useEffect' is defined but never used.","'useRecoilValue' is defined but never used.","'setApiKeyValue' is assigned a value but never used.","'React' is defined but never used.","'ChangeEvent' is defined but never used.",["329"],["321"],["322"],"'get' is defined but never used.","'handleChangeCour' is assigned a value but never used.",["330"],"'useCallback' is defined but never used.","'sleep' is assigned a value but never used.","'EditPasswordUpdate' is defined but never used.","'UserProfileUpdate' is defined but never used.","'Header' is defined but never used.","'log' is defined but never used.","React Hook useEffect has missing dependencies: 'setFavoriteAnimeList', 'setIsFavoriteLike', and 'setLoding'. Either include them or remove the dependency array.",["331"],"'setIsLike' is assigned a value but never used.","'isFavoriteLike' is assigned a value but never used.","'IconButton' is defined but never used.","'Center' is defined but never used.","'params' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"332","fix":"333"},{"desc":"334","fix":"335"},{"desc":"336","fix":"337"},{"desc":"338","fix":"339"},{"desc":"340","fix":"341"},{"desc":"342","fix":"343"},{"desc":"338","fix":"344"},{"desc":"340","fix":"345"},{"desc":"346","fix":"347"},"Update the dependencies array to be: [handleGetCurrentUser, isSignedIn]",{"range":"348","text":"349"},"Update the dependencies array to be: [selectYear, select_season, setApiKeyValue]",{"range":"350","text":"351"},"Update the dependencies array to be: [apiKeyValue, getAnimes]",{"range":"352","text":"353"},"Update the dependencies array to be: [setSelectyear]",{"range":"354","text":"355"},"Update the dependencies array to be: [setSelectCour]",{"range":"356","text":"357"},"Update the dependencies array to be: [animeList.id, isLike]",{"range":"358","text":"359"},{"range":"360","text":"355"},{"range":"361","text":"357"},"Update the dependencies array to be: [isFavoriteLike, setFavoriteAnimeList, setIsFavoriteLike, setLoding]",{"range":"362","text":"363"},[1778,1790],"[handleGetCurrentUser, isSignedIn]",[1175,1202],"[selectYear, select_season, setApiKeyValue]",[1262,1275],"[apiKeyValue, getAnimes]",[584,596],"[setSelectyear]",[605,617],"[setSelectCour]",[4000,4008],"[animeList.id, isLike]",[502,514],[965,977],[1566,1582],"[isFavoriteLike, setFavoriteAnimeList, setIsFavoriteLike, setLoding]"]