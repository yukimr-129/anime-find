[{"/usr/src/app/react-app/src/index.tsx":"1","/usr/src/app/react-app/src/reportWebVitals.ts":"2","/usr/src/app/react-app/src/App.tsx":"3","/usr/src/app/react-app/src/defaultStyle/theme.ts":"4","/usr/src/app/react-app/src/routing/Router.tsx":"5","/usr/src/app/react-app/src/components/pages/TopPage.tsx":"6","/usr/src/app/react-app/src/components/organisms/Header.tsx":"7","/usr/src/app/react-app/src/components/atoms/header/MenuBar.tsx":"8","/usr/src/app/react-app/src/components/atoms/header/Logo.tsx":"9","/usr/src/app/react-app/src/components/organisms/Search.tsx":"10","/usr/src/app/react-app/src/components/atoms/form/YearInput.tsx":"11","/usr/src/app/react-app/src/components/atoms/button/PraimaryButton.tsx":"12","/usr/src/app/react-app/src/store/Year.ts":"13","/usr/src/app/react-app/src/store/Cour.ts":"14","/usr/src/app/react-app/src/components/atoms/form/CourInput.tsx":"15","/usr/src/app/react-app/src/customHooks/useCourFactory.ts":"16","/usr/src/app/react-app/src/customHooks/useYearFactory.ts":"17","/usr/src/app/react-app/src/components/organisms/AnimeCardList.tsx":"18","/usr/src/app/react-app/src/components/molecules/animeCard/AnimeCard.tsx":"19","/usr/src/app/react-app/src/store/ApiKeyValue.ts":"20","/usr/src/app/react-app/src/customHooks/useAnimeApiSearch.ts":"21","/usr/src/app/react-app/src/customHooks/message/useMessage.ts":"22","/usr/src/app/react-app/src/lib/api/client.ts":"23","/usr/src/app/react-app/src/store/AnimeLists.ts":"24","/usr/src/app/react-app/src/components/pages/auth/SigninForm.tsx":"25","/usr/src/app/react-app/src/store/loding/AuthLoding.ts":"26","/usr/src/app/react-app/src/store/auth/Auth.ts":"27","/usr/src/app/react-app/src/lib/api/auth/auth.ts":"28","/usr/src/app/react-app/src/components/templates/CommonLayout.tsx":"29","/usr/src/app/react-app/src/components/pages/auth/SignUpForm.tsx":"30","/usr/src/app/react-app/src/RecoilStatePersist.ts":"31","/usr/src/app/react-app/src/components/pages/favorites/FavoriteAnime.tsx":"32","/usr/src/app/react-app/src/components/pages/favorites/FavoriteAnimeCard.tsx":"33","/usr/src/app/react-app/src/store/loding/Loding.ts":"34","/usr/src/app/react-app/src/util/DefaultSpiner.tsx":"35","/usr/src/app/react-app/src/store/FavoriteAnimeList.ts":"36","/usr/src/app/react-app/src/store/IsFavoriteLike.ts":"37","/usr/src/app/react-app/src/components/pages/auth/UserProfile.tsx":"38","/usr/src/app/react-app/src/components/pages/auth/EditPassword.tsx":"39","/usr/src/app/react-app/src/lib/motionVariants/variants.ts":"40","/usr/src/app/react-app/src/components/molecules/reviewModal/ReviewModal.tsx":"41","/usr/src/app/react-app/src/components/pages/review/ReviewPage.tsx":"42","/usr/src/app/react-app/src/components/pages/error/Page404.tsx":"43","/usr/src/app/react-app/src/customHooks/useGetSize.ts":"44","/usr/src/app/react-app/src/components/organisms/ReviewList.tsx":"45","/usr/src/app/react-app/src/util/ScrollToTop.tsx":"46","/usr/src/app/react-app/src/lib/api/review/review.ts":"47","/usr/src/app/react-app/src/customHooks/useGetAnimeReviews.ts":"48","/usr/src/app/react-app/src/store/AnimeReviewList.ts":"49","/usr/src/app/react-app/src/customHooks/auth/useSignOut.ts":"50","/usr/src/app/react-app/src/store/loding/HasMore.ts":"51","/usr/src/app/react-app/src/customHooks/useNextAnimes.ts":"52","/usr/src/app/react-app/src/store/LoadPage.ts":"53","/usr/src/app/react-app/src/customHooks/useGetReviewCount.ts":"54","/usr/src/app/react-app/src/store/ReviewReflection.ts":"55","/usr/src/app/react-app/src/lib/api/favorite/favorite.ts":"56"},{"size":1633,"mtime":1642605383522,"results":"57","hashOfConfig":"58"},{"size":425,"mtime":1628233379339,"results":"59","hashOfConfig":"58"},{"size":131,"mtime":1629362646525,"results":"60","hashOfConfig":"58"},{"size":624,"mtime":1628731589265,"results":"61","hashOfConfig":"58"},{"size":3445,"mtime":1642835863037,"results":"62","hashOfConfig":"58"},{"size":959,"mtime":1642841571783,"results":"63","hashOfConfig":"58"},{"size":3531,"mtime":1642167319557,"results":"64","hashOfConfig":"58"},{"size":2356,"mtime":1642167339326,"results":"65","hashOfConfig":"58"},{"size":354,"mtime":1640847619305,"results":"66","hashOfConfig":"58"},{"size":1043,"mtime":1629362826840,"results":"67","hashOfConfig":"58"},{"size":1091,"mtime":1642752063584,"results":"68","hashOfConfig":"58"},{"size":645,"mtime":1629362840557,"results":"69","hashOfConfig":"58"},{"size":220,"mtime":1628513989333,"results":"70","hashOfConfig":"58"},{"size":300,"mtime":1641098181138,"results":"71","hashOfConfig":"58"},{"size":1381,"mtime":1642605318091,"results":"72","hashOfConfig":"58"},{"size":1452,"mtime":1642249095408,"results":"73","hashOfConfig":"58"},{"size":469,"mtime":1642247326024,"results":"74","hashOfConfig":"58"},{"size":2964,"mtime":1642831281203,"results":"75","hashOfConfig":"58"},{"size":7398,"mtime":1642838659261,"results":"76","hashOfConfig":"58"},{"size":902,"mtime":1642334336626,"results":"77","hashOfConfig":"58"},{"size":1870,"mtime":1642834836568,"results":"78","hashOfConfig":"58"},{"size":558,"mtime":1628656853474,"results":"79","hashOfConfig":"58"},{"size":108,"mtime":1642736317099,"results":"80","hashOfConfig":"58"},{"size":182,"mtime":1628693800388,"results":"81","hashOfConfig":"58"},{"size":4818,"mtime":1642834031481,"results":"82","hashOfConfig":"58"},{"size":117,"mtime":1628846185209,"results":"83","hashOfConfig":"58"},{"size":266,"mtime":1628846076076,"results":"84","hashOfConfig":"58"},{"size":1710,"mtime":1642736305319,"results":"85","hashOfConfig":"58"},{"size":318,"mtime":1642071723407,"results":"86","hashOfConfig":"58"},{"size":6728,"mtime":1642071769667,"results":"87","hashOfConfig":"58"},{"size":637,"mtime":1629209242570,"results":"88","hashOfConfig":"58"},{"size":2626,"mtime":1642841551890,"results":"89","hashOfConfig":"58"},{"size":4061,"mtime":1642841536495,"results":"90","hashOfConfig":"58"},{"size":110,"mtime":1631429503836,"results":"91","hashOfConfig":"58"},{"size":268,"mtime":1631429947133,"results":"92","hashOfConfig":"58"},{"size":208,"mtime":1641623341211,"results":"93","hashOfConfig":"58"},{"size":125,"mtime":1632030399677,"results":"94","hashOfConfig":"58"},{"size":8718,"mtime":1642227379422,"results":"95","hashOfConfig":"58"},{"size":4567,"mtime":1642831401497,"results":"96","hashOfConfig":"58"},{"size":399,"mtime":1640859007523,"results":"97","hashOfConfig":"58"},{"size":6470,"mtime":1642831359401,"results":"98","hashOfConfig":"58"},{"size":2842,"mtime":1642780524692,"results":"99","hashOfConfig":"58"},{"size":851,"mtime":1641277407315,"results":"100","hashOfConfig":"58"},{"size":403,"mtime":1641365563767,"results":"101","hashOfConfig":"58"},{"size":1458,"mtime":1642783038718,"results":"102","hashOfConfig":"58"},{"size":338,"mtime":1641367560942,"results":"103","hashOfConfig":"58"},{"size":753,"mtime":1642690595681,"results":"104","hashOfConfig":"58"},{"size":1559,"mtime":1642834721684,"results":"105","hashOfConfig":"58"},{"size":199,"mtime":1641623540449,"results":"106","hashOfConfig":"58"},{"size":1289,"mtime":1642229454698,"results":"107","hashOfConfig":"58"},{"size":111,"mtime":1642249795746,"results":"108","hashOfConfig":"58"},{"size":2422,"mtime":1642834286497,"results":"109","hashOfConfig":"58"},{"size":110,"mtime":1642313249151,"results":"110","hashOfConfig":"58"},{"size":1115,"mtime":1642831713476,"results":"111","hashOfConfig":"58"},{"size":129,"mtime":1642738625293,"results":"112","hashOfConfig":"58"},{"size":985,"mtime":1642832329103,"results":"113","hashOfConfig":"58"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},"16ps9v5",{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"116"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"128","messages":"129","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"116"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"116"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"116"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"116"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"116"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"116"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"160","messages":"161","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"116"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"116"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"116"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"116"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"116"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"116"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"192","messages":"193","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"116"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"116"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"116"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"116"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"116"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"116"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"116"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"116"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"116"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},"/usr/src/app/react-app/src/index.tsx",[],["250","251"],"/usr/src/app/react-app/src/reportWebVitals.ts",[],"/usr/src/app/react-app/src/App.tsx",[],"/usr/src/app/react-app/src/defaultStyle/theme.ts",[],"/usr/src/app/react-app/src/routing/Router.tsx",["252","253","254"],"import { memo, useEffect, useState, VFC } from 'react'\n\nimport { Redirect, Route, Switch } from \"react-router-dom\"\nimport { useRecoilState } from \"recoil\"\n\nimport TopPage from \"../components/pages/TopPage\"\nimport SignUpForm from '../components/pages/auth/SignUpForm'\nimport SigninForm from '../components/pages/auth/SigninForm'\nimport { AuthLoding } from \"store/loding/AuthLoding\"\nimport { CurrentUser, IsSignedIn } from \"store/auth/Auth\"\nimport { getCurrentUser } from \"lib/api/auth/auth\"\nimport CommonLayout from 'components/templates/CommonLayout'\nimport FavoriteAnime from 'components/pages/favorites/FavoriteAnime'\nimport UserProfile from 'components/pages/auth/UserProfile'\nimport EditPassword from 'components/pages/auth/EditPassword'\nimport ReviewPage from 'components/pages/review/ReviewPage'\nimport Page404 from 'components/pages/error/Page404'\n\nconst Router: VFC = memo(() => {\n    const [ authLoding, setAuthLoding] = useRecoilState(AuthLoding)\n    const [ isSignedIn, setIsSignedIn ] = useRecoilState(IsSignedIn)\n    const [ currentUser, setCurrentUser ] = useRecoilState(CurrentUser)\n\n    // 認証済みのユーザーがいるかどうかチェック\n    // 確認できた場合はそのユーザーの情報を取得\n    const handleGetCurrentUser = async () => {\n        try {\n        const res = await getCurrentUser()\n            \n            if (res?.data.is_login === true) {\n                setIsSignedIn(true)\n                setCurrentUser(res?.data.data)\n            } else {\n                setIsSignedIn(false)\n                setCurrentUser(undefined)\n            }\n        } catch (error) {\n            console.error(error)\n        }\n        \n        setAuthLoding(false)\n    }\n\n    useEffect(() => {\n        handleGetCurrentUser()\n    }, [isSignedIn])\n\n    return (\n        <CommonLayout>\n            <Switch>\n                <Route exact path=\"/signup\" render={() => (\n                    <SignUpForm />\n                )} />\n\n                <Route exact path=\"/signin\" render={() => (\n                    <SigninForm />\n                )} />\n                    \n                {!authLoding && isSignedIn ? (\n                    <>\n                        <Switch>\n                            <Route exact path='/' render={() => (\n                                <TopPage />\n                            )} />\n                            <Route path='/like/:user_id' render={() => (\n                                <FavoriteAnime />\n                            )} />\n                            <Route path='/review/:anime_id' render={() => (\n                                <ReviewPage />\n                            )} />\n                            <Route path='/profile/:user_id' render={() => (\n                                <UserProfile />\n                            )} />\n                            <Route path='/edit-password/:user_id' render={() => (\n                                <EditPassword />\n                            )} />\n                            <Route path='*' render={() => (\n                                <Page404 />\n                            )} />\n                        </Switch>\n                    </>\n                ) : (\n                    <Redirect to=\"/signin\" />\n                )}\n\n                <Route path=\"*\" render={() => (\n                    <Page404 />\n                )} />\n            </Switch>\n        </CommonLayout>\n    )\n})\n\nexport default Router","/usr/src/app/react-app/src/components/pages/TopPage.tsx",["255","256"],"/usr/src/app/react-app/src/components/organisms/Header.tsx",["257","258","259","260","261"],"import { memo, VFC } from \"react\"\n\nimport { Flex, Box, Button, HStack, LinkBox } from \"@chakra-ui/react\"\nimport { useRecoilState, useRecoilValue } from \"recoil\"\nimport Cookies from \"js-cookie\"\n\nimport Logo from \"../atoms/header/Logo\"\nimport MenuBar from \"../atoms/header/MenuBar\"\nimport { CurrentUser, IsSignedIn } from \"store/auth/Auth\"\nimport { AuthLoding } from \"store/loding/AuthLoding\"\nimport { useHistory } from \"react-router-dom\"\nimport { signOut } from \"lib/api/auth/auth\"\nimport { useMessage } from \"customHooks/message/useMessage\"\nimport { useSignOut } from \"customHooks/auth/useSignOut\"\n\nconst Header: VFC = memo(() => {\n    const history = useHistory()\n    const isSignedIn = useRecoilValue(IsSignedIn)\n    const currentUser = useRecoilValue(CurrentUser)\n    const [ authLoding, setAuthLoding] = useRecoilState(AuthLoding)\n    const { executionSignOut } = useSignOut('ログアウトしました')\n    const { showMessage } = useMessage()\n\n    //ログアウト\n    const handleSignOut = async(e: React.MouseEvent<HTMLButtonElement>) => {\n        try {\n            // const res = await signOut()\n            \n            // if (res.data.success === true){\n            //      // サインアウト時には各Cookieを削除\n            //     Cookies.remove(\"_access_token\")\n            //     Cookies.remove(\"_client\")\n            //     Cookies.remove(\"_uid\")\n\n            //     setIsSignedIn(false)\n            //     setAuthLoding(true)\n                \n            //     setCurrentUser(undefined)\n            //     history.push('/signin')\n\n            //     showMessage({title: 'ログアウトしました', status: 'info'})\n            // }\n            await executionSignOut()\n            \n        } catch (error) {\n            showMessage({title: 'ログアウトに失敗しました', status: 'error'})\n        }\n    }\n\n    //ログイン\n    const signInHistory = () => {\n        history.push('/signin')\n    }\n\n    //新規登録\n    const signUpHistory = () => {\n        history.push('/signup')\n    }\n\n    return (\n        <>\n        <Box as='header' h='70px' w='100%' bg='rgba(256,256,256,.75)' borderBottom='solid 4px rgba(26,187,154,.3)' boxShadow='0 1px 4px rgb(0 0 0 / 30%)' position='fixed' top='0' zIndex='999'>\n            <Flex align='center' justify='space-between' h='70px' padding={{ base: 3, md: 5 }}>\n                <Box ml='20px'>\n                    <Logo />    \n                </Box>\n                <Flex justify='space-between' align='center'>\n                    <HStack spacing={5}>\n                        { isSignedIn && currentUser ? (\n                            <>\n                                <HStack>\n                                    <Button size='xs' p={{base: 2, md: 4}} colorScheme=\"red\" onClick={handleSignOut}>ログアウト</Button>\n                                    <MenuBar />\n                                </HStack>\n                            </>\n                        ) : (\n                            <>\n                                <Button size='xs' p={{base: 2, md: 4}} colorScheme=\"blue\" onClick={signInHistory}>ログイン</Button>\n                                <Button size='xs' p={{base: 2, md: 4}} colorScheme=\"teal\" onClick={signUpHistory}>新規登録</Button>\n                            </>\n                        )}\n                    </HStack>\n                </Flex>\n            </Flex>\n            <Box position='absolute' bottom='-4px' h='4px' bg='#1abb9a'></Box>\n        </Box>\n        </>\n    )\n})\n\nexport default Header","/usr/src/app/react-app/src/components/atoms/header/MenuBar.tsx",[],"/usr/src/app/react-app/src/components/atoms/header/Logo.tsx",[],"/usr/src/app/react-app/src/components/organisms/Search.tsx",[],"/usr/src/app/react-app/src/components/atoms/form/YearInput.tsx",["262"],"import { FormLabel, Select } from \"@chakra-ui/react\"\nimport { VFC, useCallback } from \"react\";\nimport { useRecoilState } from \"recoil\";\nimport { ApiKeyValue } from \"store/ApiKeyValue\";\n\nimport { useYearFactory } from \"../../../customHooks/useYearFactory\";\nimport { Year } from '../../../store/Year'\nimport { handleChange } from \"../../../types/handleChange\";\n\nconst YearInput: VFC = () => {\n    const [ selectYear, setSelectyear ] = useRecoilState(Year)\n    const [ apiKeyValue, setApiKeyValue] = useRecoilState(ApiKeyValue)\n    const { years } = useYearFactory()\n    \n    const handleChangeYear: handleChange = useCallback((e) => {\n        setSelectyear(e.target.value)\n        setApiKeyValue({...apiKeyValue, year: e.target.value})\n    }, [apiKeyValue])    \n\n    return (\n        <>\n            <FormLabel>西暦</FormLabel>\n            <Select onChange={handleChangeYear} defaultValue={selectYear}>\n                {years.map((year, index) => (\n                    <option key={year} >{year}</option>\n                ))}\n            </Select>\n        </>\n    )\n}\n\nexport default YearInput","/usr/src/app/react-app/src/components/atoms/button/PraimaryButton.tsx",[],"/usr/src/app/react-app/src/store/Year.ts",[],"/usr/src/app/react-app/src/store/Cour.ts",[],"/usr/src/app/react-app/src/components/atoms/form/CourInput.tsx",["263"],"import { FormLabel, Select } from \"@chakra-ui/react\"\nimport { VFC } from \"react\"\nimport { useCallback } from 'react'\nimport { useRecoilState } from \"recoil\"\nimport { ApiKeyValue } from \"store/ApiKeyValue\"\n\nimport { useCourFactory } from \"../../../customHooks/useCourFactory\"\nimport { Cour } from '../../../store/Cour'\nimport { handleChange } from \"../../../types/handleChange\"\n\nconst CourInput: VFC = () => {\n    \n    const { cours } = useCourFactory()\n    const [ selectCour, setSelectCour ] = useRecoilState(Cour)\n    const [ apiKeyValue, setApiKeyValue] = useRecoilState(ApiKeyValue)\n\n    const handleChangeCour: handleChange = useCallback((e) => {\n        e.preventDefault()\n        const season = new Map<string, string>([['1期（冬期）', 'winter'], ['2期（春期）', 'spring'], ['3期（夏期）', 'summer'], ['4期（秋期）', 'autumn']])\n        const select_season = season.get(e.target.value)\n        \n        setSelectCour(e.target.value)\n        setApiKeyValue({...apiKeyValue, cour: select_season})\n    }, [apiKeyValue])\n    \n    return (\n        <>\n            <FormLabel>クール</FormLabel>\n            <Select defaultValue={selectCour} onChange={handleChangeCour}>\n                {cours.map((cour, index) => (\n                    <option key={cour}>{cour}</option>\n                ))}\n            </Select>\n        </>\n    )\n}\n\nexport default CourInput","/usr/src/app/react-app/src/customHooks/useCourFactory.ts",["264","265"],"import { useRecoilState } from \"recoil\"\n\nimport { Cour } from '../store/Cour'\nimport { ApiKeyValue } from '../store/ApiKeyValue'\n\ntype CourFactory = () => {\n    current_cour: number;\n    select_cour: string;\n    select_season: string | undefined;\n    current_season: string | undefined;\n    cours: string[];\n}\n\nexport const useCourFactory: CourFactory = () => {\n    const [ selectCour, setSelectCour ] = useRecoilState(Cour)\n    const cours_detail = ['1期（冬期）', '2期（春期）', '3期（夏期）', '4期（秋期）'];\n    const cours_detail_month = ['冬：1～3月', '春：4～6月', '夏：7～9月', '秋：10～12月'];\n\n\n    //現在のクール\n    const current_cour = Math.ceil(((new Date()).getMonth() + 1) / 3)\n    const defalt_cour = cours_detail[current_cour - 1]\n\n    //選択したクール\n    const cour_index = cours_detail.indexOf(selectCour)\n    const select_cour = cours_detail_month[cour_index]\n\n    //API用\n    const season = new Map<string, string>([['1期（冬期）', 'winter'], ['2期（春期）', 'spring'], ['3期（夏期）', 'summer'], ['4期（秋期）', 'autumn']])\n    const select_season = season.get(selectCour)\n    const current_season = season.get(defalt_cour)\n        \n    //セレクト\n    const cours: string[] = [];\n    for (var i = 0; i < cours_detail.length; i++) {\n      cours.push(cours_detail[i]);\n    }\n\n    return { current_cour, select_cour, select_season, current_season, cours }\n}","/usr/src/app/react-app/src/customHooks/useYearFactory.ts",["266","267"],"import { useRecoilState } from \"recoil\";\n\nimport { Year } from '../store/Year'\n\ntype YearFactory = () => {\n    current_year: number;\n    years: number[];\n}\nexport const useYearFactory: YearFactory = () => {\n    const [ selectYear, setSelectyear ] = useRecoilState(Year)\n    const current_year = (new Date()).getFullYear();\n    const years: number[] = []\n\n    for (let y = current_year; y >= 2014; y--) {\n        years.push(y)\n    }\n\n    return { current_year, years }\n}","/usr/src/app/react-app/src/components/organisms/AnimeCardList.tsx",["268"],"import { memo, useCallback, useRef } from \"react\"\n\nimport { Box, Center, Text, Wrap, WrapItem } from \"@chakra-ui/react\"\nimport { VFC } from \"react\"\nimport { useRecoilState, useRecoilValue } from \"recoil\"\n\nimport { useCourFactory } from \"../../customHooks/useCourFactory\"\nimport { Year } from \"../../store/Year\"\nimport AnimeCard from \"../molecules/animeCard/AnimeCard\"\nimport { BeatLoader } from \"react-spinners\"\nimport { HasMore } from \"store/loding/HasMore\"\nimport { useNextAnimes } from \"customHooks/useNextAnimes\"\nimport { LoadPage } from \"store/LoadPage\"\nimport { AnimeLists } from \"store/AnimeLists\"\n\nconst AnimeCardList: VFC = memo(() => {\n    const [ loadPage, setLoadPage ] = useRecoilState(LoadPage)\n    const year = useRecoilValue(Year)\n    const hasMore = useRecoilValue(HasMore)\n    const animeLists = useRecoilValue(AnimeLists)\n    const { select_cour } = useCourFactory()\n    const { isLoading } = useNextAnimes(loadPage)\n\n    // ref対象を監視して表示終わったら、ページ番号を増やす\n    const observer: any = useRef()\n    const lastMovieElementRef = useCallback((node) => {\n        if (isLoading) return\n        observer.current && observer.current.disconnect()\n\n        observer.current = new IntersectionObserver((entries) => {\n            //要素が交差しているかつさらにページを読みこむ場合、ページ番号を増やす\n            if(entries[0].isIntersecting && hasMore){\n                setLoadPage((prevPage) => prevPage + 1)\n            }\n        })\n\n        node && observer.current.observe(node)\n\n    }, [hasMore, isLoading])\n    \n    return (\n        <>\n            <Box justify='center' align='center' m='30px 10px 0'>\n                <Text fontWeight='700' fontSize='1.17em'>\n                    ― {year}{select_cour} ―\n                </Text>\n            </Box>\n            {animeLists ? \n                <>\n                    <Wrap p={{base: 3, md: 4}} w='100%' spacing={5} justify='center' align='center'>\n                            {animeLists.map((animeList, index) => (\n                                animeLists.length === index + 1 ? (\n                                    <WrapItem key={index} ref={lastMovieElementRef}>\n                                        <AnimeCard animeList={animeList}/>\n                                    </WrapItem>\n                                ) : (\n                                    <WrapItem key={index}>\n                                        <AnimeCard animeList={animeList}/>\n                                    </WrapItem>\n                                )\n                            ))}\n                    </Wrap>\n                    {isLoading && (\n                        <Center p='5px 0 30px 0' w='100%' h='100'>\n                            <BeatLoader size={10} color=\"black\" />\n                        </Center>\n                    )}\n                </>\n            : null }\n        </>\n    )\n})\n\nexport default AnimeCardList","/usr/src/app/react-app/src/components/molecules/animeCard/AnimeCard.tsx",["269","270"],"/usr/src/app/react-app/src/store/ApiKeyValue.ts",["271","272"],"import { atom } from \"recoil\";\nimport { useCourFactory } from \"../customHooks/useCourFactory\";\n\ntype ApiKeyValue = {\n    year: string | undefined;\n    cour: string | undefined;\n}\n\n//現在の西暦\nconst current_year_number = (new Date()).getFullYear();\nconst current_year = String(current_year_number)\n\n//現在のクール\nconst cours_detail = ['1期（冬期）', '2期（春期）', '3期（夏期）', '4期（秋期）'];\nconst current_cour = Math.ceil(((new Date()).getMonth() + 1 ) / 3)\nconst defalt_cour = cours_detail[current_cour - 1]\n\n//API用\nconst season = new Map<string, string>([['1期（冬期）', 'winter'], ['2期（春期）', 'spring'], ['3期（夏期）', 'summer'], ['4期（秋期）', 'autumn']])\nconst current_season = season.get(defalt_cour)\n\nexport const ApiKeyValue = atom<ApiKeyValue>({\n    key: 'ApiKeyValue',\n    default: {year: current_year, cour: current_season}\n})","/usr/src/app/react-app/src/customHooks/useAnimeApiSearch.ts",["273"],"import { useCallback } from 'react'\nimport { useRecoilValue, useSetRecoilState } from 'recoil'\n\nimport { client } from \"../lib/api/client\"\nimport { ApiKeyValue } from '../store/ApiKeyValue'\nimport { useMessage } from './message/useMessage'\nimport { AnnictApiType } from '../types/api/AnnictApiType'\nimport { AnimeLists } from '../store/AnimeLists'\nimport { HasMore } from 'store/loding/HasMore'\nimport { LoadPage } from 'store/LoadPage'\n\ntype AnimeApiSearch = () => {\n        getAnimes: () => void;\n}\n\nexport const useAnimeApiSearch: AnimeApiSearch = () => {\n    const setHasMore = useSetRecoilState(HasMore)\n    const setLoadPage = useSetRecoilState(LoadPage)\n    const setAnimeLists = useSetRecoilState(AnimeLists)\n    const apiKeyValue = useRecoilValue(ApiKeyValue)\n    const { showMessage } = useMessage()\n        \n        //検索結果最初のリスト取得\n        const getAnimes = useCallback(async() => {\n            try {\n                const filter_season = `${apiKeyValue.year}-${apiKeyValue.cour}`\n                const res = await client.get('/annicts/search', {\n                    params: {\n                        filter_season,\n                        page: 1\n                    }\n                })\n\n                if (res.status === 200) {\n                    const animeDate: AnnictApiType[] = res.data.works \n            \n                    setAnimeLists(animeDate)\n    \n                    //検索でリスト再取得時にInfiniteScrollの値初期化\n                    setHasMore(true)\n                    setLoadPage(1)  \n                } else {\n                    console.error('status error')\n                }\n                \n            } catch (error) {\n                showMessage({title: 'アニメ一覧の取得に失敗しました', status: \"error\"})\n            } \n        }, [apiKeyValue])\n\n    return { getAnimes }\n}","/usr/src/app/react-app/src/customHooks/message/useMessage.ts",["274"],"import { useToast } from '@chakra-ui/toast'\nimport React, { useCallback } from 'react'\n\ntype Props = {\n    title: string;\n    status: \"info\" | \"warning\" | \"success\" | \"error\";\n}\n\nexport const useMessage = () => {\n    const toast = useToast()\n    \n    const showMessage = useCallback((props: Props) => {\n        const { title, status } = props\n        toast({\n            title: title,\n            status: status,\n            position: 'top',\n            duration: 2000,\n            isClosable: true,\n          })\n    }, [toast])\n\n    return { showMessage }\n}","/usr/src/app/react-app/src/lib/api/client.ts",[],"/usr/src/app/react-app/src/store/AnimeLists.ts",[],"/usr/src/app/react-app/src/components/pages/auth/SigninForm.tsx",["275","276"],"import { Box, Button, Divider, Flex, FormControl, FormErrorMessage, FormLabel, Heading, Input, Text, VStack } from \"@chakra-ui/react\"\nimport { useMessage } from \"customHooks/message/useMessage\";\nimport Cookies from \"js-cookie\";\nimport { signIn } from \"lib/api/auth/auth\";\nimport { useForm } from \"react-hook-form\"\nimport { useHistory } from \"react-router-dom\";\nimport { BeatLoader } from \"react-spinners\"\nimport { useSetRecoilState } from \"recoil\";\nimport { memo, useCallback, VFC } from \"react\";\n\nimport { CurrentUser, IsSignedIn } from \"store/auth/Auth\";\nimport { SignInFormInputs } from \"types/form/FormInputs\";\n\n\nconst SigninForm: VFC = memo(() => {\n    const setIsSignedIn = useSetRecoilState(IsSignedIn)\n    const setCurrentUser = useSetRecoilState(CurrentUser)\n    const history = useHistory()\n    const { showMessage } = useMessage()\n\n    const { register, formState: { errors }, handleSubmit, formState } = useForm<SignInFormInputs>({\n        mode: 'all',\n        defaultValues: {\n            email: '',\n            password: '',\n          }\n    })\n\n    const handleOnSubmit = async(data: SignInFormInputs) => {\n        const params: SignInFormInputs = {\n            email: data.email,\n            password: data.password\n        }\n\n        try {\n            const res = await signIn(params)\n\n            if (res.status === 200) {\n                // ログインに成功した場合はCookieに各値を格納\n                Cookies.set(\"_access_token\", res.headers[\"access-token\"])\n                Cookies.set(\"_client\", res.headers[\"client\"])\n                Cookies.set(\"_uid\", res.headers[\"uid\"])\n                \n                setIsSignedIn(true)\n                setCurrentUser(res.data.data)\n                history.push({pathname: '/', state: 'signin'})\n\n                showMessage({title: 'ログインしました', status: 'success'})\n            } else {\n                // showMessage({title: 'メールアドレスまたはパスワードが違います。', status: 'error'})\n                showMessage({title: 'ログインに失敗しました。', status: 'error'})\n            }\n        } catch (error) {\n            // showMessage({title: 'ログインに失敗しました。', status: 'error'})\n            showMessage({title: 'メールアドレスまたはパスワードが違います。', status: 'error'})\n        }\n    }\n\n    return (\n        <>\n            <Flex justify='center' align='center' h='100%' mt='90px'>\n                <Box bg='white' w={{base: '90%', md: '2xl'}} p={4} borderRadius='10px' shadow='md'>\n                    <Heading as='h1' size='lg' textAlign='center'>ログイン</Heading>\n                    <Divider my={4}/>\n                    <form onSubmit={handleSubmit(handleOnSubmit)}>\n                        <VStack spacing={5}>\n                            <FormControl id='email' isRequired isInvalid={errors.email ? true : false}>\n                                <FormLabel>メールアドレス</FormLabel>\n                                <Input \n                                    type='email'\n                                    placeholder='test@example.com' \n                                    {...register('email', { required: 'メールアドレスは必須です。', pattern: {value: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/, message: \"メールアドレス形式で入力してください。\"}, })}\n                                />\n                                <FormErrorMessage>\n                                    {errors.email && errors.email.message}\n                                </FormErrorMessage>\n                            </FormControl>\n                            <FormControl id='password' isRequired isInvalid={errors.password ? true : false}>\n                                <FormLabel>パスワード</FormLabel>\n                                <Input \n                                    type='password' \n                                    {...register('password', {required: 'パスワードは必須です。'})}\n                                />\n                                <FormErrorMessage>\n                                    {errors.password && errors.password.message}\n                                </FormErrorMessage>\n                            </FormControl>\n                            <Button type=\"submit\" disabled={!formState.isValid} isLoading={formState.isSubmitting} w='100%' color='white' bg='blue.400' _hover={{opacity: 0.8}} spinner={<BeatLoader size={8} color=\"white\" />}>ログイン</Button>\n                        </VStack>\n                    </form>\n                    \n                </Box>\n            </Flex>  \n        </>\n    )\n})\n\nexport default SigninForm","/usr/src/app/react-app/src/store/loding/AuthLoding.ts",[],"/usr/src/app/react-app/src/store/auth/Auth.ts",[],"/usr/src/app/react-app/src/lib/api/auth/auth.ts",["277","278"],"import { client } from '../client'\nimport Cookies from 'js-cookie'\nimport { SignInParams, SignUpParams } from 'types/auth/authTypes'\nimport { EditPasswordUpdate, UserProfileUpdate } from 'types/form/FormInputs'\n\n\n// サインアップ（新規アカウント作成）\nexport const signUp = (params: SignUpParams) => {\n  return client.post('/auth', params)\n}\n\n// サインイン（ログイン）\nexport const signIn = (params: SignInParams)  => {\n  return client.post('/auth/sign_in', params)\n}\n\n// サインアウト（ログアウト）\nexport const signOut = () => {\n  return client.delete(\"/auth/sign_out\", { headers: {\n    \"access-token\": Cookies.get(\"_access_token\"),\n    \"client\": Cookies.get(\"_client\"),\n    \"uid\": Cookies.get(\"_uid\")\n  }})  \n}\n\n// 認証済みのユーザーを取得\nexport const getCurrentUser = () => {\n  if (!Cookies.get(\"_access_token\") || !Cookies.get(\"_client\") || !Cookies.get(\"_uid\")) return\n  return client.get('/auth/sessions', { headers: {\n    \"access-token\": Cookies.get(\"_access_token\"),\n    \"client\": Cookies.get(\"_client\"),\n    \"uid\": Cookies.get(\"_uid\")\n  }})\n}\n\nexport const updateUserProfile = (params: FormData) => {\n  return client.patch('/auth', params , {\n    headers: {\n      \"content-Type\": \"multipart/form-data\",\n      \"access-token\": Cookies.get(\"_access_token\"),\n      \"client\": Cookies.get(\"_client\"),\n      \"uid\": Cookies.get(\"_uid\")\n    }\n  })  \n}\n\nexport const updatePassword = (params: FormData) => {\n  return client.patch('/auth/password', params , {\n    headers: {\n      \"content-Type\": \"multipart/form-data\",\n      \"access-token\": Cookies.get(\"_access_token\"),\n      \"client\": Cookies.get(\"_client\"),\n      \"uid\": Cookies.get(\"_uid\")\n    }\n  })  \n}","/usr/src/app/react-app/src/components/templates/CommonLayout.tsx",[],"/usr/src/app/react-app/src/components/pages/auth/SignUpForm.tsx",["279"],"import { memo, useCallback, VFC } from \"react\"\n\nimport { Box, Flex, Heading,  VStack, FormControl, FormLabel, Input, FormErrorMessage, Button, Divider } from \"@chakra-ui/react\"\nimport Cookies from \"js-cookie\"\nimport { useForm } from \"react-hook-form\"\nimport { useHistory } from \"react-router-dom\"\nimport { BeatLoader } from \"react-spinners\"\nimport { useSetRecoilState } from \"recoil\"\n\nimport { useMessage } from \"customHooks/message/useMessage\"\nimport { signUp } from \"lib/api/auth/auth\"\nimport { CurrentUser, IsSignedIn } from \"store/auth/Auth\"\nimport { SignUpFormInputs } from \"types/form/FormInputs\"\n\nconst SignUpForm: VFC = memo(() => {\n    const setIsSignedIn = useSetRecoilState(IsSignedIn)\n    const setCurrentUser = useSetRecoilState(CurrentUser)\n    const history = useHistory()\n    const { showMessage } = useMessage()\n\n    const { register, formState: { errors }, handleSubmit, formState, getValues } = useForm<SignUpFormInputs>({\n        mode: 'all',\n        defaultValues: {\n            name: '',\n            email: '',\n            password: '',\n            passwordConfirmation: ''\n          }\n    })\n\n    const handleOnSubmit = async(data: SignUpFormInputs) => {\n        const params: SignUpFormInputs = {\n            name:data.name,\n            email: data.email,\n            password: data.password,\n            passwordConfirmation: data.passwordConfirmation,\n        }\n\n        try {\n            const res = await signUp(params)\n\n            if (res.status === 200) {\n                // ログインに成功した場合はCookieに各値を格納\n                Cookies.set(\"_access_token\", res.headers[\"access-token\"])\n                Cookies.set(\"_client\", res.headers[\"client\"])\n                Cookies.set(\"_uid\", res.headers[\"uid\"])\n                \n                setIsSignedIn(true)\n                setCurrentUser(res.data.data)\n                history.push({pathname: '/'})\n            } else {\n                // showMessage({title: 'メールアドレスまたはパスワードが違います。', status: 'error'})\n                showMessage({title: '新規登録に失敗しました。', status: 'error'})\n            }\n        } catch (error) {\n            // showMessage({title: 'ログインに失敗しました。', status: 'error'})\n            showMessage({title: '新規登録に失敗しました。', status: 'error'})\n        }\n    }\n\n    return (\n        <>\n            <Flex justify='center' align='center' h='100%' mt='90px'>\n                <Box bg='white' w={{base: '90%', md: '2xl'}} p={4} borderRadius='10px' shadow='md'>\n                    <Heading as='h1' size='lg' textAlign='center'>新規登録</Heading>\n                    <Divider my={4}/>\n                    <form onSubmit={handleSubmit(handleOnSubmit)}>\n                        <VStack spacing={5}>\n                            <FormControl id='name' isRequired isInvalid={errors.name ? true : false}>\n                                <FormLabel>ユーザーネーム</FormLabel>\n                                <Input \n                                    type='text'\n                                    {...register('name', { required: true, maxLength: 10})}\n                                />\n                                <FormErrorMessage>\n                                    {errors.name?.type === 'required' && 'ユーザーネームは必須です。' }\n                                    {errors.name?.type === 'maxLength' && 'ユーザーネームは10文字以内で設定してください。' }\n                                </FormErrorMessage>\n                            </FormControl>\n                            <FormControl id='email' isRequired isInvalid={errors.email ? true : false}>\n                                <FormLabel>メールアドレス</FormLabel>\n                                <Input \n                                    type='email'\n                                    placeholder='test@example.com' \n                                    {...register('email', { required: 'メールアドレスは必須です。', pattern: {value: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/, message: 'メールアドレス形式で入力してください。'}, })}\n                                />\n                                <FormErrorMessage>\n                                    {errors.email && errors.email.message}\n                                </FormErrorMessage>\n                            </FormControl>\n                            <FormControl id='password' isRequired isInvalid={errors.password ? true : false}>\n                                <FormLabel>パスワード</FormLabel>\n                                <Input \n                                    type='password' \n                                    {...register('password', {required: 'パスワードは必須です。', pattern: {value: /^(?=.*?[a-z])(?=.*?[A-Z])(?=.*?\\d)[a-zA-Z\\d]{8,100}$/, message: '半角英小文字大文字数字をそれぞれ1種類以上含む8文字以上で設定してください。'}})}\n                                />\n                                <FormErrorMessage>\n                                    {errors.password && errors.password.message}\n                                </FormErrorMessage>\n                            </FormControl>\n                            <FormControl id='passwordConfirmation' isRequired isInvalid={errors.passwordConfirmation ? true : false}>\n                                <FormLabel>確認用パスワード</FormLabel>\n                                <Input \n                                    type='password' \n                                    {...register('passwordConfirmation', {required: true, validate: value => value === getValues('password')})}\n                                />\n                                <FormErrorMessage>\n                                    {errors.passwordConfirmation?.type === 'required' && '確認用パスワードは必須です。'}\n                                    {errors.passwordConfirmation?.type === 'validate' && \"確認用パスワードが一致しません。\"}\n                                </FormErrorMessage>\n                            </FormControl>\n                            <Button type=\"submit\" disabled={!formState.isValid} isLoading={formState.isSubmitting} w='100%' color='white' bg='blue.400' _hover={{opacity: 0.8}} spinner={<BeatLoader size={8} color=\"white\" />}>新規登録</Button>\n                        </VStack>\n                    </form>    \n                </Box>\n            </Flex>  \n        </>\n    )\n})\n\nexport default SignUpForm","/usr/src/app/react-app/src/RecoilStatePersist.ts",[],"/usr/src/app/react-app/src/components/pages/favorites/FavoriteAnime.tsx",["280"],"/usr/src/app/react-app/src/components/pages/favorites/FavoriteAnimeCard.tsx",["281","282"],"/usr/src/app/react-app/src/store/loding/Loding.ts",[],"/usr/src/app/react-app/src/util/DefaultSpiner.tsx",[],"/usr/src/app/react-app/src/store/FavoriteAnimeList.ts",[],"/usr/src/app/react-app/src/store/IsFavoriteLike.ts",[],"/usr/src/app/react-app/src/components/pages/auth/UserProfile.tsx",["283"],"import { VFC, useState, useCallback, ChangeEvent, memo } from \"react\"\n\nimport { IconButton, Box, Button, Divider, Flex, FormControl, FormErrorMessage, FormLabel, Heading, Input, VStack, Image, Center } from \"@chakra-ui/react\"\nimport { useForm } from \"react-hook-form\"\nimport { MdPhotoCamera, MdCancel } from \"react-icons/md\";\nimport { BeatLoader } from \"react-spinners\"\nimport { useRecoilState } from \"recoil\";\nimport imageCompression from \"browser-image-compression\";\n\nimport { CurrentUser } from \"store/auth/Auth\";\nimport { UserProfileUpdate } from \"types/form/FormInputs\"\nimport { getCurrentUser, updateUserProfile } from \"lib/api/auth/auth\";\nimport { useMessage } from \"customHooks/message/useMessage\";\n\n\nconst UserProfile: VFC = memo(() => {\n    const [ currentUser, setCurrentUser ] = useRecoilState(CurrentUser)\n    const [ preview, setPreview ] = useState<string>('')\n    const [ userImage, setUserImage ] = useState<string | null>(currentUser?.image?.url ?? null)\n    const [ uploadImage, setUploadImage ] = useState<File | null>()\n    const { showMessage } = useMessage()\n    \n    const { register, formState: { errors }, handleSubmit, formState } = useForm<UserProfileUpdate>({\n        mode: 'all',\n        defaultValues: {\n            name: currentUser?.name,\n            email: currentUser?.email,\n        }\n    })\n\n    // ダミー画像\n    const defaultSrc =　\"https://www.pngkit.com/png/full/301-3012694_account-user-profile-avatar-comments-fa-user-circle.png\";\n\n    const handleUpdateProfile = async(data: UserProfileUpdate) => {\n        const { name, email } = data\n\n        const formData = new FormData()\n        formData.set(\"name\", name)\n        formData.set(\"email\", email)\n\n        //画像ファイルがあれば実行\n        if(uploadImage) {\n            //ファイル圧縮オプション 3MB以下\n            const compressOptions = {\n                maxSizeMB: 3,\n            }\n    \n            const imageData = await imageCompression(uploadImage, compressOptions)\n            formData.set(\"image\", imageData, uploadImage.name)\n        }else if(!uploadImage) {\n            formData.set(\"image\", '')\n        }\n\n        try {            \n            const res = await updateUserProfile(formData)\n            if (res.status === 200) {\n                const user = await getCurrentUser()\n                setCurrentUser(user?.data.data)\n                showMessage({title: 'プロフィールを更新しました。', status: 'success'})\n            } else {\n                showMessage({title: 'プロフィールの更新に失敗しました。', status: 'error'})\n            }\n        } catch (error) {\n            showMessage({title: 'プロフィールの更新に失敗しました。', status: 'error'})\n        }\n    }\n\n    // プレビュー機能\n    const previewImage = useCallback((e) => {\n        const file = e.target.files[0]\n        setPreview(window.URL.createObjectURL(file))\n    }, [])\n\n    // アップロード\n    const handleUploadImage = useCallback((e) => {\n        const file = e.target.files[0]\n        setUploadImage(file)\n    }, [])\n\n    // アップロード画像削除\n    const ImageDelete = useCallback(() => {\n        setPreview('')\n        setUserImage(null)\n        setUploadImage(null)\n    }, [])\n\n    return (\n        <>\n            <Flex justify='center' align='center' h='100%' mt='90px'>\n                <Box bg='white' w={{base: '90%', md: '2xl'}} p={4} borderRadius='10px' shadow='md'>\n                    <Heading as='h1' size='lg' textAlign='center'>プロフィール編集</Heading>\n                    <Divider my={4}/>\n                    <form onSubmit={handleSubmit(handleUpdateProfile)}>\n                        <VStack spacing={5}>\n                            <FormControl id='image' mb='20px'>\n                                <Center>\n                                    <Flex flexDirection='column' align='center' justify='center' position='relative'>\n                                        <Box position='absolute' top='0' left='10px' cursor='pointer' _hover={{bg: 'none'}} onClick={ImageDelete}>\n                                            <MdCancel size='25px'/>\n                                        </Box>\n                                        <Box w='200px' h='200px' borderRadius='999px' mb='20px'>\n                                            <Image \n                                                src={preview ? preview : (\n                                                    userImage ?? defaultSrc\n                                                )} \n                                                alt=\"preview img\" \n                                                w='200px' \n                                                h='200px' \n                                                objectFit='cover' \n                                                borderRadius='999px'\n                                            \n                                            />\n                                        </Box>\n                                        <FormLabel htmlFor=\"avatar\">\n                                            <Input\n                                                display=\"none\"\n                                                type=\"file\"\n                                                id=\"avatar\"\n                                                name=\"image\"\n                                                accept=\"image/*\"\n                                                onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                                                    handleUploadImage(e)\n                                                    previewImage(e)\n                                                }}\n                                            />\n                                            {/* <IconButton as='span' id=\"avatar\" cursor='pointer' aria-label='upload picture'>\n                                                <MdPhotoCamera size='30px'/>\n                                            </IconButton> */}\n                                            <Button leftIcon={<MdPhotoCamera size='25px'/>} as='span' cursor='pointer' colorScheme=\"teal\" variant=\"solid\">\n                                                画像をアップロード\n                                            </Button>\n                                        </FormLabel>\n                                    </Flex>\n                                </Center>\n                            </FormControl>\n                            <FormControl id='name' isRequired isInvalid={errors.name ? true : false}>\n                                <FormLabel>ユーザーネーム</FormLabel>\n                                <Input \n                                    type='text'\n                                    {...register('name', {required: true, maxLength: 10})}\n                                />\n                                <FormErrorMessage>\n                                    {errors.name?.type === 'required' && 'ユーザーネームは必須です。' }\n                                    {errors.name?.type === 'maxLength' && 'ユーザーネームは10文字以内で設定してください。' }\n                                </FormErrorMessage>\n                            </FormControl>\n                            <FormControl id='email' isRequired isInvalid={errors.email ? true : false}>\n                                <FormLabel>メールアドレス</FormLabel>\n                                <Input \n                                    type='email'\n                                    // name='email' \n                                    placeholder='test@example.com' \n                                    {...register('email', { required: 'メールアドレスは必須です。', pattern: {value: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/, message: \"メールアドレス形式で入力してください。\"}, })}\n                                />\n                                <FormErrorMessage>\n                                    {errors.email && errors.email.message}\n                                </FormErrorMessage>\n                            </FormControl>\n                            <Button type=\"submit\" disabled={!formState.isValid} isLoading={formState.isSubmitting} w='100%' color='white' bg='blue.400' _hover={{opacity: 0.8}} spinner={<BeatLoader size={8} color=\"white\" />}>更新</Button>\n                        </VStack>\n                    </form>\n                </Box>\n            </Flex>\n        </>\n    )\n})\n\nexport default UserProfile","/usr/src/app/react-app/src/components/pages/auth/EditPassword.tsx",["284","285"],"import { Box, Button, Center, Divider, Flex, FormControl, FormErrorMessage, FormLabel, Heading, Input, VStack } from \"@chakra-ui/react\"\nimport { useForm } from \"react-hook-form\"\nimport { BeatLoader } from \"react-spinners\"\nimport { useRecoilState } from \"recoil\"\nimport { memo, VFC } from \"react\"\n\nimport { useSignOut } from \"customHooks/auth/useSignOut\"\nimport { useMessage } from \"customHooks/message/useMessage\"\nimport { getCurrentUser, updatePassword } from \"lib/api/auth/auth\"\nimport { CurrentUser } from \"store/auth/Auth\"\nimport { EditPasswordUpdate } from \"types/form/FormInputs\"\n\nconst EditPassword: VFC = memo(() => {\n    const [ currentUser, setCurrentUser ] = useRecoilState(CurrentUser)\n    const { executionSignOut } = useSignOut('パスワードを更新しました。再度ログインしてください')\n    const { showMessage } = useMessage()\n    const { register, handleSubmit, formState: {errors}, formState, getValues } = useForm<EditPasswordUpdate>({\n        mode: 'all',\n        defaultValues: {\n            password: '',\n            passwordConfirmation: ''\n        }\n    })\n\n\n    const handleUpdatePassword = async(data: EditPasswordUpdate) => {\n        const { password, passwordConfirmation } = data\n        const formData = new FormData()\n        formData.set('password', password)\n        formData.set('password_confirmation', passwordConfirmation)\n        try {\n            const res = await updatePassword(formData)\n            \n            if(res.status === 200) {\n                const user = await getCurrentUser()\n                setCurrentUser(user?.data.data)\n                await executionSignOut()\n            } else {\n                showMessage({title: 'パスワードの更新に失敗しました。', status: 'error'})\n                \n            }\n        } catch (error) {\n            showMessage({title: 'パスワードの更新に失敗しました。', status: 'error'})\n        }\n        \n    }\n    \n    return (\n        <>\n            <Flex justify='center' align='center' h='100%' mt='90px'>\n                <Box bg='white' w={{base: '90%', md: '2xl'}} p={4} borderRadius='10px' shadow='md'>\n                    <Heading as='h1' size='lg' textAlign='center'>パスワード変更</Heading>\n                    <Divider my={4}/>\n                    <form onSubmit={handleSubmit(handleUpdatePassword)}>\n                        <VStack spacing={5}>\n                            <FormControl id='password' isRequired isInvalid={errors.password ? true : false}>\n                                <FormLabel>新しいパスワード</FormLabel>\n                                <Input \n                                    type='password'\n                                    {...register('password', {required: 'パスワードは必須です。', pattern: {value: /^(?=.*?[a-z])(?=.*?[A-Z])(?=.*?\\d)[a-zA-Z\\d]{8,100}$/, message: '半角英小文字大文字数字をそれぞれ1種類以上含む8文字以上で設定してください。'}})}\n                                />\n                                <FormErrorMessage>\n                                    {errors.password && errors.password.message}\n                                </FormErrorMessage>\n                            </FormControl>\n                            <FormControl id='passwordConfirmation' isRequired isInvalid={errors.passwordConfirmation ? true : false}>\n                                <FormLabel>新しいパスワード確認用</FormLabel>\n                                <Input \n                                   type='password'\n                                   {...register('passwordConfirmation', {required: true, validate: value => value === getValues('password')})}\n                                   />\n                                <FormErrorMessage>\n                                    {errors.passwordConfirmation?.type === 'required' && '確認用パスワードは必須です。'}\n                                    {errors.passwordConfirmation?.type === 'validate' && \"確認用パスワードが一致しません。\"}\n                                </FormErrorMessage>\n                            </FormControl>\n                            <Button type=\"submit\" disabled={!formState.isValid} isLoading={formState.isSubmitting} w='100%' color='white' bg='blue.400' _hover={{opacity: 0.8}} spinner={<BeatLoader size={8} color=\"white\" />}>更新</Button>\n                        </VStack>\n                    </form>\n                </Box>\n            </Flex>\n\n        </>\n    )\n})\n\nexport default EditPassword","/usr/src/app/react-app/src/lib/motionVariants/variants.ts",[],["286","287"],"/usr/src/app/react-app/src/components/molecules/reviewModal/ReviewModal.tsx",["288","289"],"import { memo, useRef, useState, VFC, useEffect } from \"react\";\n\nimport { Box, Button, Text, FormControl, FormLabel, Input, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Textarea, useDisclosure, VStack, FormErrorMessage } from \"@chakra-ui/react\";\nimport { EditIcon } from \"@chakra-ui/icons\";\nimport { useForm } from \"react-hook-form\";\nimport { BeatLoader } from \"react-spinners\";\nimport ReactStars from 'react-stars'\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\n\nimport { useGetSize } from \"customHooks/useGetSize\";\nimport { createReview } from \"lib/api/review/review\";\nimport { useMessage } from \"customHooks/message/useMessage\";\nimport { CurrentUser, IsSignedIn } from \"store/auth/Auth\";\nimport { Submitreview, Submitreviews } from \"types/form/FormInputs\";\nimport { ReviewReflection } from \"store/ReviewReflection\";\n\ntype  Props = {\n    id: number\n}\n\nconst ReviewModal: VFC<Props> = memo((props) => {\n    const { id } = props\n    const [ rating, setRating ] = useState(0)\n    const [ errorMessage, setErrorMessage ] = useState('')\n    const setReviewReflection = useSetRecoilState(ReviewReflection)\n    const currentUser = useRecoilValue(CurrentUser)\n    const isSignedIn = useRecoilValue(IsSignedIn)\n    const initialRef = useRef<HTMLInputElement>(null)\n    const { isOpen, onOpen, onClose } = useDisclosure()\n    \n    const { partsSize } = useGetSize()\n    const { showMessage } = useMessage()\n    const { register, reset, formState: { errors }, handleSubmit, formState } = useForm<Submitreview>({\n        mode: 'all',\n        defaultValues: {\n            title: '',\n            comment: '',\n        }\n    })    \n    \n\n    //レビュー初期値\n    const getRating = (rate: number) => {        \n        setRating(rate)       \n    }\n\n    //レビュー送信\n    const isEmptyError = rating === 0\n    const onSubmitReview = async(data: Submitreview) => {\n        if (currentUser && isSignedIn) {\n            //星レビュー必須\n            if (isEmptyError){\n                setErrorMessage('評価を選択してください')\n                return;\n            } \n            const { title, comment } = data\n            const params = {\n                title: title,\n                comment: comment,\n                rate: rating,\n                anime_id: id,\n                user_id: currentUser.id\n            }\n    \n            try {\n                const res = await createReview(params)\n                \n                if(res.status === 200){\n                    const { confirm } = res.data                    \n                    confirm ? showMessage({title: 'レビューを投稿しました。', status: 'success'}) : showMessage({title: 'このアニメには既にレビューを投稿しています。', status: 'error'})\n                    setReviewReflection((prevState) => !prevState)\n                }else {\n                    showMessage({title: 'レビュー投稿に失敗しました。', status: 'error'})\n                }\n                onClose()\n            } catch (error) {\n                showMessage({title: 'レビュー投稿に失敗しました。', status: 'error'})\n                onClose()\n            }\n        }\n        \n        \n    }\n    \n    //モーダルを閉じた場合、評価を初期化\n    useEffect(() => {\n        let isMounted = true\n        if(!isOpen){\n            isMounted && setRating(0)\n            isMounted && setErrorMessage('')\n            reset()\n        }\n        return () => { isMounted = false }\n    }, [isOpen])\n\n    return (\n        <>\n            <Button pl={0} size='xs' leftIcon={<EditIcon />} variant='none' onClick={onOpen}>レビューを書く</Button>\n\n            <Modal\n                initialFocusRef={initialRef}\n                isOpen={isOpen}\n                onClose={onClose}\n                size={partsSize}\n            >\n                <ModalOverlay />\n                <ModalContent>\n                <ModalHeader>アニメレビュー</ModalHeader>\n                <ModalCloseButton />\n                <form onSubmit={handleSubmit(onSubmitReview)}>\n                    <ModalBody pb={6}>\n                        <Box>\n                            <VStack align='left'>\n                                <Text>レビュー評価</Text>\n                                <ReactStars value={rating} size={30} half={false} onChange={getRating}/>\n                                { isEmptyError && <Text color='#E53E3E' fontSize='0.875rem'>{errorMessage}</Text>}\n                            </VStack>\n                        </Box>\n\n                        <FormControl mt={4} id='reviewArea' isRequired isInvalid={errors.title ? true : false}>\n                            <FormLabel>タイトル</FormLabel>\n                            <Input {...register('title', {required: 'タイトルを入力してください', maxLength: {value: 20, message: '20文字以下で入力してください'}})}/>\n                            <FormErrorMessage>\n                                {errors.title && errors.title.message}\n                            </FormErrorMessage>\n                        </FormControl>\n\n                        <FormControl mt={4} id='reviewArea' isRequired isInvalid={errors.comment ? true : false}>\n                            <FormLabel>レビューコメント</FormLabel>\n                            <Textarea \n                                // name='reviewArea'\n                                {...register('comment', {required: 'レビューコメントを入力してください', maxLength: {value: 500, message: '500文字以下で入力してください'}})}\n                            />\n                            <FormErrorMessage>\n                                {errors.comment && errors.comment.message}\n                            </FormErrorMessage>\n                            </FormControl>\n                    </ModalBody>\n\n                    <ModalFooter>\n                        <Button type='submit' colorScheme='blue' mr={3} disabled={!formState.isValid} isLoading={formState.isSubmitting}　spinner={<BeatLoader size={8} color=\"white\" />}　_hover={{opacity: 0.8}}>\n                            Save\n                        </Button>\n                        <Button onClick={onClose}>Cancel</Button>\n                    </ModalFooter>\n                </form>\n                </ModalContent>\n            </Modal>\n        </>\n    )\n})\n\nexport default ReviewModal","/usr/src/app/react-app/src/components/pages/review/ReviewPage.tsx",["290","291","292","293"],"import { memo, useState, VFC, useEffect, useCallback, useRef } from \"react\";\n\nimport { Box, Button, Center, Image, Text, VStack } from \"@chakra-ui/react\";\nimport { useLocation, useParams } from \"react-router-dom\";\n\nimport ReviewList from \"components/organisms/ReviewList\";\nimport { useGetAnimeReviews } from \"customHooks/useGetAnimeReviews\";\n\nconst ReviewPage: VFC = memo(() => {\n    const [ loadIndex, setLoadIndex ] = useState(4)\n    const [ isEmpty, setIsEmpty ] = useState(true);\n    const { state } = useLocation<string>()\n    const { anime_id } = useParams<{anime_id: string}>()\n    const { reviewsList, listCount, loadFlag } = useGetAnimeReviews(anime_id)\n\n    const image = state ? state : `${process.env.PUBLIC_URL}/no_image.png`\n    \n    //「さらに表示」ボタンの制御\n    const displayMore = () => {\n        if(loadIndex < listCount) {\n            setLoadIndex((prevState) => prevState + 4);\n        }\n    }\n\n    //初回レンダリング時のdisabledの値設定\n    //非同期処理でリスト取得後\n    useEffect(() => {\n        let isMounted = true \n        \n        if(loadFlag){\n            const checkLodaList = () => {\n                loadIndex < listCount && setIsEmpty(false)\n            }\n            isMounted && checkLodaList()\n        }\n        return () => { isMounted = false }\n    }, [ loadFlag ])\n\n    //レビューリストを全て表示したらボタンを非活性\n    useEffect(() => {\n        let isMounted = true \n\n        if(loadFlag){            \n            const checkLodaList = () => {\n                loadIndex > listCount ? setIsEmpty(true) : setIsEmpty(false)\n            }\n            isMounted && checkLodaList()\n        }\n        return () => { isMounted = false }\n    }, [ loadIndex ])\n\n\n    return (\n        <Box w={{base: '80%', md: '60%'}} h='100%' bg='#ffff' m='100px auto 20px auto' borderRadius='10px'>\n            <Box w='100%'>\n                <Image src={image} borderRadius='10px 10px 0 0' w='100%' objectFit='cover'/>\n            </Box>\n\n            <Box p={3}>\n                <Text as='h2' fontWeight='bold'>レビュー一覧</Text>\n                <VStack spacing={5} align='start'>\n                    {reviewsList ? (\n                        reviewsList.slice(0, loadIndex).map((review, key) => (\n                            <ReviewList key={key} review={review}/>\n                        ))\n                        ) : null }\n                </VStack>\n                <Center mt={10}>\n                    <Button\n                    colorScheme='teal'\n                    disabled={isEmpty}\n                    onClick={displayMore}\n                    variant=\"solid\"\n                    >\n                        さらに表示\n                    </Button>\n                </Center>\n            </Box>\n        </Box>\n    )\n})\n\nexport default ReviewPage","/usr/src/app/react-app/src/components/pages/error/Page404.tsx",[],"/usr/src/app/react-app/src/customHooks/useGetSize.ts",[],"/usr/src/app/react-app/src/components/organisms/ReviewList.tsx",["294","295"],"import { memo, VFC } from \"react\";\n\nimport { Avatar, Box, Divider, Flex, Text, VStack } from \"@chakra-ui/react\";\nimport ReactStars from \"react-stars\";\n\nimport { AnimeReviewType } from \"types/review/AnimeReviewType\";\nimport { useRecoilState } from \"recoil\";\n\ntype Props = {\n    review: AnimeReviewType;\n}\n\nconst ReviewList: VFC<Props> = memo((props) => {\n    const { review, user } = props.review\n\n    const dateFactory = (date: Date) => {\n        const createDate = new Date(date)\n        return `${createDate.getFullYear()}/${createDate.getMonth() % 12 + 1}/${createDate.getDate()}`\n    }\n    const createdAt = dateFactory(review.created_at)\n    \n    \n    return (\n        <Box w='100%'>\n            <Divider pt='15px'/>\n            <Box mt={5}>\n                <VStack spacing={2} align='flex-start'>\n                    <Text as='p' fontSize='15px'>{`投稿日: ${createdAt}`}</Text>\n                    <Flex align='center'>\n                        <Avatar src={user.image?.url || ''} size='sm' mr={2}/>\n                        <Text as='p'>{user.name}</Text>\n                    </Flex>\n                    <Flex align='center'>\n                        <Text as='p' mr={2} fontWeight='bold'>{review.title}</Text>\n                        <ReactStars edit={false} value={review.rate}/>\n                    </Flex>\n                    <Text>{review.comment}</Text>\n                </VStack>\n            </Box>\n    </Box>\n    )\n})\n\nexport default ReviewList","/usr/src/app/react-app/src/util/ScrollToTop.tsx",[],"/usr/src/app/react-app/src/lib/api/review/review.ts",[],"/usr/src/app/react-app/src/customHooks/useGetAnimeReviews.ts",["296"],"import { useEffect, useState } from \"react\"\nimport { useRecoilState } from \"recoil\"\n\nimport { getReviewsList } from \"lib/api/review/review\"\nimport { AnimeReviewList } from \"store/AnimeReviewList\"\nimport { useMessage } from \"./message/useMessage\"\nimport { AnimeReviewType } from \"types/review/AnimeReviewType\"\n\ntype AnimeApiReview = (id: string) => {\n    reviewsList: AnimeReviewType[];\n    listCount: number;\n    loadFlag: boolean;\n}\n\nexport const useGetAnimeReviews: AnimeApiReview = (id: string) => {\n    const [ reviewsList, setReviewsList ] = useRecoilState(AnimeReviewList)\n    const [ loadFlag, setLoadFlag ] = useState(false)\n    const [ listCount, setListCount] = useState(0);\n    const { showMessage } = useMessage()\n\n    \n    useEffect(() => {\n        let isMounted = true\n        const getReviews = async(id: string) => {\n            try {\n                const res = await getReviewsList(id)\n                if (res.status === 200) {\n                    const reviewsData : AnimeReviewType[] = res.data\n\n                    setReviewsList(reviewsData)\n                    setListCount(reviewsData.length)\n                    setLoadFlag(true)\n                } else {\n                    console.error('status error')\n                }            \n            } catch (error) {\n                showMessage({title: 'アニメ一覧の取得に失敗しました', status: \"error\"})\n            }\n        }\n\n        isMounted && getReviews(id)\n\n        return () => { isMounted = false }\n    }, [])\n\n    return { reviewsList, listCount, loadFlag }\n}","/usr/src/app/react-app/src/store/AnimeReviewList.ts",[],"/usr/src/app/react-app/src/customHooks/auth/useSignOut.ts",["297","298"],"import { useCallback } from \"react\"\n\nimport { useMessage } from \"customHooks/message/useMessage\"\nimport Cookies from \"js-cookie\"\nimport { signOut } from \"lib/api/auth/auth\"\nimport { useHistory } from \"react-router-dom\"\nimport { useRecoilState, useSetRecoilState } from \"recoil\"\n\nimport { CurrentUser, IsSignedIn } from \"store/auth/Auth\"\nimport { AuthLoding } from \"store/loding/AuthLoding\"\n\nexport const useSignOut = (text: string) => {\n    const history = useHistory()\n    const setIsSignedIn = useSetRecoilState(IsSignedIn)\n    const setAuthLoding = useSetRecoilState(AuthLoding)\n    const setCurrentUser = useSetRecoilState(CurrentUser)\n    const { showMessage } = useMessage()\n\n    const executionSignOut = useCallback(async() => {\n        const res = await signOut()\n                \n        if (res.data.success === true){\n             // サインアウト時には各Cookieを削除\n            Cookies.remove(\"_access_token\")\n            Cookies.remove(\"_client\")\n            Cookies.remove(\"_uid\")\n    \n            setIsSignedIn(false)\n            setAuthLoding(true)\n            \n            setCurrentUser(undefined)\n            history.push('/signin')\n    \n            showMessage({title: `${text}`, status: 'info'})\n        }\n    }, [])\n    \n    return { executionSignOut }\n}","/usr/src/app/react-app/src/store/loding/HasMore.ts",[],"/usr/src/app/react-app/src/customHooks/useNextAnimes.ts",["299","300"],"import { useState, useCallback, useEffect } from \"react\";\n\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from \"recoil\";\n\nimport { client } from \"lib/api/client\";\nimport { AnimeLists } from \"store/AnimeLists\";\nimport { ApiKeyValue } from \"store/ApiKeyValue\";\nimport { HasMore } from \"store/loding/HasMore\";\nimport { AnnictApiType } from \"types/api/AnnictApiType\";\nimport { useMessage } from \"./message/useMessage\";\nimport { LoadPage } from \"store/LoadPage\";\n\n\ntype NextAnimes = (page: number) => {\n    isLoading: boolean;\n    animeLists: AnnictApiType[];\n}\n\nexport const useNextAnimes: NextAnimes = (page: number) => {\n    const [ isLoading, setIsLoding ]  = useState(false);\n    const [ animeLists, setAnimeLists ] = useRecoilState(AnimeLists)\n    const setHasMore = useSetRecoilState(HasMore)\n    const apiKeyValue = useRecoilValue(ApiKeyValue)\n    const loadPage = useRecoilValue(LoadPage)\n    const { showMessage } = useMessage()\n\n    const getNextAnimes = useCallback(async() => {        \n        try {\n            setIsLoding(true)\n            const filter_season = `${apiKeyValue.year}-${apiKeyValue.cour}`\n            const res = await client.get('/annicts/search', {\n                params: {\n                    filter_season,\n                    page\n                }\n            })\n\n            if (res.status === 200) {\n                const animeDate: AnnictApiType[] = res.data.works\n\n                //取得できるアニメがなければ続きを読み込むかの判定を変更\n                animeDate.length < 1 && setHasMore(false)\n                \n                //重複データ削除\n                const dataList = [...animeLists, ...animeDate]            \n                \n                let map = new Map(dataList.map<[number, AnnictApiType]>(data => [data.id, data]));\n                const distinctDataList = Array.from(map.values())\n    \n                setAnimeLists(distinctDataList)\n                setIsLoding(false) \n            } else {\n                console.error('status error')\n            }\n        } catch (error) {\n            showMessage({title: 'アニメ一覧の取得に失敗しました', status: \"error\"})\n        }\n    },[loadPage])\n\n    useEffect(() => {\n        let isMounted = true\n        isMounted && getNextAnimes()\n        return () => {\n            isMounted = false\n        }\n    }, [loadPage])\n\n    return { animeLists, isLoading }\n}\n\n","/usr/src/app/react-app/src/store/LoadPage.ts",[],"/usr/src/app/react-app/src/customHooks/useGetReviewCount.ts",["301","302"],"import { useCallback, useEffect, useState } from 'react'\n\nimport { getReviewCount } from 'lib/api/review/review'\nimport { useRecoilValue } from 'recoil'\nimport { ReviewReflection } from 'store/ReviewReflection'\n\ntype ReviewCount = (id: number) => {\n    count: number;\n    rate: number;\n}\n\nexport const useGetReviewCount: ReviewCount = (id: number) => {\n    const [ count, setCount ] = useState(0)\n    const [ rate, setRate ] = useState(0)\n    const reviewReflection = useRecoilValue(ReviewReflection)\n\n    const getReviewStatus = useCallback(async() => {\n        try {\n            const reviewCount = await getReviewCount(id)\n            const { review_count, average_rate } = reviewCount.data\n\n            review_count && setCount(review_count)\n            average_rate && setRate(average_rate)\n            \n        } catch (error) {\n            console.error(error)\n        }\n    }, [reviewReflection])\n\n    useEffect(() => {\n        let isMounted = true\n        isMounted && getReviewStatus()\n        return () => {\n            isMounted = false\n        }\n    }, [reviewReflection])\n\n    return { count, rate }\n}","/usr/src/app/react-app/src/store/ReviewReflection.ts",[],"/usr/src/app/react-app/src/lib/api/favorite/favorite.ts",[],{"ruleId":"303","replacedBy":"304"},{"ruleId":"305","replacedBy":"306"},{"ruleId":"307","severity":1,"message":"308","line":1,"column":27,"nodeType":"309","messageId":"310","endLine":1,"endColumn":35},{"ruleId":"307","severity":1,"message":"311","line":22,"column":13,"nodeType":"309","messageId":"310","endLine":22,"endColumn":24},{"ruleId":"312","severity":1,"message":"313","line":46,"column":8,"nodeType":"314","endLine":46,"endColumn":20,"suggestions":"315"},{"ruleId":"307","severity":1,"message":"316","line":8,"column":10,"nodeType":"309","messageId":"310","endLine":8,"endColumn":24},{"ruleId":"312","severity":1,"message":"317","line":18,"column":8,"nodeType":"314","endLine":18,"endColumn":21,"suggestions":"318"},{"ruleId":"307","severity":1,"message":"319","line":3,"column":37,"nodeType":"309","messageId":"310","endLine":3,"endColumn":44},{"ruleId":"307","severity":1,"message":"320","line":5,"column":8,"nodeType":"309","messageId":"310","endLine":5,"endColumn":15},{"ruleId":"307","severity":1,"message":"321","line":12,"column":10,"nodeType":"309","messageId":"310","endLine":12,"endColumn":17},{"ruleId":"307","severity":1,"message":"322","line":20,"column":13,"nodeType":"309","messageId":"310","endLine":20,"endColumn":23},{"ruleId":"307","severity":1,"message":"323","line":20,"column":25,"nodeType":"309","messageId":"310","endLine":20,"endColumn":38},{"ruleId":"312","severity":1,"message":"324","line":18,"column":8,"nodeType":"314","endLine":18,"endColumn":21,"suggestions":"325"},{"ruleId":"312","severity":1,"message":"326","line":24,"column":8,"nodeType":"314","endLine":24,"endColumn":21,"suggestions":"327"},{"ruleId":"307","severity":1,"message":"328","line":4,"column":10,"nodeType":"309","messageId":"310","endLine":4,"endColumn":21},{"ruleId":"307","severity":1,"message":"329","line":15,"column":25,"nodeType":"309","messageId":"310","endLine":15,"endColumn":38},{"ruleId":"307","severity":1,"message":"330","line":10,"column":13,"nodeType":"309","messageId":"310","endLine":10,"endColumn":23},{"ruleId":"307","severity":1,"message":"331","line":10,"column":25,"nodeType":"309","messageId":"310","endLine":10,"endColumn":38},{"ruleId":"312","severity":1,"message":"332","line":39,"column":8,"nodeType":"314","endLine":39,"endColumn":28,"suggestions":"333"},{"ruleId":"307","severity":1,"message":"334","line":30,"column":11,"nodeType":"309","messageId":"310","endLine":30,"endColumn":21},{"ruleId":"312","severity":1,"message":"335","line":108,"column":8,"nodeType":"314","endLine":108,"endColumn":14,"suggestions":"336"},{"ruleId":"307","severity":1,"message":"316","line":2,"column":10,"nodeType":"309","messageId":"310","endLine":2,"endColumn":24},{"ruleId":"337","severity":1,"message":"338","line":22,"column":14,"nodeType":"309","messageId":"339","endLine":22,"endColumn":25},{"ruleId":"312","severity":1,"message":"340","line":49,"column":12,"nodeType":"314","endLine":49,"endColumn":25,"suggestions":"341"},{"ruleId":"307","severity":1,"message":"342","line":2,"column":8,"nodeType":"309","messageId":"310","endLine":2,"endColumn":13},{"ruleId":"307","severity":1,"message":"343","line":1,"column":96,"nodeType":"309","messageId":"310","endLine":1,"endColumn":100},{"ruleId":"307","severity":1,"message":"344","line":9,"column":16,"nodeType":"309","messageId":"310","endLine":9,"endColumn":27},{"ruleId":"307","severity":1,"message":"345","line":4,"column":10,"nodeType":"309","messageId":"310","endLine":4,"endColumn":28},{"ruleId":"307","severity":1,"message":"346","line":4,"column":30,"nodeType":"309","messageId":"310","endLine":4,"endColumn":47},{"ruleId":"307","severity":1,"message":"344","line":1,"column":16,"nodeType":"309","messageId":"310","endLine":1,"endColumn":27},{"ruleId":"312","severity":1,"message":"347","line":43,"column":8,"nodeType":"314","endLine":43,"endColumn":24,"suggestions":"348"},{"ruleId":"307","severity":1,"message":"349","line":21,"column":21,"nodeType":"309","messageId":"310","endLine":21,"endColumn":30},{"ruleId":"307","severity":1,"message":"350","line":22,"column":13,"nodeType":"309","messageId":"310","endLine":22,"endColumn":27},{"ruleId":"307","severity":1,"message":"351","line":3,"column":10,"nodeType":"309","messageId":"310","endLine":3,"endColumn":20},{"ruleId":"307","severity":1,"message":"352","line":1,"column":23,"nodeType":"309","messageId":"310","endLine":1,"endColumn":29},{"ruleId":"307","severity":1,"message":"311","line":14,"column":13,"nodeType":"309","messageId":"310","endLine":14,"endColumn":24},{"ruleId":"303","replacedBy":"353"},{"ruleId":"305","replacedBy":"354"},{"ruleId":"307","severity":1,"message":"355","line":14,"column":24,"nodeType":"309","messageId":"310","endLine":14,"endColumn":37},{"ruleId":"312","severity":1,"message":"356","line":94,"column":8,"nodeType":"314","endLine":94,"endColumn":16,"suggestions":"357"},{"ruleId":"307","severity":1,"message":"344","line":1,"column":42,"nodeType":"309","messageId":"310","endLine":1,"endColumn":53},{"ruleId":"307","severity":1,"message":"358","line":1,"column":55,"nodeType":"309","messageId":"310","endLine":1,"endColumn":61},{"ruleId":"312","severity":1,"message":"359","line":37,"column":8,"nodeType":"314","endLine":37,"endColumn":20,"suggestions":"360"},{"ruleId":"312","severity":1,"message":"361","line":50,"column":8,"nodeType":"314","endLine":50,"endColumn":21,"suggestions":"362"},{"ruleId":"307","severity":1,"message":"363","line":7,"column":10,"nodeType":"309","messageId":"310","endLine":7,"endColumn":24},{"ruleId":"307","severity":1,"message":"364","line":8,"column":10,"nodeType":"309","messageId":"310","endLine":8,"endColumn":21},{"ruleId":"312","severity":1,"message":"365","line":44,"column":8,"nodeType":"314","endLine":44,"endColumn":10,"suggestions":"366"},{"ruleId":"307","severity":1,"message":"363","line":7,"column":10,"nodeType":"309","messageId":"310","endLine":7,"endColumn":24},{"ruleId":"312","severity":1,"message":"367","line":36,"column":8,"nodeType":"314","endLine":36,"endColumn":10,"suggestions":"368"},{"ruleId":"312","severity":1,"message":"369","line":58,"column":7,"nodeType":"314","endLine":58,"endColumn":17,"suggestions":"370"},{"ruleId":"312","severity":1,"message":"371","line":66,"column":8,"nodeType":"314","endLine":66,"endColumn":18,"suggestions":"372"},{"ruleId":"312","severity":1,"message":"373","line":28,"column":8,"nodeType":"314","endLine":28,"endColumn":26,"suggestions":"374"},{"ruleId":"312","severity":1,"message":"375","line":36,"column":8,"nodeType":"314","endLine":36,"endColumn":26,"suggestions":"376"},"no-native-reassign",["377"],"no-negated-in-lhs",["378"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'currentUser' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleGetCurrentUser'. Either include it or remove the dependency array.","ArrayExpression",["379"],"'useCourFactory' is defined but never used.","React Hook useCallback has a missing dependency: 'getAnimes'. Either include it or remove the dependency array.",["380"],"'LinkBox' is defined but never used.","'Cookies' is defined but never used.","'signOut' is defined but never used.","'authLoding' is assigned a value but never used.","'setAuthLoding' is assigned a value but never used.","React Hook useCallback has missing dependencies: 'setApiKeyValue' and 'setSelectyear'. Either include them or remove the dependency array.",["381"],"React Hook useCallback has missing dependencies: 'setApiKeyValue' and 'setSelectCour'. Either include them or remove the dependency array.",["382"],"'ApiKeyValue' is defined but never used.","'setSelectCour' is assigned a value but never used.","'selectYear' is assigned a value but never used.","'setSelectyear' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'setLoadPage'. Either include it or remove the dependency array.",["383"],"'isSignedIn' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'animeList.id'. Either include it or remove the dependency array.",["384"],"@typescript-eslint/no-redeclare","'ApiKeyValue' is already defined.","redeclared","React Hook useCallback has missing dependencies: 'setAnimeLists', 'setHasMore', 'setLoadPage', and 'showMessage'. Either include them or remove the dependency array.",["385"],"'React' is defined but never used.","'Text' is defined but never used.","'useCallback' is defined but never used.","'EditPasswordUpdate' is defined but never used.","'UserProfileUpdate' is defined but never used.","React Hook useEffect has missing dependencies: 'setFavoriteAnimeList', 'setIsFavoriteLike', and 'setLoding'. Either include them or remove the dependency array.",["386"],"'setIsLike' is assigned a value but never used.","'isFavoriteLike' is assigned a value but never used.","'IconButton' is defined but never used.","'Center' is defined but never used.",["377"],["378"],"'Submitreviews' is defined but never used.","React Hook useEffect has a missing dependency: 'reset'. Either include it or remove the dependency array.",["387"],"'useRef' is defined but never used.","React Hook useEffect has missing dependencies: 'listCount' and 'loadIndex'. Either include them or remove the dependency array.",["388"],"React Hook useEffect has missing dependencies: 'listCount' and 'loadFlag'. Either include them or remove the dependency array.",["389"],"'useRecoilState' is defined but never used.","'CurrentUser' is defined but never used.","React Hook useEffect has missing dependencies: 'id', 'setReviewsList', and 'showMessage'. Either include them or remove the dependency array.",["390"],"React Hook useCallback has missing dependencies: 'history', 'setAuthLoding', 'setCurrentUser', 'setIsSignedIn', 'showMessage', and 'text'. Either include them or remove the dependency array.",["391"],"React Hook useCallback has missing dependencies: 'animeLists', 'apiKeyValue.cour', 'apiKeyValue.year', 'page', 'setAnimeLists', 'setHasMore', and 'showMessage'. Either include them or remove the dependency array.",["392"],"React Hook useEffect has a missing dependency: 'getNextAnimes'. Either include it or remove the dependency array.",["393"],"React Hook useCallback has a missing dependency: 'id'. Either include it or remove the dependency array.",["394"],"React Hook useEffect has a missing dependency: 'getReviewStatus'. Either include it or remove the dependency array.",["395"],"no-global-assign","no-unsafe-negation",{"desc":"396","fix":"397"},{"desc":"398","fix":"399"},{"desc":"400","fix":"401"},{"desc":"402","fix":"403"},{"desc":"404","fix":"405"},{"desc":"406","fix":"407"},{"desc":"408","fix":"409"},{"desc":"410","fix":"411"},{"desc":"412","fix":"413"},{"desc":"414","fix":"415"},{"desc":"414","fix":"416"},{"desc":"417","fix":"418"},{"desc":"419","fix":"420"},{"desc":"421","fix":"422"},{"desc":"423","fix":"424"},{"desc":"425","fix":"426"},{"desc":"427","fix":"428"},"Update the dependencies array to be: [handleGetCurrentUser, isSignedIn]",{"range":"429","text":"430"},"Update the dependencies array to be: [getAnimes]",{"range":"431","text":"432"},"Update the dependencies array to be: [apiKeyValue, setApiKeyValue, setSelectyear]",{"range":"433","text":"434"},"Update the dependencies array to be: [apiKeyValue, setApiKeyValue, setSelectCour]",{"range":"435","text":"436"},"Update the dependencies array to be: [hasMore, isLoading, setLoadPage]",{"range":"437","text":"438"},"Update the dependencies array to be: [animeList.id, like]",{"range":"439","text":"440"},"Update the dependencies array to be: [apiKeyValue.cour, apiKeyValue.year, setAnimeLists, setHasMore, setLoadPage, showMessage]",{"range":"441","text":"442"},"Update the dependencies array to be: [isFavoriteLike, setFavoriteAnimeList, setIsFavoriteLike, setLoding]",{"range":"443","text":"444"},"Update the dependencies array to be: [isOpen, reset]",{"range":"445","text":"446"},"Update the dependencies array to be: [listCount, loadFlag, loadIndex]",{"range":"447","text":"448"},{"range":"449","text":"448"},"Update the dependencies array to be: [id, setReviewsList, showMessage]",{"range":"450","text":"451"},"Update the dependencies array to be: [history, setAuthLoding, setCurrentUser, setIsSignedIn, showMessage, text]",{"range":"452","text":"453"},"Update the dependencies array to be: [animeLists, apiKeyValue.cour, apiKeyValue.year, page, setAnimeLists, setHasMore, showMessage]",{"range":"454","text":"455"},"Update the dependencies array to be: [getNextAnimes, loadPage]",{"range":"456","text":"457"},"Update the dependencies array to be: [id]",{"range":"458","text":"459"},"Update the dependencies array to be: [getReviewStatus, reviewReflection]",{"range":"460","text":"461"},[1690,1702],"[handleGetCurrentUser, isSignedIn]",[644,657],"[getAnimes]",[741,754],"[apiKeyValue, setApiKeyValue, setSelectyear]",[989,1002],"[apiKeyValue, setApiKeyValue, setSelectCour]",[1459,1479],"[hasMore, isLoading, setLoadPage]",[4073,4079],"[animeList.id, like]",[1742,1755],"[apiKeyValue.cour, apiKeyValue.year, setAnimeLists, setHasMore, setLoadPage, showMessage]",[1551,1567],"[isFavoriteLike, setFavoriteAnimeList, setIsFavoriteLike, setLoding]",[3331,3339],"[isOpen, reset]",[1252,1264],"[listCount, loadFlag, loadIndex]",[1617,1630],[1475,1477],"[id, setReviewsList, showMessage]",[1221,1223],"[history, setAuthLoding, setCurrentUser, setIsSignedIn, showMessage, text]",[2100,2110],"[animeLists, apiKeyValue.cour, apiKeyValue.year, page, setAnimeLists, setHasMore, showMessage]",[2271,2281],"[getNextAnimes, loadPage]",[885,903],"[id]",[1066,1084],"[getReviewStatus, reviewReflection]"]